{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport styled from \"styled-components\";\nimport React, { createRef } from \"react\";\nimport * as Icons from \"react-feather\";\nimport AceEditor from \"react-ace\";\nimport ace, { UndoManager } from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-streamlit_dark\";\nimport \"ace-builds/src-noconflict/theme-streamlit_light\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\"\n};\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CodeEditor extends StreamlitComponentBase {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.defaultUndoManager = new UndoManager();\n    this.state = {\n      code: this.props.args['code'],\n      lang: this.props.args['lang'],\n      isFocused: false,\n      cursorPosition: {\n        row: 0,\n        column: 1\n      },\n      undoManager: this.defaultUndoManager\n    };\n    this.aceEditor = /*#__PURE__*/createRef();\n    this.customButtons = {\n      regular: [{\n        name: \"shortcuts\",\n        feather: \"Type\",\n        commands: [\"showKeyboardShortcuts\"],\n        response: \"\",\n        position: {\n          bottom: \"18rem\",\n          right: \"0.3rem\"\n        }\n      }, {\n        name: \"removenewlines\",\n        feather: \"Minimize2\",\n        commands: [\"selectall\", \"toggleSplitSelectionIntoLines\", \"gotolinestart\", \"gotolinestart\", \"backspace\"],\n        response: \"\",\n        position: {\n          bottom: \"15rem\",\n          right: \"0.3rem\"\n        }\n      }, {\n        name: \"save\",\n        feather: \"Save\",\n        commands: [\"save-state\"],\n        response: \"saved\",\n        position: {\n          bottom: \"12rem\",\n          right: \"0.3rem\"\n        }\n      }],\n      primary: [{\n        name: \"submit\",\n        feather: \"Play\",\n        commands: [\"submit\"],\n        response: \"\",\n        position: {\n          bottom: \"6px\",\n          right: \"0.3rem\"\n        }\n      }, {\n        name: \"console\",\n        feather: \"Terminal\",\n        commands: [\"openCommandPallete\"],\n        response: \"\",\n        position: {\n          bottom: \"3.15rem\",\n          right: \"0.3rem\"\n        }\n      }]\n    };\n    this.commands = [{\n      name: 'submit',\n      //name for the key binding.\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        console.log(\"submit keys pressed\");\n\n        // IMPORTANT: The function `setState()` is required to make sure component state is saved before submit.\n        //            Otherwise changes to the editor and its contents will be lost.\n        this.setState({\n          code: editor.getValue(),\n          cursorPosition: editor.getCursorPosition(),\n          undoManager: editor.getSession().getUndoManager()\n        }, () => {\n          Streamlit.setComponentValue({\n            type: \"submit\",\n            code: editor.getValue()\n          });\n        });\n      }\n    }, {\n      name: 'save-state',\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        console.log(\"save state keys pressed\");\n        this.setState({\n          code: editor.getValue(),\n          cursorPosition: editor.getCursorPosition(),\n          undoManager: editor.getSession().getUndoManager(),\n          lang: this.state.lang,\n          isFocused: this.state.isFocused\n        });\n      }\n    }, {\n      name: 'copyAll',\n      exec: editor => {\n        console.log(\"copyAll&&&&&&&&&&&\");\n        this.unsecureCopyTextToClipboard(editor.getValue());\n      }\n    }];\n    this.execute = function (command) {\n      var _this$aceEditor$curre;\n      let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      const editor = (_this$aceEditor$curre = _this.aceEditor.current) === null || _this$aceEditor$curre === void 0 ? void 0 : _this$aceEditor$curre.editor;\n      if (editor) {\n        if (!args) {\n          editor.execCommand(command);\n        } else if (typeof args === \"number\" || typeof args === \"string\") {\n          editor.execCommand(command, args);\n        } else if (typeof args === \"object\" && !Array.isArray(args)) {\n          var containsNumsStr = true;\n          args.values.array.forEach(element => {\n            containsNumsStr = typeof element === \"string\" || typeof element === \"number\" ? containsNumsStr : false;\n          });\n          if (args.values.length < 4 && containsNumsStr) {\n            editor.execCommand(command, args);\n          }\n        } else {\n          console.warn(`failed to execute \"${command}\" command!`);\n        }\n      }\n    };\n    this.executeAll = function (commands) {\n      let sendResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n      commands.forEach(command => {\n        if (Array.isArray(command)) {\n          typeof command[0] === \"string\" ? _this.execute(command[0], command[1]) : console.warn(\"improper command format!\");\n        } else if (typeof command === \"string\") {\n          _this.execute(command);\n        } else {\n          console.warn(\"failed to execute command!\");\n        }\n      });\n      if (sendResponse) {\n        _this.respond(sendResponse);\n      }\n    };\n    this.respond = function () {\n      let responseType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"submit\";\n      console.log(\"respond called:\" + responseType);\n      _this.setState(_this.state, () => {\n        Streamlit.setComponentValue({\n          type: responseType,\n          code: _this.state.code\n        });\n      });\n    };\n    this.copyToClipboard = async () => {\n      try {\n        await navigator.clipboard.writeText(this.state.code);\n        console.log(this.state.code);\n      } catch (err) {\n        console.warn('Failed to copy securely -> reverting to unsecure copy');\n        this.unsecureCopyToClipboard();\n      }\n    };\n    this.unsecureCopyToClipboard = () => {\n      const textField = document.createElement('textarea');\n      textField.value = this.aceEditor.current ? this.aceEditor.current.editor.getValue() : this.state.code;\n      document.body.appendChild(textField);\n      textField.select();\n      document.execCommand('copy');\n      textField.remove();\n    };\n    this.unsecureCopyTextToClipboard = text => {\n      const textField = document.createElement('textarea');\n      textField.value = text;\n      document.body.appendChild(textField);\n      textField.select();\n      document.execCommand('copy');\n      textField.remove();\n    };\n    this.createSnippets = snippets => {\n      return typeof snippets === \"string\" ? snippets : (Array.isArray(snippets) ? snippets : [snippets]).map(_ref => {\n        let {\n          name,\n          code\n        } = _ref;\n        return ['snippet ' + name, code.split('\\n').map(c => '\\t' + c).join('\\n')].join('\\n');\n      }).join('\\n');\n    };\n    this.handleOnBlur = (event, editor) => {\n      console.log(\"~~onBlur~~\");\n\n      // when user clicks or puts a focus on anything outside the editor, both the relatedTarget and sourceCapabilities\n      // properties of the event object are `Undefined`. This could be due to the fact that the CodeEditor is in an iframe\n      // and therefore cant get the info on whatever is receiving the focus thats outside the iframe.\n      console.log(event);\n      if (event.relatedTarget || event.sourceCapabilities) {\n        this.state = {\n          code: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || this.state.code,\n          cursorPosition: (editor === null || editor === void 0 ? void 0 : editor.getCursorPosition()) || this.state.cursorPosition,\n          undoManager: (editor === null || editor === void 0 ? void 0 : editor.getSession().getUndoManager()) || this.state.undoManager,\n          lang: this.state.lang,\n          isFocused: this.state.isFocused\n        };\n      } else {\n        this.setState({\n          code: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || this.state.code,\n          cursorPosition: (editor === null || editor === void 0 ? void 0 : editor.getCursorPosition()) || this.state.cursorPosition,\n          undoManager: (editor === null || editor === void 0 ? void 0 : editor.getSession().getUndoManager()) || this.state.undoManager,\n          lang: this.state.lang,\n          isFocused: this.state.isFocused\n        });\n      }\n    };\n    this.handleBeforeLoad = Ace => {\n      console.log(\"~before load~\");\n      console.log(this.state);\n      //console.log(ace);\n      console.log(\"~~~~~~~~~~~~~\");\n    };\n    this.handleOnLoad = editor => {\n      console.log(\"~on load~\");\n      ace.require(\"ace/ext/keybinding_menu\").init(editor);\n      console.log(\"is menu attached? =======>\");\n      console.log(editor);\n      const snippets = this.createSnippets(this.props.args['snippets']);\n      if (snippets) {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n\n        //// The function getMode() returns an Ace.SyntaxId object that\n        //// has no way to get or access its $id variable. So the following\n        //// doesnt work:\n        //const id = editor.session.getMode().$id;\n\n        //// The current workaround used here is to recognize that when the \n        //// AceEditor mode prop is set with a string (ex: mode=\"python\"), it  \n        //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n        //const id = `ace/mode/${this.state.lang}`;\n\n        snippetManager.register(snippetManager.parseSnippetFile(snippets, this.state.lang), this.state.lang);\n        console.log(JSON.stringify(snippets));\n      }\n      editor.getSession().setUndoManager(this.state.undoManager);\n      const cursorPos = this.state.cursorPosition;\n      console.log(cursorPos);\n      editor.moveCursorTo(cursorPos.row, cursorPos.column);\n      editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n      //editor.resize();\n    };\n    this.render = () => {\n      // // Arguments that are passed to the plugin in Python are accessible\n      // // via `this.props.args`. Here, we access the \"name\" arg.\n\n      const codeEditorProps = this.props.args[\"rootProps\"];\n      const aceEditorProps = {\n        ...defaultEditorProps,\n        ...this.props.args['editorProps']\n      };\n      const aceOptions = {\n        ...defaultOptions,\n        ...this.props.args['options']\n      };\n      const partProps = {\n        setOptions: aceOptions,\n        editorProps: aceEditorProps\n      };\n      const aceProps = {\n        ...defaultProps,\n        ...partProps,\n        ...this.props.args['props']\n      };\n      const customButtonsDict = this.props.args['buttons'];\n      const menudict = this.props.args[\"menu\"];\n      console.log(\"Render----------------\");\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      console.log(this.state.lang);\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const editorTheme = this.props.args[\"theme\"];\n      const defaultTheme = theme ? theme.base : \"dark\";\n      var themeProp = \"streamlit_dark\";\n      switch (editorTheme) {\n        case \"contrast\":\n          themeProp = defaultTheme === \"dark\" ? \"streamlit_light\" : \"streamlit_dark\";\n          break;\n        case \"light\":\n          themeProp = \"streamlit_light\";\n          break;\n        case \"dark\":\n          themeProp = \"streamlit_dark\";\n          break;\n        default:\n          themeProp = defaultTheme === \"dark\" ? \"streamlit_dark\" : \"streamlit_light\";\n          break;\n      }\n      console.log(theme === null || theme === void 0 ? void 0 : theme.base);\n      style.border = \"none\";\n      style.outline = \"none\";\n      style.top = \"none\";\n      style.bottom = \"none\";\n      style.left = \"none\";\n      style.right = \"none\";\n      style.stroke = theme ? theme.primaryColor : \"rgba(250,250,250,1)\";\n      const StyledCodeEditor = styled.div(() => ({\n        borderRadius: \"8px\",\n        overflow: \"hidden\",\n        \":hover\": {\n          button: {\n            opacity: 1,\n            transform: \"scale(1)\",\n            transition: \"none\"\n          }\n        }\n      }));\n      const StyledDiv = styled.div``;\n      const StyledButton = styled.button(_ref2 => {\n        let {\n          theme\n        } = _ref2;\n        return {\n          // center icon\n          lineHeight: 0,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          // copied from full screen button\n          transform: \"scale(0)\",\n          transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n          opacity: 0,\n          position: \"absolute\",\n          top: theme.top,\n          left: theme.left,\n          right: theme.right,\n          bottom: theme.bottom,\n          //color: \"rgba(250,250,250,0.6)\",\n          height: \"2.5rem\",\n          width: \"2.5rem\",\n          zIndex: 101,\n          border: \"none\",\n          borderRadius: \"50%\",\n          background: \"none\",\n          \":focus \": {\n            outline: \"none\"\n          },\n          svg: {\n            stroke: themeProp === \"streamlit_dark\" ? \"rgba(250,250,250,0.6)\" : \"rgba(0,0,0,0.5)\"\n          },\n          \":hover svg\": {\n            stroke: themeProp === \"streamlit_dark\" ? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"\n          }\n        };\n      });\n      const StyledPrimaryButton = styled(StyledButton)({\n        \":hover svg\": {\n          stroke: style.stroke\n        }\n      });\n      const creatIcon = name => {\n        const CustomIcon = Icons[name];\n        return /*#__PURE__*/_jsxDEV(CustomIcon, {\n          size: \"16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 14\n        }, this);\n      };\n      const CopyIcon = Icons['Copy'];\n      const PlayIcon = Icons['Play'];\n      // const RemoveNewLinesIcon = Icons[\"Minimize2\"];\n      console.log(\"Menu\" in Object.keys(Icons));\n      return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n        theme: codeEditorProps,\n        children: [/*#__PURE__*/_jsxDEV(AceEditor, {\n          ref: this.aceEditor,\n          name: \"UNIQUE_ID_OF_DIV\",\n          mode: this.state.lang,\n          theme: themeProp,\n          keyboardHandler: this.props.args[\"shortcuts\"],\n          value: this.state.code,\n          onBeforeLoad: this.handleBeforeLoad,\n          onLoad: this.handleOnLoad,\n          onBlur: this.handleOnBlur,\n          commands: this.commands,\n          ...aceProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n          theme: {\n            top: \"8px\",\n            right: \"0.3rem\",\n            left: style.left,\n            bottom: style.bottom\n          },\n          onClick: this.copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(CopyIcon, {\n            size: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 12\n          }, this)\n        }, \"copy-default\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 9\n        }, this), customButtonsDict ? customButtonsDict.regular ? customButtonsDict.regular.map((button, index) => /*#__PURE__*/_jsxDEV(StyledButton, {\n          theme: button.position ? button.position : {},\n          onClick: button.commands || button.response ? () => this.executeAll(button.commands ? button.commands : [], button.response) : this.copyToClipboard,\n          children: creatIcon(Object.keys(Icons).includes(button.feather) ? button.feather : \"Copy\")\n        }, button.name ? button.name : \"regButton\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this)) : `` : ``, customButtonsDict ? customButtonsDict.primary ? customButtonsDict.primary.map((button, index) => /*#__PURE__*/_jsxDEV(StyledPrimaryButton, {\n          theme: button.position ? button.position : {},\n          onClick: button.commands || button.response ? () => this.executeAll(button.commands ? button.commands : [], button.response) : this.copyToClipboard,\n          children: creatIcon(Object.keys(Icons).includes(button.feather) ? button.feather : \"Copy\")\n        }, button.name ? button.name : \"primButton\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this)) : `` : ``, !menudict ? `` : /*#__PURE__*/_jsxDEV(StyledDiv, {\n          theme: menudict.menuProps ? menudict.menuProps : {},\n          children: !menudict.groups ? `` : menudict.groups.map((group, index) => /*#__PURE__*/_jsxDEV(StyledDiv, {\n            theme: group.styleProps ? group.styleProps : {},\n            children: group.buttons.map((button, index) => /*#__PURE__*/_jsxDEV(StyledButton, {\n              theme: button.position ? button.position : {},\n              onClick: button.commands || button.response ? () => this.executeAll(button.commands ? button.commands : [], button.response) : this.copyToClipboard,\n              children: creatIcon(Object.keys(Icons).includes(button.feather) ? button.feather : \"Copy\")\n            }, button.name ? group.name + \"-\" + button.name : group.name + \"-button\" + index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this))\n          }, group.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 13\n          }, this))\n        }, \"menu\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  //END OF RENDER FUNCTION\n  //----------------------------------------------------------------------\n\n  componentDidMount() {\n    console.log(\"===================\");\n    console.log(\" componentDidMount \");\n    console.log(this.state);\n    ////The following sets the editor up after this custom component mounts\n    //this.setState({code: this.props.args[\"code\"], lang: this.props.args[\"lang\"]});\n    super.componentDidMount();\n    console.log(\"===================\");\n  }\n  componentDidUpdate() {\n    console.log(\"--------------------\");\n    console.log(\" componentDidUpdate \");\n    console.log(this.state);\n    super.componentDidUpdate();\n    console.log(\"--------------------\");\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default _c = withStreamlitConnection(CodeEditor);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","styled","React","createRef","Icons","AceEditor","ace","UndoManager","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","CodeEditor","defaultUndoManager","state","code","props","args","lang","isFocused","cursorPosition","row","column","undoManager","aceEditor","customButtons","regular","name","feather","commands","response","position","bottom","right","primary","bindKey","win","mac","exec","editor","console","log","setState","getValue","getCursorPosition","getSession","getUndoManager","setComponentValue","type","unsecureCopyTextToClipboard","execute","command","current","execCommand","Array","isArray","containsNumsStr","values","array","forEach","element","length","warn","executeAll","sendResponse","respond","responseType","copyToClipboard","navigator","clipboard","writeText","err","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","remove","text","createSnippets","snippets","map","split","c","join","handleOnBlur","event","relatedTarget","sourceCapabilities","handleBeforeLoad","Ace","handleOnLoad","require","init","snippetManager","register","parseSnippetFile","JSON","stringify","setUndoManager","cursorPos","moveCursorTo","renderer","scrollCursorIntoView","render","codeEditorProps","aceEditorProps","aceOptions","partProps","aceProps","customButtonsDict","menudict","theme","editorTheme","defaultTheme","base","themeProp","border","outline","top","left","stroke","primaryColor","StyledCodeEditor","div","borderRadius","overflow","button","opacity","transform","transition","StyledDiv","StyledButton","lineHeight","display","alignItems","justifyContent","height","zIndex","background","svg","StyledPrimaryButton","creatIcon","CustomIcon","CopyIcon","PlayIcon","Object","keys","index","includes","menuProps","groups","group","styleProps","buttons","componentDidMount","componentDidUpdate"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport styled from \"styled-components\"\nimport React, { ReactNode, createRef } from \"react\"\nimport * as Icons from \"react-feather\"\nimport AceEditor from \"react-ace\";\nimport ace, { UndoManager } from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-streamlit_dark\";\nimport \"ace-builds/src-noconflict/theme-streamlit_light\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\"\nimport { IAceEditor } from \"react-ace/lib/types\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\ninterface State {\n  code: string\n  lang: string\n  isFocused: boolean\n  undoManager: object\n  cursorPosition: object\n}\n\ninterface customButton {\n  name: string,\n  feather: string,\n  commands?: any[],\n  response?: string,\n  position?: object\n}\n\ninterface buttonGroup {\n  name: string,\n  styleProps?: object,\n  buttons: customButton[]\n}\n\ninterface customButtonSets {\n  regular?: customButton[],\n  primary?: customButton[]\n}\n\ninterface menu {\n  menuProps?: object,\n  groups?: buttonGroup[]\n}\n\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15,15,0,0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width:\"auto\",\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CodeEditor extends StreamlitComponentBase<State> {\n  private defaultUndoManager = new UndoManager();\n  public state = {code: this.props.args['code'], lang: this.props.args['lang'], isFocused: false, cursorPosition: {row: 0, column: 1}, undoManager: this.defaultUndoManager}\n\n  private aceEditor = createRef<AceEditor>();\n\n  private customButtons: customButtonSets = { regular: [{\n                              name: \"shortcuts\",\n                              feather: \"Type\",\n                              commands: [\"showKeyboardShortcuts\"],\n                              response: \"\",\n                              position: {bottom: \"18rem\", right: \"0.3rem\"}\n                            },\n                            {\n                              name: \"removenewlines\",\n                              feather: \"Minimize2\",\n                              commands: [\"selectall\", \"toggleSplitSelectionIntoLines\",\"gotolinestart\",\"gotolinestart\", \"backspace\"],\n                              response: \"\",\n                              position: {bottom: \"15rem\", right: \"0.3rem\"}\n                            },\n                            {\n                              name: \"save\",\n                              feather: \"Save\",\n                              commands: [\"save-state\"],\n                              response: \"saved\",\n                              position: {bottom: \"12rem\", right: \"0.3rem\"}\n                            }],\n                            primary: [{\n                              name: \"submit\",\n                              feather: \"Play\",\n                              commands: [\"submit\"],\n                              response: \"\",\n                              position: {bottom: \"6px\", right: \"0.3rem\"}\n                            },{\n                              name: \"console\",\n                              feather: \"Terminal\",\n                              commands: [\"openCommandPallete\"],\n                              response: \"\",\n                              position: {bottom: \"3.15rem\", right: \"0.3rem\"}\n                            }]\n                          };\n\n  // commands is array of key bindings.\n  private commands = [{   \n                      name: 'submit', //name for the key binding.\n                      bindKey: {win: 'Ctrl-Enter', mac: 'Command-Enter'}, //key combination used for the command.\n                      exec: (editor: ace.Ace.Editor) => {\n                         console.log(\"submit keys pressed\")\n                      \n                         // IMPORTANT: The function `setState()` is required to make sure component state is saved before submit.\n                         //            Otherwise changes to the editor and its contents will be lost.\n                         this.setState({code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager()}, () => {Streamlit.setComponentValue({ type: \"submit\", code: editor.getValue()});}); \n                        }\n                      },{\n                      name: 'save-state',\n                      bindKey: {win: 'Ctrl-Alt-S', mac: 'Command-Alt-S'},\n                      exec: (editor: ace.Ace.Editor) => {\n                         console.log(\"save state keys pressed\")\n                         \n                         this.setState({code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager(), lang: this.state.lang, isFocused: this.state.isFocused});\n                        }\n                      },{\n                        name: 'copyAll',\n                        exec: (editor: ace.Ace.Editor) => {\n                           console.log(\"copyAll&&&&&&&&&&&\")\n                            this.unsecureCopyTextToClipboard(editor.getValue());  \n                          }\n                        }];\n\n  private execute = (command: string, args: any = \"\") => {\n    const editor = this.aceEditor.current?.editor;\n    if (editor){\n      if (!args){\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\"){\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)){\n        var containsNumsStr = true;\n        args.values.array.forEach((element: any) => {\n            containsNumsStr = (typeof element === \"string\" || typeof element === \"number\")? containsNumsStr : false;\n        });\n        if (args.values.length < 4 && containsNumsStr){\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  private executeAll = (commands: any[], sendResponse = \"\") => {\n    commands.forEach(command => {\n      if (Array.isArray(command)){\n        typeof command[0] === \"string\"? this.execute(command[0], command[1]) : console.warn(\"improper command format!\");\n      } else if (typeof command === \"string\"){\n        this.execute(command);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n\n    if(sendResponse){\n      this.respond(sendResponse);\n    }\n  }\n\n  public respond = (responseType = \"submit\") => {\n    console.log(\"respond called:\" + responseType);\n    this.setState(this.state, () => {Streamlit.setComponentValue({ type: responseType, code: this.state.code});});\n  }\n\n  /**\n   * This method for copying to clipboard uses the \n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n   * which makes use of the asynchronous clipboard read and write methods \n   * and requires that the user grant the web site or app permission to\n   * access the clipboard. The latter can be an issue for streamlit because\n   * it uses http instead of https. \n   * */\n  public copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(this.state.code);\n      console.log(this.state.code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      this.unsecureCopyToClipboard();\n    }\n  }\n\n  /**\n   * This method for copying to clipboard uses .execCommand method\n   * which is depreciated but still supported by most browsers. This\n   * is the same approach for copying that Streamlit's built in CodeBlock\n   * component uses.\n   **/\n  private unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = this.aceEditor.current? this.aceEditor.current.editor.getValue() : this.state.code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  private unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * This function takes as input either a snippetText string that is expected\n   * to be already formatted like the text in a SnippetFile or a dictionary or \n   * and array of dictionaries. For the first case, it just returns the input.\n   * For the second and third case, a (SnippetFile format) string is constructed\n   * from the dict(s) and returned. Learn more about snippets {@link  here}\n   * @param snippets snippets to be converted to a single snippetText string\n   * @returns {string} snippetText\n   */\n  private createSnippets = (snippets: string | object | [object]) : string => {\n    return( typeof snippets === \"string\" ? snippets : (Array.isArray(snippets) ? snippets : [snippets]).map(({ name, code }) =>\n        ([\n            'snippet ' + name,\n            code.split('\\n')\n                .map((c: string) => '\\t' + c)\n                .join('\\n'),\n        ].join('\\n'))\n    ).join('\\n'))\n  }\n\n  /** \n   * IMPORTANT!! This function calls CodeEditor's `setState` function whenever user clicks anywhere\n   * outside the CodeEditor component but not inside. The reason for this is because onBlur events inside CodeEditor\n   * can result in changes you want to keep, so calling setState before those changes are \n   * processed leads to the changes being lost.\n   * @param editor the editor that lost the focus\n   * @param event the blur event\n   * */\n  private handleOnBlur = (event: any, editor: IAceEditor) => {\n    console.log(\"~~onBlur~~\");\n    \n    // when user clicks or puts a focus on anything outside the editor, both the relatedTarget and sourceCapabilities\n    // properties of the event object are `Undefined`. This could be due to the fact that the CodeEditor is in an iframe\n    // and therefore cant get the info on whatever is receiving the focus thats outside the iframe.\n    console.log(event)\n    if(event.relatedTarget || event.sourceCapabilities){\n      this.state = {code: editor?.getValue() || this.state.code, cursorPosition: editor?.getCursorPosition() || this.state.cursorPosition, undoManager: editor?.getSession().getUndoManager() || this.state.undoManager, lang: this.state.lang, isFocused: this.state.isFocused}\n    } else {\n      this.setState({code: editor?.getValue() || this.state.code, cursorPosition: editor?.getCursorPosition() || this.state.cursorPosition, undoManager: editor?.getSession().getUndoManager() || this.state.undoManager, lang: this.state.lang, isFocused: this.state.isFocused});\n    }\n  }\n\n  private handleBeforeLoad = (Ace: typeof ace) => {\n    console.log(\"~before load~\");\n    console.log(this.state);\n    //console.log(ace);\n    console.log(\"~~~~~~~~~~~~~\")\n  }\n\n  private handleOnLoad = (editor: ace.Ace.Editor) => {\n    console.log(\"~on load~\");\n\n    ace.require(\"ace/ext/keybinding_menu\").init(editor);\n    console.log(\"is menu attached? =======>\");\n    console.log(editor);\n    \n    const snippets = this.createSnippets(this.props.args['snippets']);\n    if(snippets){\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      \n      //// The function getMode() returns an Ace.SyntaxId object that\n      //// has no way to get or access its $id variable. So the following\n      //// doesnt work:\n      //const id = editor.session.getMode().$id;\n\n      //// The current workaround used here is to recognize that when the \n      //// AceEditor mode prop is set with a string (ex: mode=\"python\"), it  \n      //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n      //const id = `ace/mode/${this.state.lang}`;\n\n      snippetManager.register(snippetManager.parseSnippetFile(snippets, this.state.lang), this.state.lang)\n      console.log(JSON.stringify(snippets))\n    }\n\n    editor.getSession().setUndoManager(this.state.undoManager);\n\n    const cursorPos = this.state.cursorPosition;\n    console.log(cursorPos);\n    editor.moveCursorTo(cursorPos.row, cursorPos.column);\n    editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n    //editor.resize();\n  }\n\n  //-------------------------------------------------------------------------\n  // RENDER FUNCTION\n  public render = (): ReactNode => {\n    // // Arguments that are passed to the plugin in Python are accessible\n    // // via `this.props.args`. Here, we access the \"name\" arg.\n    \n    const codeEditorProps = this.props.args[\"rootProps\"]\n    const aceEditorProps = {...defaultEditorProps, ...this.props.args['editorProps']};\n    const aceOptions = {...defaultOptions, ...this.props.args['options']}\n    const partProps = {setOptions: aceOptions, editorProps: aceEditorProps}\n    const aceProps = {...defaultProps, ...partProps, ...this.props.args['props']}\n\n    const customButtonsDict = this.props.args['buttons'] as customButtonSets;\n    const menudict = this.props.args[\"menu\"] as menu;\n\n    console.log(\"Render----------------\");\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    console.log(this.state.lang)\n\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    \n    const editorTheme = this.props.args[\"theme\"];\n    const defaultTheme = theme? theme.base : \"dark\";\n    var themeProp = \"streamlit_dark\";\n    switch (editorTheme) {\n      case \"contrast\":\n        themeProp = (defaultTheme === \"dark\")? \"streamlit_light\" : \"streamlit_dark\";\n        break;\n      case \"light\":\n        themeProp = \"streamlit_light\";\n        break;\n      case \"dark\":\n        themeProp = \"streamlit_dark\";\n        break;\n      default:\n        themeProp = (defaultTheme === \"dark\")? \"streamlit_dark\" : \"streamlit_light\";\n        break;\n    }\n\n    console.log(theme?.base);\n\n    style.border = \"none\";\n    style.outline = \"none\";\n    style.top = \"none\";\n    style.bottom = \"none\";\n    style.left = \"none\";\n    style.right = \"none\";\n    style.stroke = theme? theme.primaryColor : \"rgba(250,250,250,1)\";\n\n    const StyledCodeEditor = styled.div(() => ({\n      borderRadius: \"8px\",\n      overflow: \"hidden\",\n      \":hover\": {\n        button: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transition: \"none\",\n        },\n      },\n    }));\n\n    const StyledDiv = styled.div``;\n    \n    const StyledButton = styled.button(({theme}) => ({\n      // center icon\n      lineHeight: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      // copied from full screen button\n      transform: \"scale(0)\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      opacity: 0,\n      position: \"absolute\",\n      top: theme.top,\n      left: theme.left,\n      right: theme.right,\n      bottom: theme.bottom,\n      //color: \"rgba(250,250,250,0.6)\",\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      zIndex: 101,\n      border: \"none\",\n      borderRadius: \"50%\",\n      background: \"none\",\n      \":focus \": {\n        outline: \"none\",\n      },\n      svg: {\n        stroke: themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\",\n      }, \n      \":hover svg\": {\n        stroke: themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\": \"rgb(49, 51, 63)\",\n      },\n    }));\n\n    const StyledPrimaryButton = styled(StyledButton)({\n      \":hover svg\": {\n        stroke: style.stroke,\n      },\n    });\n\n    type iconKey = keyof typeof Icons;\n    const creatIcon = (name: iconKey) => {\n      const CustomIcon = Icons[name];\n      return <CustomIcon size=\"16\" />;\n    }\n\n    const CopyIcon = Icons['Copy'];\n    const PlayIcon = Icons['Play'];\n    // const RemoveNewLinesIcon = Icons[\"Minimize2\"];\n    console.log(\"Menu\" in Object.keys(Icons));\n\n    return (\n      <StyledCodeEditor theme={codeEditorProps}>\n        <AceEditor\n          ref={this.aceEditor}\n          name=\"UNIQUE_ID_OF_DIV\"\n          mode={this.state.lang}\n          theme={themeProp}\n          keyboardHandler={this.props.args[\"shortcuts\"]}\n          value={this.state.code}\n          onBeforeLoad={this.handleBeforeLoad}\n          onLoad={this.handleOnLoad}\n          onBlur={this.handleOnBlur}\n          commands={this.commands}\n          {...aceProps}\n        />\n        <StyledButton \n          key=\"copy-default\" \n          theme={{top: \"8px\", right: \"0.3rem\", left: style.left, bottom: style.bottom}}\n          onClick={this.copyToClipboard} >\n           <CopyIcon size=\"16\" />\n        </StyledButton>       \n        {customButtonsDict?customButtonsDict.regular?customButtonsDict.regular.map( (button, index) => (\n          <StyledButton \n            key={button.name? button.name : \"regButton\" + index} \n            theme={button.position? button.position : {}} \n            onClick={(button.commands || button.response)? () => this.executeAll(button.commands?button.commands:[], button.response) : this.copyToClipboard}>\n              {creatIcon(Object.keys(Icons).includes(button.feather)?button.feather as iconKey: \"Copy\")}\n          </StyledButton>\n         )) : `` : ``}\n        {customButtonsDict?customButtonsDict.primary?customButtonsDict.primary.map( (button, index) => (\n          <StyledPrimaryButton \n            key={button.name? button.name : \"primButton\" + index} \n            theme={button.position? button.position : {}} \n            onClick={(button.commands || button.response)? () => this.executeAll(button.commands?button.commands:[], button.response) : this.copyToClipboard}>\n              {creatIcon(Object.keys(Icons).includes(button.feather)?button.feather as iconKey: \"Copy\")}\n          </StyledPrimaryButton>\n         )) : ``: ``}\n        {!menudict? ``: <StyledDiv key=\"menu\" theme={menudict.menuProps? menudict.menuProps : {}}>\n          {!menudict.groups? `` : menudict.groups.map((group: buttonGroup, index) => (\n            <StyledDiv key={group.name} theme={group.styleProps? group.styleProps : {}}>\n              {group.buttons.map((button: customButton, index)=>(\n                <StyledButton \n                  key={button.name? group.name + \"-\" + button.name : group.name + \"-button\" + index} \n                  theme={button.position? button.position : {}} \n                  onClick={(button.commands || button.response)? () => this.executeAll(button.commands?button.commands:[], button.response) : this.copyToClipboard}>\n                    {creatIcon(Object.keys(Icons).includes(button.feather)?button.feather as iconKey: \"Copy\")}\n              </StyledButton>\n              ))}\n            </StyledDiv>\n          ))}\n        </StyledDiv>\n        }\n      </StyledCodeEditor>\n    )\n  }\n  //END OF RENDER FUNCTION\n  //----------------------------------------------------------------------\n\n  public componentDidMount(): void {\n    console.log(\"===================\");\n    console.log(\" componentDidMount \");\n    console.log(this.state)\n    ////The following sets the editor up after this custom component mounts\n    //this.setState({code: this.props.args[\"code\"], lang: this.props.args[\"lang\"]});\n    super.componentDidMount();\n    console.log(\"===================\")\n  }\n  \n  public componentDidUpdate(): void {\n    console.log(\"--------------------\");\n    console.log(\" componentDidUpdate \")\n    console.log(this.state);\n    super.componentDidUpdate();\n    console.log(\"--------------------\");\n  }\n}\n  \n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default withStreamlitConnection(CodeEditor)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
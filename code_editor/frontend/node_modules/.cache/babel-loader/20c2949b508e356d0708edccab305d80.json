{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _get from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _regeneratorRuntime from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapAsyncGenerator from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(readAllSync);\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ITERATOR_DONE, ReadableInterop } from '../io/interfaces';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nexport var RecordBatchReader = /*#__PURE__*/function (_ReadableInterop, _Symbol$iterator, _Symbol$asyncIterator) {\n  _inherits(RecordBatchReader, _ReadableInterop);\n  var _super = _createSuper(RecordBatchReader);\n  function RecordBatchReader(impl) {\n    var _this2;\n    _classCallCheck(this, RecordBatchReader);\n    _this2 = _super.call(this);\n    _this2._impl = impl;\n    return _this2;\n  }\n  _createClass(RecordBatchReader, [{\n    key: \"closed\",\n    get: function get() {\n      return this._impl.closed;\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._impl.schema;\n    }\n  }, {\n    key: \"autoDestroy\",\n    get: function get() {\n      return this._impl.autoDestroy;\n    }\n  }, {\n    key: \"dictionaries\",\n    get: function get() {\n      return this._impl.dictionaries;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._impl.numDictionaries;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._impl.numRecordBatches;\n    }\n  }, {\n    key: \"footer\",\n    get: function get() {\n      return this._impl.isFile() ? this._impl.footer : null;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return this._impl.isSync();\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return this._impl.isAsync();\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return this._impl.isFile();\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return this._impl.isStream();\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return this._impl.next();\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this._impl.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this._impl.return(value);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this._impl.cancel();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(schema) {\n      this._impl.reset(schema);\n      this._DOMStream = undefined;\n      this._nodeStream = undefined;\n      return this;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      var _this3 = this;\n      var opening = this._impl.open(options);\n      return isPromise(opening) ? opening.then(function () {\n        return _this3;\n      }) : this;\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this._impl[Symbol.iterator]();\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this._impl[Symbol.asyncIterator]();\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream() {\n      var _this4 = this;\n      return streamAdapters.toDOMStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {\n        return _this4;\n      }) : _defineProperty({}, Symbol.asyncIterator, function () {\n        return _this4;\n      }));\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream() {\n      var _this5 = this;\n      return streamAdapters.toNodeStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {\n        return _this5;\n      }) : _defineProperty({}, Symbol.asyncIterator, function () {\n        return _this5;\n      }), {\n        objectMode: true\n      });\n    }\n    /** @nocollapse */\n    // @ts-ignore\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(\n    // @ts-ignore\n    writableStrategy,\n    // @ts-ignore\n    readableStrategy) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(source) {\n      if (source instanceof RecordBatchReader) {\n        return source;\n      } else if (isArrowJSON(source)) {\n        return fromArrowJSON(source);\n      } else if (isFileHandle(source)) {\n        return fromFileHandle(source);\n      } else if (isPromise(source)) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = RecordBatchReader;\n                _context.next = 3;\n                return source;\n              case 3:\n                _context.t1 = _context.sent;\n                _context.next = 6;\n                return _context.t0.from.call(_context.t0, _context.t1);\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }))();\n      } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n        return fromAsyncByteStream(new AsyncByteStream(source));\n      }\n      return fromByteStream(new ByteStream(source));\n    }\n    /** @nocollapse */\n  }, {\n    key: \"readAll\",\n    value: function readAll(source) {\n      if (source instanceof RecordBatchReader) {\n        return source.isSync() ? readAllSync(source) : readAllAsync(source);\n      } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n        return readAllSync(source);\n      }\n      return readAllAsync(source);\n    }\n  }]);\n  return RecordBatchReader;\n}(ReadableInterop, Symbol.iterator, Symbol.asyncIterator);\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nexport var RecordBatchStreamReader = /*#__PURE__*/function (_RecordBatchReader, _Symbol$iterator2, _Symbol$asyncIterator2) {\n  _inherits(RecordBatchStreamReader, _RecordBatchReader);\n  var _super2 = _createSuper(RecordBatchStreamReader);\n  function RecordBatchStreamReader(_impl) {\n    var _this6;\n    _classCallCheck(this, RecordBatchStreamReader);\n    _this6 = _super2.call(this, _impl);\n    _this6._impl = _impl;\n    return _this6;\n  }\n  _createClass(RecordBatchStreamReader, [{\n    key: _Symbol$iterator2,\n    value: function value() {\n      return this._impl[Symbol.iterator]();\n    }\n  }, {\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this[Symbol.iterator]()), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  }]);\n  return RecordBatchStreamReader;\n}(RecordBatchReader, Symbol.iterator, Symbol.asyncIterator);\n/** @ignore */\nexport var AsyncRecordBatchStreamReader = /*#__PURE__*/function (_RecordBatchReader2, _Symbol$iterator3, _Symbol$asyncIterator3) {\n  _inherits(AsyncRecordBatchStreamReader, _RecordBatchReader2);\n  var _super3 = _createSuper(AsyncRecordBatchStreamReader);\n  function AsyncRecordBatchStreamReader(_impl) {\n    var _this7;\n    _classCallCheck(this, AsyncRecordBatchStreamReader);\n    _this7 = _super3.call(this, _impl);\n    _this7._impl = _impl;\n    return _this7;\n  }\n  _createClass(AsyncRecordBatchStreamReader, [{\n    key: _Symbol$iterator3,\n    value: function value() {\n      throw new Error(\"AsyncRecordBatchStreamReader is not Iterable\");\n    }\n  }, {\n    key: _Symbol$asyncIterator3,\n    value: function value() {\n      return this._impl[Symbol.asyncIterator]();\n    }\n  }]);\n  return AsyncRecordBatchStreamReader;\n}(RecordBatchReader, Symbol.iterator, Symbol.asyncIterator);\n/** @ignore */\nexport var RecordBatchFileReader = /*#__PURE__*/function (_RecordBatchStreamRea) {\n  _inherits(RecordBatchFileReader, _RecordBatchStreamRea);\n  var _super4 = _createSuper(RecordBatchFileReader);\n  function RecordBatchFileReader(_impl) {\n    var _this8;\n    _classCallCheck(this, RecordBatchFileReader);\n    _this8 = _super4.call(this, _impl);\n    _this8._impl = _impl;\n    return _this8;\n  }\n  return _createClass(RecordBatchFileReader);\n}(RecordBatchStreamReader);\n/** @ignore */\nexport var AsyncRecordBatchFileReader = /*#__PURE__*/function (_AsyncRecordBatchStre) {\n  _inherits(AsyncRecordBatchFileReader, _AsyncRecordBatchStre);\n  var _super5 = _createSuper(AsyncRecordBatchFileReader);\n  function AsyncRecordBatchFileReader(_impl) {\n    var _this9;\n    _classCallCheck(this, AsyncRecordBatchFileReader);\n    _this9 = _super5.call(this, _impl);\n    _this9._impl = _impl;\n    return _this9;\n  }\n  return _createClass(AsyncRecordBatchFileReader);\n}(AsyncRecordBatchStreamReader);\n/** @ignore */\nvar RecordBatchReaderImpl = /*#__PURE__*/function () {\n  function RecordBatchReaderImpl() {\n    var dictionaries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n    _classCallCheck(this, RecordBatchReaderImpl);\n    this.closed = false;\n    this.autoDestroy = true;\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.dictionaries = dictionaries;\n  }\n  _createClass(RecordBatchReaderImpl, [{\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._dictionaryIndex;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._recordBatchIndex;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return false;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return false;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return false;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return false;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(schema) {\n      this._dictionaryIndex = 0;\n      this._recordBatchIndex = 0;\n      this.schema = schema;\n      this.dictionaries = new Map();\n      return this;\n    }\n  }, {\n    key: \"_loadRecordBatch\",\n    value: function _loadRecordBatch(header, body) {\n      return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n  }, {\n    key: \"_loadDictionaryBatch\",\n    value: function _loadDictionaryBatch(header, body) {\n      var id = header.id,\n        isDelta = header.isDelta,\n        data = header.data;\n      var dictionaries = this.dictionaries,\n        schema = this.schema;\n      var dictionary = dictionaries.get(id);\n      if (isDelta || !dictionary) {\n        var type = schema.dictionaries.get(id);\n        return dictionary && isDelta ? dictionary.concat(Vector.new(this._loadVectors(data, body, [type])[0])) : Vector.new(this._loadVectors(data, body, [type])[0]);\n      }\n      return dictionary;\n    }\n  }, {\n    key: \"_loadVectors\",\n    value: function _loadVectors(header, body, types) {\n      return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n  }]);\n  return RecordBatchReaderImpl;\n}();\n/** @ignore */\nvar RecordBatchStreamReaderImpl = /*#__PURE__*/function (_RecordBatchReaderImp, _Symbol$iterator4) {\n  _inherits(RecordBatchStreamReaderImpl, _RecordBatchReaderImp);\n  var _super6 = _createSuper(RecordBatchStreamReaderImpl);\n  function RecordBatchStreamReaderImpl(source, dictionaries) {\n    var _this10;\n    _classCallCheck(this, RecordBatchStreamReaderImpl);\n    _this10 = _super6.call(this, dictionaries);\n    _this10._reader = !isArrowJSON(source) ? new MessageReader(_this10._handle = source) : new JSONMessageReader(_this10._handle = source);\n    return _this10;\n  }\n  _createClass(RecordBatchStreamReaderImpl, [{\n    key: \"isSync\",\n    value: function isSync() {\n      return true;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return true;\n    }\n  }, {\n    key: _Symbol$iterator4,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this.closed && (this.closed = true)) {\n        this.reset()._reader.return();\n        this._reader = null;\n        this.dictionaries = null;\n      }\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      if (!this.closed) {\n        this.autoDestroy = shouldAutoDestroy(this, options);\n        if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n          this.cancel();\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      if (!this.closed && this.autoDestroy && (this.closed = true)) {\n        return this.reset()._reader.throw(value);\n      }\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      if (!this.closed && this.autoDestroy && (this.closed = true)) {\n        return this.reset()._reader.return(value);\n      }\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.closed) {\n        return ITERATOR_DONE;\n      }\n      var message,\n        reader = this._reader;\n      while (message = this._readNextMessageAndValidate()) {\n        if (message.isSchema()) {\n          this.reset(message.header());\n        } else if (message.isRecordBatch()) {\n          this._recordBatchIndex++;\n          var header = message.header();\n          var buffer = reader.readMessageBody(message.bodyLength);\n          var recordBatch = this._loadRecordBatch(header, buffer);\n          return {\n            done: false,\n            value: recordBatch\n          };\n        } else if (message.isDictionaryBatch()) {\n          this._dictionaryIndex++;\n          var _header = message.header();\n          var _buffer = reader.readMessageBody(message.bodyLength);\n          var vector = this._loadDictionaryBatch(_header, _buffer);\n          this.dictionaries.set(_header.id, vector);\n        }\n      }\n      if (this.schema && this._recordBatchIndex === 0) {\n        this._recordBatchIndex++;\n        return {\n          done: false,\n          value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n        };\n      }\n      return this.return();\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      return this._reader.readMessage(type);\n    }\n  }]);\n  return RecordBatchStreamReaderImpl;\n}(RecordBatchReaderImpl, Symbol.iterator);\n/** @ignore */\nvar AsyncRecordBatchStreamReaderImpl = /*#__PURE__*/function (_RecordBatchReaderImp2, _Symbol$asyncIterator4) {\n  _inherits(AsyncRecordBatchStreamReaderImpl, _RecordBatchReaderImp2);\n  var _super7 = _createSuper(AsyncRecordBatchStreamReaderImpl);\n  function AsyncRecordBatchStreamReaderImpl(source, dictionaries) {\n    var _this11;\n    _classCallCheck(this, AsyncRecordBatchStreamReaderImpl);\n    _this11 = _super7.call(this, dictionaries);\n    _this11._reader = new AsyncMessageReader(_this11._handle = source);\n    return _this11;\n  }\n  _createClass(AsyncRecordBatchStreamReaderImpl, [{\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return true;\n    }\n  }, {\n    key: _Symbol$asyncIterator4,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(!this.closed && (this.closed = true))) {\n                _context3.next = 5;\n                break;\n              }\n              _context3.next = 3;\n              return this.reset()._reader.return();\n            case 3:\n              this._reader = null;\n              this.dictionaries = null;\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.closed) {\n                _context4.next = 10;\n                break;\n              }\n              this.autoDestroy = shouldAutoDestroy(this, options);\n              _context4.t0 = this.schema;\n              if (_context4.t0) {\n                _context4.next = 7;\n                break;\n              }\n              _context4.next = 6;\n              return this._reader.readSchema();\n            case 6:\n              _context4.t0 = this.schema = _context4.sent;\n            case 7:\n              if (_context4.t0) {\n                _context4.next = 10;\n                break;\n              }\n              _context4.next = 10;\n              return this.cancel();\n            case 10:\n              return _context4.abrupt(\"return\", this);\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function open(_x2) {\n        return _open.apply(this, arguments);\n      }\n      return open;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(value) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(!this.closed && this.autoDestroy && (this.closed = true))) {\n                _context5.next = 4;\n                break;\n              }\n              _context5.next = 3;\n              return this.reset()._reader.throw(value);\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 4:\n              return _context5.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _throw(_x3) {\n        return _throw2.apply(this, arguments);\n      }\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(value) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!this.closed && this.autoDestroy && (this.closed = true))) {\n                _context6.next = 4;\n                break;\n              }\n              _context6.next = 3;\n              return this.reset()._reader.return(value);\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 4:\n              return _context6.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _return(_x4) {\n        return _return2.apply(this, arguments);\n      }\n      return _return;\n    }()\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var message, reader, header, buffer, recordBatch, _header2, _buffer2, vector;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!this.closed) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\", ITERATOR_DONE);\n            case 2:\n              reader = this._reader;\n            case 3:\n              _context7.next = 5;\n              return this._readNextMessageAndValidate();\n            case 5:\n              if (!(message = _context7.sent)) {\n                _context7.next = 31;\n                break;\n              }\n              if (!message.isSchema()) {\n                _context7.next = 11;\n                break;\n              }\n              _context7.next = 9;\n              return this.reset(message.header());\n            case 9:\n              _context7.next = 29;\n              break;\n            case 11:\n              if (!message.isRecordBatch()) {\n                _context7.next = 21;\n                break;\n              }\n              this._recordBatchIndex++;\n              header = message.header();\n              _context7.next = 16;\n              return reader.readMessageBody(message.bodyLength);\n            case 16:\n              buffer = _context7.sent;\n              recordBatch = this._loadRecordBatch(header, buffer);\n              return _context7.abrupt(\"return\", {\n                done: false,\n                value: recordBatch\n              });\n            case 21:\n              if (!message.isDictionaryBatch()) {\n                _context7.next = 29;\n                break;\n              }\n              this._dictionaryIndex++;\n              _header2 = message.header();\n              _context7.next = 26;\n              return reader.readMessageBody(message.bodyLength);\n            case 26:\n              _buffer2 = _context7.sent;\n              vector = this._loadDictionaryBatch(_header2, _buffer2);\n              this.dictionaries.set(_header2.id, vector);\n            case 29:\n              _context7.next = 3;\n              break;\n            case 31:\n              if (!(this.schema && this._recordBatchIndex === 0)) {\n                _context7.next = 34;\n                break;\n              }\n              this._recordBatchIndex++;\n              return _context7.abrupt(\"return\", {\n                done: false,\n                value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n              });\n            case 34:\n              _context7.next = 36;\n              return this.return();\n            case 36:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 37:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function () {\n      var _readNextMessageAndValidate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(type) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._reader.readMessage(type);\n            case 2:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function _readNextMessageAndValidate(_x5) {\n        return _readNextMessageAndValidate2.apply(this, arguments);\n      }\n      return _readNextMessageAndValidate;\n    }()\n  }]);\n  return AsyncRecordBatchStreamReaderImpl;\n}(RecordBatchReaderImpl, Symbol.asyncIterator);\n/** @ignore */\nvar RecordBatchFileReaderImpl = /*#__PURE__*/function (_RecordBatchStreamRea2) {\n  _inherits(RecordBatchFileReaderImpl, _RecordBatchStreamRea2);\n  var _super8 = _createSuper(RecordBatchFileReaderImpl);\n  function RecordBatchFileReaderImpl(source, dictionaries) {\n    _classCallCheck(this, RecordBatchFileReaderImpl);\n    return _super8.call(this, source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n  }\n  _createClass(RecordBatchFileReaderImpl, [{\n    key: \"footer\",\n    get: function get() {\n      return this._footer;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer ? this._footer.numDictionaries : 0;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer ? this._footer.numRecordBatches : 0;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return true;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return true;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      if (!this.closed && !this._footer) {\n        this.schema = (this._footer = this._readFooter()).schema;\n        var _iterator = _createForOfIteratorHelper(this._footer.dictionaryBatches()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var block = _step.value;\n            block && this._readDictionaryBatch(this._dictionaryIndex++);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return _get(_getPrototypeOf(RecordBatchFileReaderImpl.prototype), \"open\", this).call(this, options);\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      if (this.closed) {\n        return null;\n      }\n      if (!this._footer) {\n        this.open();\n      }\n      var block = this._footer && this._footer.getRecordBatch(index);\n      if (block && this._handle.seek(block.offset)) {\n        var message = this._reader.readMessage(MessageHeader.RecordBatch);\n        if (message && message.isRecordBatch()) {\n          var header = message.header();\n          var buffer = this._reader.readMessageBody(message.bodyLength);\n          var recordBatch = this._loadRecordBatch(header, buffer);\n          return recordBatch;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"_readDictionaryBatch\",\n    value: function _readDictionaryBatch(index) {\n      var block = this._footer && this._footer.getDictionaryBatch(index);\n      if (block && this._handle.seek(block.offset)) {\n        var message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n        if (message && message.isDictionaryBatch()) {\n          var header = message.header();\n          var buffer = this._reader.readMessageBody(message.bodyLength);\n          var vector = this._loadDictionaryBatch(header, buffer);\n          this.dictionaries.set(header.id, vector);\n        }\n      }\n    }\n  }, {\n    key: \"_readFooter\",\n    value: function _readFooter() {\n      var _handle = this._handle;\n      var offset = _handle.size - magicAndPadding;\n      var length = _handle.readInt32(offset);\n      var buffer = _handle.readAt(offset - length, length);\n      return Footer.decode(buffer);\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      if (!this._footer) {\n        this.open();\n      }\n      if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n        var block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n        if (block && this._handle.seek(block.offset)) {\n          return this._reader.readMessage(type);\n        }\n      }\n      return null;\n    }\n  }]);\n  return RecordBatchFileReaderImpl;\n}(RecordBatchStreamReaderImpl);\n/** @ignore */\nvar AsyncRecordBatchFileReaderImpl = /*#__PURE__*/function (_AsyncRecordBatchStre2) {\n  _inherits(AsyncRecordBatchFileReaderImpl, _AsyncRecordBatchStre2);\n  var _super9 = _createSuper(AsyncRecordBatchFileReaderImpl);\n  function AsyncRecordBatchFileReaderImpl(source) {\n    _classCallCheck(this, AsyncRecordBatchFileReaderImpl);\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n    var byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n    var dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n    return _super9.call(this, source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n  }\n  _createClass(AsyncRecordBatchFileReaderImpl, [{\n    key: \"footer\",\n    get: function get() {\n      return this._footer;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer ? this._footer.numDictionaries : 0;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer ? this._footer.numRecordBatches : 0;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return true;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(options) {\n        var _iterator2, _step2, block;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(!this.closed && !this._footer)) {\n                _context9.next = 23;\n                break;\n              }\n              _context9.next = 3;\n              return this._readFooter();\n            case 3:\n              this.schema = (this._footer = _context9.sent).schema;\n              _iterator2 = _createForOfIteratorHelper(this._footer.dictionaryBatches());\n              _context9.prev = 5;\n              _iterator2.s();\n            case 7:\n              if ((_step2 = _iterator2.n()).done) {\n                _context9.next = 15;\n                break;\n              }\n              block = _step2.value;\n              _context9.t0 = block;\n              if (!_context9.t0) {\n                _context9.next = 13;\n                break;\n              }\n              _context9.next = 13;\n              return this._readDictionaryBatch(this._dictionaryIndex++);\n            case 13:\n              _context9.next = 7;\n              break;\n            case 15:\n              _context9.next = 20;\n              break;\n            case 17:\n              _context9.prev = 17;\n              _context9.t1 = _context9[\"catch\"](5);\n              _iterator2.e(_context9.t1);\n            case 20:\n              _context9.prev = 20;\n              _iterator2.f();\n              return _context9.finish(20);\n            case 23:\n              _context9.next = 25;\n              return _get(_getPrototypeOf(AsyncRecordBatchFileReaderImpl.prototype), \"open\", this).call(this, options);\n            case 25:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 26:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[5, 17, 20, 23]]);\n      }));\n      function open(_x6) {\n        return _open2.apply(this, arguments);\n      }\n      return open;\n    }()\n  }, {\n    key: \"readRecordBatch\",\n    value: function () {\n      var _readRecordBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(index) {\n        var block, message, header, buffer, recordBatch;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!this.closed) {\n                _context10.next = 2;\n                break;\n              }\n              return _context10.abrupt(\"return\", null);\n            case 2:\n              if (this._footer) {\n                _context10.next = 5;\n                break;\n              }\n              _context10.next = 5;\n              return this.open();\n            case 5:\n              block = this._footer && this._footer.getRecordBatch(index);\n              _context10.t0 = block;\n              if (!_context10.t0) {\n                _context10.next = 11;\n                break;\n              }\n              _context10.next = 10;\n              return this._handle.seek(block.offset);\n            case 10:\n              _context10.t0 = _context10.sent;\n            case 11:\n              if (!_context10.t0) {\n                _context10.next = 22;\n                break;\n              }\n              _context10.next = 14;\n              return this._reader.readMessage(MessageHeader.RecordBatch);\n            case 14:\n              message = _context10.sent;\n              if (!(message && message.isRecordBatch())) {\n                _context10.next = 22;\n                break;\n              }\n              header = message.header();\n              _context10.next = 19;\n              return this._reader.readMessageBody(message.bodyLength);\n            case 19:\n              buffer = _context10.sent;\n              recordBatch = this._loadRecordBatch(header, buffer);\n              return _context10.abrupt(\"return\", recordBatch);\n            case 22:\n              return _context10.abrupt(\"return\", null);\n            case 23:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function readRecordBatch(_x7) {\n        return _readRecordBatch.apply(this, arguments);\n      }\n      return readRecordBatch;\n    }()\n  }, {\n    key: \"_readDictionaryBatch\",\n    value: function () {\n      var _readDictionaryBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(index) {\n        var block, message, header, buffer, vector;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              block = this._footer && this._footer.getDictionaryBatch(index);\n              _context11.t0 = block;\n              if (!_context11.t0) {\n                _context11.next = 6;\n                break;\n              }\n              _context11.next = 5;\n              return this._handle.seek(block.offset);\n            case 5:\n              _context11.t0 = _context11.sent;\n            case 6:\n              if (!_context11.t0) {\n                _context11.next = 17;\n                break;\n              }\n              _context11.next = 9;\n              return this._reader.readMessage(MessageHeader.DictionaryBatch);\n            case 9:\n              message = _context11.sent;\n              if (!(message && message.isDictionaryBatch())) {\n                _context11.next = 17;\n                break;\n              }\n              header = message.header();\n              _context11.next = 14;\n              return this._reader.readMessageBody(message.bodyLength);\n            case 14:\n              buffer = _context11.sent;\n              vector = this._loadDictionaryBatch(header, buffer);\n              this.dictionaries.set(header.id, vector);\n            case 17:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function _readDictionaryBatch(_x8) {\n        return _readDictionaryBatch2.apply(this, arguments);\n      }\n      return _readDictionaryBatch;\n    }()\n  }, {\n    key: \"_readFooter\",\n    value: function () {\n      var _readFooter2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var _handle, offset, length, buffer;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _handle = this._handle;\n              _context12.t0 = _handle._pending;\n              if (!_context12.t0) {\n                _context12.next = 5;\n                break;\n              }\n              _context12.next = 5;\n              return _handle._pending;\n            case 5:\n              offset = _handle.size - magicAndPadding;\n              _context12.next = 8;\n              return _handle.readInt32(offset);\n            case 8:\n              length = _context12.sent;\n              _context12.next = 11;\n              return _handle.readAt(offset - length, length);\n            case 11:\n              buffer = _context12.sent;\n              return _context12.abrupt(\"return\", Footer.decode(buffer));\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function _readFooter() {\n        return _readFooter2.apply(this, arguments);\n      }\n      return _readFooter;\n    }()\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function () {\n      var _readNextMessageAndValidate3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(type) {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              if (this._footer) {\n                _context13.next = 3;\n                break;\n              }\n              _context13.next = 3;\n              return this.open();\n            case 3:\n              if (!(this._footer && this._recordBatchIndex < this.numRecordBatches)) {\n                _context13.next = 14;\n                break;\n              }\n              block = this._footer.getRecordBatch(this._recordBatchIndex);\n              _context13.t0 = block;\n              if (!_context13.t0) {\n                _context13.next = 10;\n                break;\n              }\n              _context13.next = 9;\n              return this._handle.seek(block.offset);\n            case 9:\n              _context13.t0 = _context13.sent;\n            case 10:\n              if (!_context13.t0) {\n                _context13.next = 14;\n                break;\n              }\n              _context13.next = 13;\n              return this._reader.readMessage(type);\n            case 13:\n              return _context13.abrupt(\"return\", _context13.sent);\n            case 14:\n              return _context13.abrupt(\"return\", null);\n            case 15:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function _readNextMessageAndValidate(_x9) {\n        return _readNextMessageAndValidate3.apply(this, arguments);\n      }\n      return _readNextMessageAndValidate;\n    }()\n  }]);\n  return AsyncRecordBatchFileReaderImpl;\n}(AsyncRecordBatchStreamReaderImpl);\n/** @ignore */\nvar RecordBatchJSONReaderImpl = /*#__PURE__*/function (_RecordBatchStreamRea3) {\n  _inherits(RecordBatchJSONReaderImpl, _RecordBatchStreamRea3);\n  var _super10 = _createSuper(RecordBatchJSONReaderImpl);\n  function RecordBatchJSONReaderImpl(source, dictionaries) {\n    _classCallCheck(this, RecordBatchJSONReaderImpl);\n    return _super10.call(this, source, dictionaries);\n  }\n  _createClass(RecordBatchJSONReaderImpl, [{\n    key: \"_loadVectors\",\n    value: function _loadVectors(header, body, types) {\n      return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n  }]);\n  return RecordBatchJSONReaderImpl;\n}(RecordBatchStreamReaderImpl); //\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n  return options && typeof options['autoDestroy'] === 'boolean' ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction readAllSync(source) {\n  var reader;\n  return _regeneratorRuntime().wrap(function readAllSync$(_context14) {\n    while (1) switch (_context14.prev = _context14.next) {\n      case 0:\n        reader = RecordBatchReader.from(source);\n        _context14.prev = 1;\n        if (reader.open({\n          autoDestroy: false\n        }).closed) {\n          _context14.next = 6;\n          break;\n        }\n      case 3:\n        _context14.next = 5;\n        return reader;\n      case 5:\n        if (!reader.reset().open().closed) {\n          _context14.next = 3;\n          break;\n        }\n      case 6:\n        _context14.prev = 6;\n        reader.cancel();\n        return _context14.finish(6);\n      case 9:\n      case \"end\":\n        return _context14.stop();\n    }\n  }, _marked, null, [[1,, 6, 9]]);\n}\n/** @ignore */\nfunction readAllAsync(_x) {\n  return _readAllAsync.apply(this, arguments);\n}\n/** @ignore */\nfunction _readAllAsync() {\n  _readAllAsync = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(source) {\n    var reader;\n    return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return _awaitAsyncGenerator(RecordBatchReader.from(source));\n        case 2:\n          reader = _context15.sent;\n          _context15.prev = 3;\n          _context15.next = 6;\n          return _awaitAsyncGenerator(reader.open({\n            autoDestroy: false\n          }));\n        case 6:\n          if (_context15.sent.closed) {\n            _context15.next = 12;\n            break;\n          }\n        case 7:\n          _context15.next = 9;\n          return reader;\n        case 9:\n          _context15.next = 11;\n          return _awaitAsyncGenerator(reader.reset().open());\n        case 11:\n          if (!_context15.sent.closed) {\n            _context15.next = 7;\n            break;\n          }\n        case 12:\n          _context15.prev = 12;\n          _context15.next = 15;\n          return _awaitAsyncGenerator(reader.cancel());\n        case 15:\n          return _context15.finish(12);\n        case 16:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee14, null, [[3,, 12, 16]]);\n  }));\n  return _readAllAsync.apply(this, arguments);\n}\nfunction fromArrowJSON(source) {\n  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n  var bytes = source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15);\n  })()));\n}\n/** @ignore */\nfunction fromAsyncByteStream(_x10) {\n  return _fromAsyncByteStream.apply(this, arguments);\n}\n/** @ignore */\nfunction _fromAsyncByteStream() {\n  _fromAsyncByteStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(source) {\n    var bytes;\n    return _regeneratorRuntime().wrap(function _callee17$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return source.peek(magicLength + 7 & ~7);\n        case 2:\n          bytes = _context18.sent;\n          if (!(bytes && bytes.byteLength >= 4)) {\n            _context18.next = 18;\n            break;\n          }\n          if (checkForMagicArrowString(bytes)) {\n            _context18.next = 8;\n            break;\n          }\n          _context18.t1 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source));\n          _context18.next = 15;\n          break;\n        case 8:\n          _context18.t2 = RecordBatchFileReader;\n          _context18.t3 = RecordBatchFileReaderImpl;\n          _context18.next = 12;\n          return source.read();\n        case 12:\n          _context18.t4 = _context18.sent;\n          _context18.t5 = new _context18.t3(_context18.t4);\n          _context18.t1 = new _context18.t2(_context18.t5);\n        case 15:\n          _context18.t0 = _context18.t1;\n          _context18.next = 19;\n          break;\n        case 18:\n          _context18.t0 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n            return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _callee16);\n          }))()));\n        case 19:\n          return _context18.abrupt(\"return\", _context18.t0);\n        case 20:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee17);\n  }));\n  return _fromAsyncByteStream.apply(this, arguments);\n}\nfunction fromFileHandle(_x11) {\n  return _fromFileHandle.apply(this, arguments);\n}\nfunction _fromFileHandle() {\n  _fromFileHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(source) {\n    var _yield$source$stat, size, file;\n    return _regeneratorRuntime().wrap(function _callee18$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return source.stat();\n        case 2:\n          _yield$source$stat = _context19.sent;\n          size = _yield$source$stat.size;\n          file = new AsyncRandomAccessFile(source, size);\n          if (!(size >= magicX2AndPadding)) {\n            _context19.next = 12;\n            break;\n          }\n          _context19.t0 = checkForMagicArrowString;\n          _context19.next = 9;\n          return file.readAt(0, magicLength + 7 & ~7);\n        case 9:\n          _context19.t1 = _context19.sent;\n          if (!(0, _context19.t0)(_context19.t1)) {\n            _context19.next = 12;\n            break;\n          }\n          return _context19.abrupt(\"return\", new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file)));\n        case 12:\n          return _context19.abrupt(\"return\", new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file)));\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee18);\n  }));\n  return _fromFileHandle.apply(this, arguments);\n}","map":{"version":3,"mappings":"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","names":["readAllSync","Vector","MessageHeader","Footer","streamAdapters","ByteStream","AsyncByteStream","RandomAccessFile","AsyncRandomAccessFile","VectorLoader","JSONVectorLoader","RecordBatch","_InternalEmptyPlaceholderRecordBatch","ITERATOR_DONE","ReadableInterop","MessageReader","AsyncMessageReader","JSONMessageReader","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","isPromise","isIterable","isAsyncIterable","isIteratorResult","isArrowJSON","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","RecordBatchReader","impl","_impl","closed","schema","autoDestroy","dictionaries","numDictionaries","numRecordBatches","isFile","footer","isSync","isAsync","isStream","next","value","throw","return","cancel","reset","_DOMStream","undefined","_nodeStream","options","opening","open","then","index","readRecordBatch","Symbol","iterator","asyncIterator","toDOMStream","toNodeStream","objectMode","Error","writableStrategy","readableStrategy","source","fromArrowJSON","fromFileHandle","from","fromAsyncByteStream","fromByteStream","readAllAsync","ArrayBuffer","isView","RecordBatchStreamReader","AsyncRecordBatchStreamReader","RecordBatchFileReader","AsyncRecordBatchFileReader","RecordBatchReaderImpl","Map","_dictionaryIndex","_recordBatchIndex","header","body","length","_loadVectors","fields","id","isDelta","data","dictionary","get","type","concat","new","types","nodes","buffers","visitMany","RecordBatchStreamReaderImpl","_reader","_handle","shouldAutoDestroy","readSchema","reader","message","_readNextMessageAndValidate","isSchema","isRecordBatch","buffer","readMessageBody","bodyLength","recordBatch","_loadRecordBatch","done","isDictionaryBatch","vector","_loadDictionaryBatch","set","readMessage","AsyncRecordBatchStreamReaderImpl","RecordBatchFileReaderImpl","_footer","_readFooter","dictionaryBatches","block","_readDictionaryBatch","getRecordBatch","seek","offset","getDictionaryBatch","DictionaryBatch","size","readInt32","readAt","decode","AsyncRecordBatchFileReaderImpl","rest","byteLength","shift","_pending","RecordBatchJSONReaderImpl","self","bytes","peek","read","stat","file"],"sources":["ipc/reader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n"]},"metadata":{},"sourceType":"module"}
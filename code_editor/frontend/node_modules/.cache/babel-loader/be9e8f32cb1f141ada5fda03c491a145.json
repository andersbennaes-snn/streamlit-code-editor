{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/editor.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Editor = _ref => {\n  _s();\n  let {\n    lang,\n    theme,\n    shortcuts,\n    props,\n    snippetString,\n    commands,\n    keybindingString,\n    editorRef,\n    code,\n    onChange\n  } = _ref;\n  console.log(\"|---> (re)rendering editor\");\n  useEffect(() => {\n    console.log(\"---------- editor mounted ----------\");\n    return () => {\n      console.log(\"editor unmounted\");\n    };\n  }, []);\n  useEffect(() => {\n    if (editorRef.current) {\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString);\n      if (keybindings.commands && keybindings.commands.length > 0) {\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach(binding => {\n          if (binding.name && typeof binding.name === \"string\") {\n            var _editorRef$current$ed;\n            if (JSON.stringify((_editorRef$current$ed = editorRef.current.editor.commands.commands[binding.name].bindKey) !== null && _editorRef$current$ed !== void 0 ? _editorRef$current$ed : \"\") !== JSON.stringify(binding.bindkey)) {\n              const newCommand = {\n                ...editorRef.current.editor.commands.commands[binding.name]\n              };\n              newCommand.bindKey = binding.bindkey;\n              editorRef.current.editor.commands.addCommand(newCommand);\n              commands = [...commands, newCommand];\n            }\n          }\n        });\n      }\n      if (keybindings.completer && keybindings.completer.length > 0) {\n        const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform;\n        keybindings.completer.forEach(binding => {\n          if (binding.name && typeof binding.name === \"string\") {\n            var _editorRef$current$ed2;\n            if (JSON.stringify((_editorRef$current$ed2 = editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey) !== null && _editorRef$current$ed2 !== void 0 ? _editorRef$current$ed2 : \"\") !== JSON.stringify(binding.bindkey)) {\n              const newCommand = {\n                ...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]\n              };\n              newCommand.bindKey = binding.bindkey;\n              editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n            }\n          }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString);\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)) {\n        if (snippetsAddRemove[0]) snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang);\n        if (snippetsAddRemove[1]) snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang);\n      }\n    }\n  }, [snippetString, keybindingString]);\n  return /*#__PURE__*/_jsxDEV(AceEditor, {\n    ref: editorRef,\n    name: \"REACT_ACE_EDITOR\",\n    mode: lang,\n    theme: theme,\n    value: code,\n    keyboardHandler: shortcuts,\n    commands: commands,\n    onChange: onChange,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 11\n  }, this);\n};\n_s(Editor, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["useEffect","AceEditor","ace","Editor","lang","theme","shortcuts","props","snippetString","commands","keybindingString","editorRef","code","onChange","console","log","current","require","Autocomplete","for","editor","keybindings","JSON","parse","length","forEach","binding","name","stringify","bindKey","bindkey","newCommand","addCommand","completer","bindkeySelector","keyboardHandler","platform","init","snippetManager","snippets","snippetsLang","snippetsAddRemove","Object","entries","register","parseSnippetFile","unregister"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/editor.tsx"],"sourcesContent":["import { useEffect} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface KeyBinding {\n    bindkey: string | object,\n    name: string\n}\n\nexport interface EditorKeyBindings {\n  commands?: KeyBinding[],\n  completer?: KeyBinding[]\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    commands: object[],\n    keybindingString: string,\n    onChange: (value: string, event?: any) => void \n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, keybindingString, editorRef, code, onChange }: EditorProps ) => {\n\n  console.log(\"|---> (re)rendering editor\");\n  \n  useEffect(() => {\n    console.log(\"---------- editor mounted ----------\");\n    return () => {\n      console.log(\"editor unmounted\");\n    }\n  }, []);\n    \n  useEffect(() => {\n    if(editorRef.current){\n      \n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString) as EditorKeyBindings;\n      if(keybindings.commands && keybindings.commands.length > 0){\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.commands.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.commands.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.commands.addCommand(newCommand);\n                commands= [...commands, newCommand];\n              }\n            }\n   \n        });\n      }\n      if(keybindings.completer && keybindings.completer.length > 0){\n        const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n              }\n            }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString) as object;\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n        if(snippetsAddRemove[0])\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n        \n        if(snippetsAddRemove[1])\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n      }\n    }\n  }, [snippetString, keybindingString]);\n\n  return (\n          <AceEditor\n           ref={editorRef}\n           name=\"REACT_ACE_EDITOR\"\n           mode={lang}\n           theme={theme}\n           value={code}\n           keyboardHandler={shortcuts}\n           commands={commands}\n           onChange={onChange}\n           {...props}/>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}
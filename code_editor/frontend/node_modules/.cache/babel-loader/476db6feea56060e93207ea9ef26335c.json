{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport styled from \"styled-components\";\nimport React from \"react\";\nimport { Play as PlayIcon, Copy as CopyIcon } from \"react-feather\";\nimport AceEditor from \"react-ace\";\nimport ace, { UndoManager } from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-streamlit_dark\";\nimport \"ace-builds/src-noconflict/theme-streamlit_light\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 12,\n  minLines: 12,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\"\n};\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CodeEditor extends StreamlitComponentBase {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.defaultUndoManager = new UndoManager();\n    this.state = {\n      code: this.props.args['code'],\n      lang: this.props.args['lang'],\n      isFocused: false,\n      cursorPosition: {\n        row: 0,\n        column: 1\n      },\n      undoManager: this.defaultUndoManager\n    };\n    this.commands = [{\n      // commands is array of key bindings.\n      name: 'submit',\n      //name for the key binding.\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        console.log(\"submit keys pressed\");\n\n        // IMPORTANT: The function `setState()` is required to make sure component state is saved before submit.\n        //            Otherwise changes to the editor and its contents will be lost.\n        this.setState({\n          code: editor.getValue(),\n          cursorPosition: editor.getCursorPosition(),\n          undoManager: editor.getSession().getUndoManager()\n        }, () => {\n          Streamlit.setComponentValue({\n            type: \"submit\",\n            code: editor.getValue()\n          });\n        });\n      }\n    }, {\n      name: 'save-state',\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        console.log(\"save state keys pressed\");\n        //console.log(typeof(editor));\n        this.setState({\n          code: editor.getValue(),\n          cursorPosition: editor.getCursorPosition(),\n          undoManager: editor.getSession().getUndoManager(),\n          lang: this.state.lang,\n          isFocused: this.state.isFocused\n        });\n      }\n    }, {\n      name: \"showKeyboardShortcuts\",\n      bindKey: {\n        win: \"Ctrl-Alt-h\",\n        mac: \"Command-Alt-h\"\n      },\n      exec: function (editor) {\n        const keyEditor = ace.require(\"ace/ext/keybinding_menu\").Editor;\n        keyEditor.showKeybordShortcuts(editor);\n      }\n    }];\n    this.respond = function () {\n      let responseType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"submit\";\n      console.log(\"respond called\");\n      _this.setState(_this.state, () => {\n        Streamlit.setComponentValue({\n          type: responseType,\n          code: _this.state.code\n        });\n      });\n    };\n    this.copyToClipboard = async () => {\n      try {\n        await navigator.clipboard.writeText(this.state.code);\n        console.log(this.state.code);\n      } catch (err) {\n        console.warn('Failed to copy securely -> reverting to unsecure copy');\n        this.unsecureCopyToClipboard();\n      }\n    };\n    this.unsecureCopyToClipboard = () => {\n      const textField = document.createElement('textarea');\n      textField.value = this.state.code;\n      document.body.appendChild(textField);\n      textField.select();\n      document.execCommand('copy');\n      textField.remove();\n    };\n    this.createSnippets = snippets => {\n      return (Array.isArray(snippets) ? snippets : [snippets]).map(_ref => {\n        let {\n          name,\n          code\n        } = _ref;\n        return ['snippet ' + name, code.split('\\n').map(c => '\\t' + c).join('\\n')].join('\\n');\n      }).join('\\n');\n    };\n    this.handleOnBlur = (event, editor) => {\n      console.log(\"~~onBlur~~\");\n\n      // IMPORTANT!! Calls CodeEditor's `setState` function whenever user clicks anywhere\n      // outside CodeEditor component but not inside. Because onBlur events inside CodeEditor\n      // can result in changes you want to keep, calling setState before those changes are \n      // processed is not wise. \n      console.log(event);\n      if (event.relatedTarget || event.sourceCapabilities) {\n        this.state = {\n          code: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || this.state.code,\n          cursorPosition: (editor === null || editor === void 0 ? void 0 : editor.getCursorPosition()) || this.state.cursorPosition,\n          undoManager: (editor === null || editor === void 0 ? void 0 : editor.getSession().getUndoManager()) || this.state.undoManager,\n          lang: this.state.lang,\n          isFocused: this.state.isFocused\n        };\n      } else {\n        this.setState({\n          code: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || this.state.code,\n          cursorPosition: (editor === null || editor === void 0 ? void 0 : editor.getCursorPosition()) || this.state.cursorPosition,\n          undoManager: (editor === null || editor === void 0 ? void 0 : editor.getSession().getUndoManager()) || this.state.undoManager,\n          lang: this.state.lang,\n          isFocused: this.state.isFocused\n        });\n      }\n    };\n    this.handleBeforeLoad = Ace => {\n      console.log(\"~before load~\");\n      console.log(this.state);\n      //console.log(ace);\n      console.log(\"~~~~~~~~~~~~~\");\n    };\n    this.handleOnLoad = editor => {\n      console.log(\"~on load~\");\n      console.log(\"------editor contents------\");\n      console.log(editor.getValue());\n      console.log(\"---------------------------\");\n      console.log(editor.commands.commands);\n      // console.log(typeof(editor));\n\n      // editor.setOptions({\n      //   enableBasicAutocompletion: true,\n      //   enableSnippets: true,\n      // })\n\n      const snippets = this.createSnippets(this.props.args['snippets']);\n      if (snippets) {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n\n        //// The function getMode() returns an Ace.SyntaxId object that\n        //// has no way to get or access its $id variable. So the following\n        //// doesnt work:\n        //const id = editor.session.getMode().$id;\n\n        //// The current workaround used here is to recognize that when the \n        //// AceEditor mode prop is set with a string (ex: mode=\"python\"), it  \n        //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n        //const id = `ace/mode/${this.state.lang}`;\n\n        // testing\n        // const snippets = this.createSnippets([{ name: 'build', code: 'console.log(\"build\")' },\n        //                                       { name: 'destroy', code: 'console.log(\"destroy\")' },\n        //                                       ]);\n\n        snippetManager.register(snippetManager.parseSnippetFile(snippets, this.state.lang), this.state.lang);\n      }\n      editor.getSession().setUndoManager(this.state.undoManager);\n      const cursorPos = this.state.cursorPosition;\n      console.log(cursorPos);\n      editor.moveCursorTo(cursorPos.row, cursorPos.column);\n      editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n      //editor.renderer.setScrollMargin(15,15,0,0);\n      //editor.resize();\n    };\n    this.render = () => {\n      // // Arguments that are passed to the plugin in Python are accessible\n      // // via `this.props.args`. Here, we access the \"name\" arg.\n      // const code = this.props.args[\"code\"]\n\n      const aceEditorProps = {\n        ...defaultEditorProps,\n        ...this.props.args['editorProps']\n      };\n      const aceOptions = {\n        ...defaultOptions,\n        ...this.props.args['options']\n      };\n      const partProps = {\n        setOptions: aceOptions,\n        editorProps: aceEditorProps\n      };\n      const aceProps = {\n        ...defaultProps,\n        ...partProps,\n        ...this.props.args['props']\n      };\n      console.log(\"Render----------------\");\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      console.log(this.state.lang);\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const editorTheme = this.props.args[\"theme\"];\n      const defaultTheme = theme ? theme.base : \"dark\";\n      var themeProp = \"streamlit_dark\";\n      switch (editorTheme) {\n        case \"contrast\":\n          themeProp = defaultTheme === \"dark\" ? \"streamlit_light\" : \"streamlit_dark\";\n          break;\n        case \"light\":\n          themeProp = \"streamlit_light\";\n          break;\n        case \"dark\":\n          themeProp = \"streamlit_dark\";\n          break;\n        default:\n          themeProp = defaultTheme === \"dark\" ? \"streamlit_dark\" : \"streamlit_light\";\n          break;\n      }\n      console.log(theme === null || theme === void 0 ? void 0 : theme.base);\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      // if (theme) {\n      //   // Use the theme object to style our button border. Alternatively, the\n      //   // theme style is defined in CSS vars.\n      //   style.stroke = theme.primaryColor\n      // }\n      style.border = \"none\";\n      style.outline = \"none\";\n      style.top = \"none\";\n      style.bottom = \"none\";\n      style.left = \"none\";\n      style.right = \"none\";\n      style.stroke = theme ? theme.primaryColor : \"rgba(250,250,250,1)\";\n      const StyledCodeEditor = styled.div(() => ({\n        height: \"5rem\",\n        borderRadius: \"4px\",\n        overflow: \"visible\",\n        \":hover\": {\n          button: {\n            opacity: 1,\n            transform: \"scale(1)\",\n            transition: \"none\"\n          }\n        }\n      }));\n\n      // const StyledIconContainer = styled.div(({theme}) => ({\n      //   position: \"relative\",\n      //   left: \"calc(-2.5rem - 0.5rem)\",\n      //   width: \"calc(100% + 2.5rem + 0.5rem)\",\n      //   display: \"flex\",\n      //   alignItems: \"center\",\n      //   overflow: \"visible\",\n      //   \":hover\": {\n      //     a: {\n      //       opacity: 1,\n      //       transform: \"scale(1)\",\n      //       transition: \"none\",\n      //     },\n      //   },\n      // }))\n\n      const StyledButton = styled.button(_ref2 => {\n        let {\n          theme\n        } = _ref2;\n        return {\n          // center icon\n          lineHeight: 0,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          // copied from full screen button\n          transform: \"scale(0)\",\n          transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n          opacity: 0,\n          position: \"absolute\",\n          top: theme.top,\n          left: theme.left,\n          right: theme.right,\n          bottom: theme.bottom,\n          //color: \"rgba(250,250,250,0.6)\",\n          height: \"2.5rem\",\n          width: \"2.5rem\",\n          zIndex: 101,\n          border: \"none\",\n          borderRadius: \"50%\",\n          background: \"none\",\n          \":focus \": {\n            outline: \"none\"\n          },\n          svg: {\n            stroke: themeProp === \"streamlit_dark\" ? \"rgba(250,250,250,0.6)\" : \"rgba(0,0,0,0.5)\"\n          },\n          \":hover svg\": {\n            stroke: themeProp === \"streamlit_dark\" ? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"\n          }\n        };\n      });\n      const StyledPlayButton = styled(StyledButton)({\n        \":hover svg\": {\n          stroke: style.stroke\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n        children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n          theme: {\n            top: \"8px\",\n            right: \"0.3rem\",\n            left: style.left,\n            bottom: style.bottom\n          },\n          onClick: this.copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(CopyIcon, {\n            size: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(AceEditor, {\n          name: \"UNIQUE_ID_OF_DIV\",\n          mode: this.state.lang,\n          theme: themeProp,\n          keyboardHandler: this.props.args[\"shortcuts\"],\n          value: this.state.code,\n          onBeforeLoad: this.handleBeforeLoad,\n          onLoad: this.handleOnLoad,\n          onBlur: this.handleOnBlur,\n          commands: this.commands,\n          ...aceProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StyledPlayButton, {\n          theme: {\n            bottom: \"6px\",\n            right: \"0.3rem\",\n            left: style.left,\n            top: style.top\n          },\n          onClick: () => this.respond(\"submit\"),\n          children: /*#__PURE__*/_jsxDEV(PlayIcon, {\n            size: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    console.log(\"===================\");\n    console.log(\" componentDidMount \");\n    console.log(this.state);\n    ////The following sets the editor up after this custom component mounts\n    //this.setState({code: this.props.args[\"code\"], lang: this.props.args[\"lang\"]});\n    super.componentDidMount();\n    console.log(\"===================\");\n  }\n  componentDidUpdate() {\n    console.log(\"--------------------\");\n    console.log(\" componentDidUpdate \");\n    console.log(this.state);\n    super.componentDidUpdate();\n    console.log(\"--------------------\");\n  }\n}\n\n//==========================================================================\n// Extra snippets of code\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// /** Click handler for our \"Click Me!\" button. */\n// private onClicked = (): void => {\n//   // Increment state.numClicks, and pass the new value back to\n//   // Streamlit via `Streamlit.setComponentValue`.\n//   this.setState(\n//     prevState => ({ numClicks: prevState.numClicks + 1 }),\n//     () => Streamlit.setComponentValue(this.state.numClicks)\n//   )\n// }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default _c = withStreamlitConnection(CodeEditor);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","styled","React","Play","PlayIcon","Copy","CopyIcon","AceEditor","ace","UndoManager","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","CodeEditor","defaultUndoManager","state","code","props","args","lang","isFocused","cursorPosition","row","column","undoManager","commands","name","bindKey","win","mac","exec","editor","console","log","setState","getValue","getCursorPosition","getSession","getUndoManager","setComponentValue","type","keyEditor","require","Editor","showKeybordShortcuts","respond","responseType","copyToClipboard","navigator","clipboard","writeText","err","warn","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","execCommand","remove","createSnippets","snippets","Array","isArray","map","split","c","join","handleOnBlur","event","relatedTarget","sourceCapabilities","handleBeforeLoad","Ace","handleOnLoad","snippetManager","register","parseSnippetFile","setUndoManager","cursorPos","moveCursorTo","renderer","scrollCursorIntoView","render","aceEditorProps","aceOptions","partProps","aceProps","theme","editorTheme","defaultTheme","base","themeProp","border","outline","top","bottom","left","right","stroke","primaryColor","StyledCodeEditor","div","height","borderRadius","overflow","button","opacity","transform","transition","StyledButton","lineHeight","display","alignItems","justifyContent","position","zIndex","background","svg","StyledPlayButton","componentDidMount","componentDidUpdate"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport styled from \"styled-components\"\nimport React, { ReactNode } from \"react\"\nimport { Play as PlayIcon, Copy as CopyIcon } from \"react-feather\"\nimport AceEditor from \"react-ace\";\nimport ace, { UndoManager } from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-streamlit_dark\";\nimport \"ace-builds/src-noconflict/theme-streamlit_light\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\"\nimport { IAceEditor } from \"react-ace/lib/types\";\n//import \"ace-builds/src-noconflict/ext-keybinding_menu\";\n//import \"ace-builds/src-noconflict/keybinding-vscode\";\n//import { relative } from \"path\";\n//import { Editor, CommandManager } from './streamlit-ace-build/ace';\n\ninterface State {\n  code: string\n  lang: string\n  isFocused: boolean\n  undoManager: object\n  cursorPosition: object\n}\n\nconst defaultOptions = {\n  maxLines: 12,\n  minLines: 12,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15,15,0,0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width:\"auto\",\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CodeEditor extends StreamlitComponentBase<State> {\n  private defaultUndoManager = new UndoManager();\n  public state = {code: this.props.args['code'], lang: this.props.args['lang'], isFocused: false, cursorPosition: {row: 0, column: 1}, undoManager: this.defaultUndoManager}\n\n  private commands = [{   // commands is array of key bindings.\n                        name: 'submit', //name for the key binding.\n                        bindKey: {win: 'Ctrl-Enter', mac: 'Command-Enter'}, //key combination used for the command.\n                        exec: (editor: ace.Ace.Editor) => {\n                           console.log(\"submit keys pressed\")\n                        \n                           // IMPORTANT: The function `setState()` is required to make sure component state is saved before submit.\n                           //            Otherwise changes to the editor and its contents will be lost.\n                           this.setState({code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager()}, () => {Streamlit.setComponentValue({ type: \"submit\", code: editor.getValue()});}); \n                          }\n                        },{\n                        name: 'save-state',\n                        bindKey: {win: 'Ctrl-Alt-S', mac: 'Command-Alt-S'},\n                        exec: (editor: ace.Ace.Editor) => {\n                           console.log(\"save state keys pressed\")\n                           //console.log(typeof(editor));\n                           this.setState({code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager(), lang: this.state.lang, isFocused: this.state.isFocused});\n                          }\n                        },{\n                        name: \"showKeyboardShortcuts\",\n                        bindKey: {win: \"Ctrl-Alt-h\", mac: \"Command-Alt-h\"},\n                        exec: function(editor: ace.Ace.Editor) {\n                            const keyEditor = ace.require(\"ace/ext/keybinding_menu\").Editor;\n                            keyEditor.showKeybordShortcuts(editor);\n                          }\n                        }];\n\n  public respond = (responseType = \"submit\") => {\n    console.log(\"respond called\");\n    this.setState(this.state, () => {Streamlit.setComponentValue({ type: responseType, code: this.state.code});});\n  }\n\n  public copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(this.state.code);\n      console.log(this.state.code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      this.unsecureCopyToClipboard();\n    }\n  }\n\n  private unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = this.state.code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  private createSnippets = (snippets: object | [object]) : string => {\n    return( (Array.isArray(snippets) ? snippets : [snippets]).map(({ name, code }) =>\n        ([\n            'snippet ' + name,\n            code.split('\\n')\n                .map((c: string) => '\\t' + c)\n                .join('\\n'),\n        ].join('\\n'))\n    ).join('\\n'))\n  }\n\n  private handleOnBlur = (event: any, editor: IAceEditor) => {\n    console.log(\"~~onBlur~~\");           \n\n    // IMPORTANT!! Calls CodeEditor's `setState` function whenever user clicks anywhere\n    // outside CodeEditor component but not inside. Because onBlur events inside CodeEditor\n    // can result in changes you want to keep, calling setState before those changes are \n    // processed is not wise. \n    console.log(event)\n    if(event.relatedTarget || event.sourceCapabilities){\n      this.state = {code: editor?.getValue() || this.state.code, cursorPosition: editor?.getCursorPosition() || this.state.cursorPosition, undoManager: editor?.getSession().getUndoManager() || this.state.undoManager, lang: this.state.lang, isFocused: this.state.isFocused}\n    } else {\n      this.setState({code: editor?.getValue() || this.state.code, cursorPosition: editor?.getCursorPosition() || this.state.cursorPosition, undoManager: editor?.getSession().getUndoManager() || this.state.undoManager, lang: this.state.lang, isFocused: this.state.isFocused});\n    }\n  }\n\n  private handleBeforeLoad = (Ace: typeof ace) => {\n    console.log(\"~before load~\");\n    console.log(this.state);\n    //console.log(ace);\n    console.log(\"~~~~~~~~~~~~~\")\n  }\n\n  private handleOnLoad = (editor: ace.Ace.Editor) => {\n    console.log(\"~on load~\");\n    console.log(\"------editor contents------\");\n    console.log(editor.getValue());\n    console.log(\"---------------------------\");\n\n    console.log(editor.commands.commands)\n    // console.log(typeof(editor));\n\n    // editor.setOptions({\n    //   enableBasicAutocompletion: true,\n    //   enableSnippets: true,\n    // })\n    \n    const snippets = this.createSnippets(this.props.args['snippets']);\n    if(snippets){\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      \n      //// The function getMode() returns an Ace.SyntaxId object that\n      //// has no way to get or access its $id variable. So the following\n      //// doesnt work:\n      //const id = editor.session.getMode().$id;\n\n      //// The current workaround used here is to recognize that when the \n      //// AceEditor mode prop is set with a string (ex: mode=\"python\"), it  \n      //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n      //const id = `ace/mode/${this.state.lang}`;\n\n      // testing\n      // const snippets = this.createSnippets([{ name: 'build', code: 'console.log(\"build\")' },\n      //                                       { name: 'destroy', code: 'console.log(\"destroy\")' },\n      //                                       ]);\n        \n      snippetManager.register(snippetManager.parseSnippetFile(snippets, this.state.lang), this.state.lang)\n    }\n\n    editor.getSession().setUndoManager(this.state.undoManager);\n\n    const cursorPos = this.state.cursorPosition;\n    console.log(cursorPos);\n    editor.moveCursorTo(cursorPos.row, cursorPos.column);\n    editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n    //editor.renderer.setScrollMargin(15,15,0,0);\n    //editor.resize();\n  }\n\n\n\n  \n  public render = (): ReactNode => {\n    // // Arguments that are passed to the plugin in Python are accessible\n    // // via `this.props.args`. Here, we access the \"name\" arg.\n    // const code = this.props.args[\"code\"]\n    \n    const aceEditorProps = {...defaultEditorProps, ...this.props.args['editorProps']};\n    const aceOptions = {...defaultOptions, ...this.props.args['options']}\n    const partProps = {setOptions: aceOptions, editorProps: aceEditorProps}\n    const aceProps = {...defaultProps, ...partProps, ...this.props.args['props']}\n\n\n    console.log(\"Render----------------\");\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    console.log(this.state.lang)\n\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    \n    const editorTheme = this.props.args[\"theme\"];\n    const defaultTheme = theme? theme.base : \"dark\";\n    var themeProp = \"streamlit_dark\";\n    switch (editorTheme) {\n      case \"contrast\":\n        themeProp = (defaultTheme === \"dark\")? \"streamlit_light\" : \"streamlit_dark\";        break;\n      case \"light\":\n        themeProp = \"streamlit_light\";\n        break;\n      case \"dark\":\n        themeProp = \"streamlit_dark\"\n        break;\n      default:\n        themeProp = (defaultTheme === \"dark\")? \"streamlit_dark\" : \"streamlit_light\";\n        break;\n    }\n\n    console.log(theme?.base)\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    // if (theme) {\n    //   // Use the theme object to style our button border. Alternatively, the\n    //   // theme style is defined in CSS vars.\n    //   style.stroke = theme.primaryColor\n    // }\n    style.border = \"none\"\n    style.outline = \"none\"\n    style.top = \"none\"\n    style.bottom = \"none\"\n    style.left = \"none\"\n    style.right = \"none\"\n    style.stroke = theme? theme.primaryColor : \"rgba(250,250,250,1)\"\n\n    const StyledCodeEditor = styled.div(() => ({\n      height: \"5rem\",\n      borderRadius: \"4px\",\n      overflow: \"visible\",\n      \":hover\": {\n        button: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transition: \"none\",\n        },\n      },\n    }))\n\n    // const StyledIconContainer = styled.div(({theme}) => ({\n    //   position: \"relative\",\n    //   left: \"calc(-2.5rem - 0.5rem)\",\n    //   width: \"calc(100% + 2.5rem + 0.5rem)\",\n    //   display: \"flex\",\n    //   alignItems: \"center\",\n    //   overflow: \"visible\",\n    //   \":hover\": {\n    //     a: {\n    //       opacity: 1,\n    //       transform: \"scale(1)\",\n    //       transition: \"none\",\n    //     },\n    //   },\n    // }))\n    \n    const StyledButton = styled.button(({theme}) => ({\n      // center icon\n      lineHeight: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      // copied from full screen button\n      transform: \"scale(0)\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      opacity: 0,\n      position: \"absolute\",\n      top: theme.top,\n      left: theme.left,\n      right: theme.right,\n      bottom: theme.bottom,\n      //color: \"rgba(250,250,250,0.6)\",\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      zIndex: 101,\n      border: \"none\",\n      borderRadius: \"50%\",\n      background: \"none\",\n      \":focus \": {\n        outline: \"none\",\n      },\n      svg: {\n        stroke: themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\",\n      }, \n      \":hover svg\": {\n        stroke: themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\": \"rgb(49, 51, 63)\",\n      },\n    }));\n\n    const StyledPlayButton = styled(StyledButton)({\n      \":hover svg\": {\n        stroke: style.stroke,\n      },\n    });\n\n    return (\n      <StyledCodeEditor>\n        <StyledButton theme={{top: \"8px\", right: \"0.3rem\", left: style.left, bottom: style.bottom}} onClick={this.copyToClipboard}>\n          <CopyIcon size=\"16\" />\n        </StyledButton>\n        <AceEditor\n          name=\"UNIQUE_ID_OF_DIV\"\n          mode={this.state.lang}\n          theme={themeProp}\n          keyboardHandler={this.props.args[\"shortcuts\"]}\n          value={this.state.code}\n          onBeforeLoad={this.handleBeforeLoad}\n          onLoad={this.handleOnLoad}\n          onBlur={this.handleOnBlur}\n          commands={this.commands}\n          {...aceProps}\n        />\n        <StyledPlayButton theme={{bottom: \"6px\", right: \"0.3rem\", left: style.left, top: style.top}} onClick={() => this.respond(\"submit\")}>\n          <PlayIcon size=\"16\" />\n        </StyledPlayButton>\n      </StyledCodeEditor>\n    )\n  }\n\n  public componentDidMount(): void {\n    console.log(\"===================\");\n    console.log(\" componentDidMount \");\n    console.log(this.state)\n    ////The following sets the editor up after this custom component mounts\n    //this.setState({code: this.props.args[\"code\"], lang: this.props.args[\"lang\"]});\n    super.componentDidMount();\n    console.log(\"===================\")\n  }\n  \n  public componentDidUpdate(): void {\n    console.log(\"--------------------\");\n    console.log(\" componentDidUpdate \")\n    console.log(this.state);\n    super.componentDidUpdate();\n    console.log(\"--------------------\");\n  }\n}\n\n  //==========================================================================\n  // Extra snippets of code\n  //   /** Blur handler for our \"Click Me!\" button. */\n  //   private _onBlur = (): void => {\n  //     this.setState({ isFocused: false })\n  //   }\n  // }\n  \n    // /** Click handler for our \"Click Me!\" button. */\n    // private onClicked = (): void => {\n    //   // Increment state.numClicks, and pass the new value back to\n    //   // Streamlit via `Streamlit.setComponentValue`.\n    //   this.setState(\n    //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n    //     () => Streamlit.setComponentValue(this.state.numClicks)\n    //   )\n    // }\n  \n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default withStreamlitConnection(CodeEditor)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
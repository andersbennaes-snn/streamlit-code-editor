{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx\",\n  _this = this,\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport React, { useState, createRef, useEffect, useMemo } from \"react\";\nimport * as Icons from \"react-feather\";\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\"\n};\nconst StyledCodeEditor = styled.div`\nborder-radius: 8px;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\n:hover button {\n  opacity: 1;\n  transform: scale(1);\n}\nbutton.always-on {\n  opacity: 1;\n  transform: scale(1);\n  transition: none;\n}\n:hover button svg {\n      opacity: 1;\n      transform: scale(1);\n}\n:hover button.with-icon span {\n  opacity: 1;\n  transform: scale(1);\n}\nbutton.always-on > span {\n  opacity: 1;\n  transform: scale(1);\n  transition: none;\n}\nbutton.always-on > svg {\n  opacity: 1;\n  transform: scale(1);\n  transition: none;\n}\n`;\n_c = StyledCodeEditor;\nconst StyledDiv = styled.div``;\nconst StyledRegSpan = styled.span``;\nconst StyledSpan = styled.span`\n  height: 2.5rem;\n  line-height: 2.5rem;\n  margin: 0px 0.4rem 0.15rem 0.4rem;\n  opacity: 0;\n  transform: scale(0);\n  transition: opacity 300ms 150ms, transform 300ms 150ms;\n`;\n_c2 = StyledSpan;\nconst StyledButton = styled.button`\n  border: none;\n  border-radius: 5px;\n  background: none;\n  height: 2.5rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  transform: scale(0);\n  transition: opacity 20ms 300ms, transform 20ms 300ms;\n  top: ${props => props.style.top || \"\"};\n  left: ${props => props.style.left || \"\"};\n  right: ${props => props.style.right || \"\"};\n  bottom: ${props => props.style.bottom || \"\"};\n  z-index: 101;\n  :focus {\n    outline: none;\n  }\n  span{\n    color: ${props => props.themeProp === \"streamlit_dark\" ? \"rgba(250,250,250,0.6)\" : \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transform-origin: right;\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover span {\n    color: ${props => props.primary ? props.theme.primaryColor : props.themeProp === \"streamlit_dark\" ? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n    opacity: 1;\n    transform: scale(1);\n  }\n  svg {\n    stroke: ${props => props.themeProp === \"streamlit_dark\" ? \"rgba(250,250,250,0.6)\" : \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover svg {\n    stroke: ${props => props.primary ? props.theme.primaryColor : props.themeProp === \"streamlit_dark\" ? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n  }\n`;\n_c3 = StyledButton;\nconst creatIcon = function (name) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n  const CustomIcon = Icons[name];\n  return /*#__PURE__*/_jsxDEV(CustomIcon, {\n    size: `${size}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 10\n  }, _this);\n};\nconst Editor = _ref => {\n  _s();\n  let {\n    lang,\n    theme,\n    shortcuts,\n    props,\n    snippets,\n    commands,\n    editorRef,\n    code,\n    onChange\n  } = _ref;\n  /**\n  * This function takes as input either a snippetText string that is expected\n  * to be already formatted like the text in a SnippetFile or a dictionary or \n  * and array of dictionaries. For the first case, it just returns the input.\n  * For the second and third case, a (SnippetFile format) string is constructed\n  * from the dict(s) and returned. Learn more about snippets {@link  here}\n  * @param snippetRaw snippets to be converted to a single snippetText string\n  * @returns {string} snippetText\n  */\n  const createSnippets = snippetRaw => {\n    return typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(_ref2 => {\n      let {\n        name,\n        code\n      } = _ref2;\n      return ['snippet ' + name, code.split('\\n').map(c => '\\t' + c).join('\\n')].join('\\n');\n    }).join('\\n');\n  };\n  useEffect(() => {\n    console.log(\"~~~~~ useEffect inside Editor ~~~~~\");\n    //console.log(aceEditor.current?.editor);\n    if (editorRef.current) {\n      var _editorRef$current, _editorRef$current2;\n      ace.require(\"ace/ext/keybinding_menu\").init((_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.editor);\n      console.log((_editorRef$current2 = editorRef.current) === null || _editorRef$current2 === void 0 ? void 0 : _editorRef$current2.editor);\n      const snips = createSnippets(snippets);\n      if (snips) {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n\n        //// The function getMode() returns an Ace.SyntaxId object that\n        //// has no way to get or access its $id variable. So the following\n        //// doesnt work:\n        //const id = editor.session.getMode().$id;\n\n        //// The current workaround used here is to recognize that when the \n        //// editorRef mode prop is set with a string (ex: mode=\"python\"), it  \n        //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n        //const id = `ace/mode/${this.state.lang}`;\n\n        snippetManager.register(snippetManager.parseSnippetFile(snips, lang), lang);\n        console.log(JSON.stringify(snips));\n      } else {\n        console.log(\"Cannot register snippets: check format of snippets\");\n      }\n    } else {\n      console.log(\"No editor to register snippets to\");\n    }\n    return () => {\n      console.log(\"Editor unmounted*********\");\n    };\n  }, [snippets]);\n  return /*#__PURE__*/_jsxDEV(AceEditor, {\n    ref: editorRef,\n    name: \"REACT_ACE_EDITOR\",\n    mode: lang,\n    theme: theme,\n    value: code,\n    keyboardHandler: shortcuts,\n    commands: commands,\n    onChange: onChange,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 11\n  }, this);\n};\n\n// const Editor = React.forwardRef(Ceditor)\n_s(Editor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c4 = Editor;\nconst CustomButtonSet = _ref3 => {\n  let {\n    buttonGroup,\n    executeAll,\n    theme,\n    themeProp\n  } = _ref3;\n  const execute = (commands, sendResponse) => {\n    if (commands || sendResponse) {\n      executeAll(commands, sendResponse);\n    } else {\n      console.log(\"No commands or response to execute\");\n    }\n  };\n  console.log(\"Button set is rendering!!!!!!!!!!!!!!\");\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: buttonGroup.buttons.map((button, index) => /*#__PURE__*/_jsxDEV(StyledButton, {\n      primary: button.primary ? button.primary : false,\n      className: (button.class ? button.class : \"\") + (button.alwaysOn ? \" always-on\" : \"\") + (button.showWithIcon ? \" with-icon\" : \"\"),\n      themeProp: themeProp,\n      style: button.style ? button.style : {},\n      onClick: () => {\n        var _button$commands;\n        return execute((_button$commands = button.commands) !== null && _button$commands !== void 0 ? _button$commands : [], button.response);\n      },\n      children: [button.hasText && button.name ? /*#__PURE__*/_jsxDEV(StyledSpan, {\n        children: button.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 47\n      }, this) : ``, button.feather ? creatIcon(button.feather || \"Copy\", button.iconSize) : \"\"]\n    }, buttonGroup.name + \"_\" + button.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 7\n  }, this);\n};\n_c5 = CustomButtonSet;\nconst CodeEditor = _ref4 => {\n  _s2();\n  let {\n    args,\n    width,\n    disabled,\n    theme\n  } = _ref4;\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  const aceEditor = /*#__PURE__*/createRef();\n\n  // commands is array of key bindings.\n  const commands = {\n    commands: [{\n      name: 'submit',\n      //name for the key binding.\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        console.log(\"submit keys pressed\");\n\n        // IMPORTANT: The function `setState()` is required to make sure component state is saved before submit.\n        //            Otherwise changes to the editor and its contents will be lost.\n        Streamlit.setComponentValue({\n          type: \"submit\",\n          code: editor.getValue()\n        });\n      }\n    }, {\n      name: 'save-state',\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        console.log(\"save state keys pressed\");\n        setCode(editor.getValue());\n      }\n    }, {\n      name: 'copyAll',\n      exec: editor => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    }, {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    }]\n  };\n  const execute = function (command) {\n    var _aceEditor$current;\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    const editor = (_aceEditor$current = aceEditor.current) === null || _aceEditor$current === void 0 ? void 0 : _aceEditor$current.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command);\n      } else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      } else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        args.values.array.forEach(element => {\n          containsNumsStr = typeof element === \"string\" || typeof element === \"number\" ? containsNumsStr : false;\n        });\n        if (args.values.length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      } else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  };\n  const executeAll = function (commands) {\n    let sendResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    commands.forEach(command => {\n      if (Array.isArray(command)) {\n        typeof command[0] === \"string\" ? execute(command[0], command[1]) : console.warn(\"improper command format!\");\n      } else if (typeof command === \"string\") {\n        execute(command);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n    if (sendResponse) {\n      respond(sendResponse);\n    }\n  };\n  const respond = function () {\n    let responseType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"submit\";\n    console.log(\"respond called:\" + responseType);\n    Streamlit.setComponentValue({\n      type: responseType,\n      code: code\n    });\n  };\n  const resetEditor = () => {\n    setCode(args['code']);\n  };\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  };\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const unsecureCopyTextToClipboard = text => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const resizeObserver = new ResizeObserver(entries => {\n    var _entries$0$contentBox;\n    /** body margin is 16 (top + bottom) so using our component to figure out the height the iframe needs to be\n      * will require adding about 16 to get the height of the body which is what the iframe should be sized to.\n      * Alternatively, we could just set the top and bottom margins of the body to 0 via the injected css (bootstrap.css).\n      * */\n    Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height + 2); // 14 seems to be the right amount\n  });\n\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme ? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme ? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  };\n  const themeProp = themeChoice();\n  const codeEditorProps = args[\"rootProps\"];\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const aceEditorProps = {\n      ...defaultEditorProps,\n      ...args['editorProps']\n    };\n    const aceOptions = {\n      ...defaultOptions,\n      ...args['options']\n    };\n    const partProps = {\n      setOptions: aceOptions,\n      editorProps: aceEditorProps\n    };\n    const aceProps = {\n      ...defaultProps,\n      ...partProps,\n      ...args['props']\n    };\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorRef: aceEditor,\n      code: code,\n      lang: args['lang'],\n      theme: themeProp,\n      shortcuts: args['shortcuts'],\n      snippets: args['snippets'],\n      commands: commands.commands,\n      props: aceProps,\n      onChange: value => setCode(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }, this);\n  }, [args]);\n  const buttons = useMemo(() => {\n    var _args$buttons;\n    console.log(\"BUTTONS RENDERED\");\n    const customButtonTheme = theme !== null && theme !== void 0 ? theme : {};\n    const customButtons = {\n      buttons: (_args$buttons = args['buttons']) !== null && _args$buttons !== void 0 ? _args$buttons : [],\n      name: \"customButtons\"\n    };\n    return /*#__PURE__*/_jsxDEV(CustomButtonSet, {\n      buttonGroup: customButtons,\n      theme: customButtonTheme,\n      themeProp: themeProp,\n      executeAll: (commands, response) => executeAll(commands, response)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this);\n  }, [args.buttons, args.theme]);\n  console.log(\"PARENT RENDERED\");\n  return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n    ref: observe,\n    style: {\n      ...codeEditorProps,\n      width: \"100%\"\n    },\n    className: \"streamlit_code-editor\",\n    children: [editor, buttons]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 529,\n    columnNumber: 5\n  }, this);\n};\n_s2(CodeEditor, \"JHiMxqvHrRHX6sOLFL6msYfh7tE=\");\n_c6 = CodeEditor;\nexport default _c7 = withStreamlitConnection(CodeEditor);\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"StyledCodeEditor\");\n$RefreshReg$(_c2, \"StyledSpan\");\n$RefreshReg$(_c3, \"StyledButton\");\n$RefreshReg$(_c4, \"Editor\");\n$RefreshReg$(_c5, \"CustomButtonSet\");\n$RefreshReg$(_c6, \"CodeEditor\");\n$RefreshReg$(_c7, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","styled","ThemeProvider","React","useState","createRef","useEffect","useMemo","Icons","AceEditor","ace","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","StyledCodeEditor","div","StyledDiv","StyledRegSpan","span","StyledSpan","StyledButton","button","props","top","left","right","bottom","themeProp","primary","theme","primaryColor","creatIcon","name","size","CustomIcon","Editor","lang","shortcuts","snippets","commands","editorRef","code","onChange","createSnippets","snippetRaw","Array","isArray","map","split","c","join","console","log","current","require","init","editor","snips","snippetManager","register","parseSnippetFile","JSON","stringify","CustomButtonSet","buttonGroup","executeAll","execute","sendResponse","buttons","index","class","alwaysOn","showWithIcon","response","hasText","feather","iconSize","CodeEditor","args","disabled","setCode","aceEditor","bindKey","win","mac","exec","setComponentValue","type","getValue","unsecureCopyTextToClipboard","resetEditor","command","execCommand","containsNumsStr","values","array","forEach","element","length","warn","respond","responseType","copyToClipboard","navigator","clipboard","writeText","err","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","remove","text","resizeObserver","ResizeObserver","entries","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","themeChoice","isDarkTheme","base","codeEditorProps","aceEditorProps","aceOptions","partProps","aceProps","customButtonTheme","customButtons"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled, { ThemeProvider } from \"styled-components\"\nimport React, { useState, useRef, createRef, useReducer, useCallback, useEffect, useMemo } from \"react\"\nimport * as Icons from \"react-feather\"\nimport AceEditor, { IAceEditorProps } from \"react-ace\";\nimport ace, { UndoManager } from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport { IAceEditor } from \"react-ace/lib/types\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\nimport ReactAce from \"react-ace/lib/ace\";\n\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\n// interface State {\n//   code: string\n//   lang: string\n//   isFocused: boolean\n//   undoManager: object\n//   cursorPosition: object\n// }\n\ninterface customInfoText {\n  name: string,\n  class?: string,\n  style?: object,\n  theme?: object\n}\n\ninterface infoBar {\n  name?: string,\n  style?: object,\n  info?: customInfoText[]\n}\n\ninterface customButton {\n  name: string,\n  feather?: string,\n  iconSize?: number,\n  primary?: boolean,\n  hasText?: boolean,\n  showWithIcon?: boolean,\n  alwaysOn?: boolean,\n  commands?: any[],\n  response?: string,\n  class?: string,\n  style?: object,\n  theme?: object\n}\n\ninterface buttonGroup {\n  name: string,\n  style?: object,\n  buttons: customButton[]\n}\n\ninterface menu {\n  menuProps?: object,\n  groups?: buttonGroup[]\n}\n\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n}\n\nconst StyledCodeEditor = styled.div`\nborder-radius: 8px;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\n:hover button {\n  opacity: 1;\n  transform: scale(1);\n}\nbutton.always-on {\n  opacity: 1;\n  transform: scale(1);\n  transition: none;\n}\n:hover button svg {\n      opacity: 1;\n      transform: scale(1);\n}\n:hover button.with-icon span {\n  opacity: 1;\n  transform: scale(1);\n}\nbutton.always-on > span {\n  opacity: 1;\n  transform: scale(1);\n  transition: none;\n}\nbutton.always-on > svg {\n  opacity: 1;\n  transform: scale(1);\n  transition: none;\n}\n`;\nconst StyledDiv = styled.div``;\nconst StyledRegSpan = styled.span``;\n\nconst StyledSpan = styled.span`\n  height: 2.5rem;\n  line-height: 2.5rem;\n  margin: 0px 0.4rem 0.15rem 0.4rem;\n  opacity: 0;\n  transform: scale(0);\n  transition: opacity 300ms 150ms, transform 300ms 150ms;\n`;\n\nconst StyledButton = styled.button<{primary?: boolean, themeProp: string, theme: object, style: object}>`\n  border: none;\n  border-radius: 5px;\n  background: none;\n  height: 2.5rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  transform: scale(0);\n  transition: opacity 20ms 300ms, transform 20ms 300ms;\n  top: ${props => props.style.top || \"\"};\n  left: ${props => props.style.left || \"\"};\n  right: ${props => props.style.right || \"\"};\n  bottom: ${props => props.style.bottom || \"\"};\n  z-index: 101;\n  :focus {\n    outline: none;\n  }\n  span{\n    color: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transform-origin: right;\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover span {\n    color: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n    opacity: 1;\n    transform: scale(1);\n  }\n  svg {\n    stroke: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover svg {\n    stroke: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n  }\n`;\n\ntype iconKey = keyof typeof Icons;\nconst creatIcon = (name: iconKey, size = 16) => {\n  const CustomIcon = Icons[name];\n  return <CustomIcon size={`${size}`} />;\n}\n\ntype EditorProps = {\n  code: string,\n  lang: string,\n  theme: string,\n  shortcuts: string,\n  props: any,\n  editorRef: any,\n  snippets: string | object | object[],\n  commands: object,\n  onChange: (value: string, event?: any) => void \n}\n\nconst Editor = ({ lang, theme, shortcuts, props, snippets, commands, editorRef, code, onChange }: EditorProps ) => {\n\n    /**\n  * This function takes as input either a snippetText string that is expected\n  * to be already formatted like the text in a SnippetFile or a dictionary or \n  * and array of dictionaries. For the first case, it just returns the input.\n  * For the second and third case, a (SnippetFile format) string is constructed\n  * from the dict(s) and returned. Learn more about snippets {@link  here}\n  * @param snippetRaw snippets to be converted to a single snippetText string\n  * @returns {string} snippetText\n  */\n    const createSnippets = (snippetRaw: string | object | [object]): string => {\n      return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n      ([\n        'snippet ' + name,\n        code.split('\\n')\n          .map((c: string) => '\\t' + c)\n          .join('\\n'),\n      ].join('\\n'))\n      ).join('\\n'))\n    }\n  \n    useEffect(() => {\n      console.log(\"~~~~~ useEffect inside Editor ~~~~~\");\n      //console.log(aceEditor.current?.editor);\n      if(editorRef.current){\n        ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current?.editor);\n        console.log(editorRef.current?.editor);\n  \n        const snips = createSnippets(snippets);\n        if(snips){\n          const snippetManager = ace.require('ace/snippets').snippetManager;\n  \n          //// The function getMode() returns an Ace.SyntaxId object that\n          //// has no way to get or access its $id variable. So the following\n          //// doesnt work:\n          //const id = editor.session.getMode().$id;\n  \n          //// The current workaround used here is to recognize that when the \n          //// editorRef mode prop is set with a string (ex: mode=\"python\"), it  \n          //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n          //const id = `ace/mode/${this.state.lang}`;\n  \n          snippetManager.register(snippetManager.parseSnippetFile(snips, lang), lang)\n          console.log(JSON.stringify(snips))\n        } else {\n          console.log(\"Cannot register snippets: check format of snippets\");\n        }\n      } else {\n        console.log(\"No editor to register snippets to\");\n      }\n\n      return () => {console.log(\"Editor unmounted*********\")}\n\n    }, [snippets]);\n\n  return (\n          <AceEditor\n          ref={editorRef}\n          name=\"REACT_ACE_EDITOR\"\n          mode={lang}\n          theme={theme}\n          value={code}\n          keyboardHandler={shortcuts}\n          commands={commands}\n          onChange={onChange}\n          {...props} />\n  );\n};\n\n// const Editor = React.forwardRef(Ceditor)\n\ntype ButtonSet = {\n  theme: object,\n  themeProp: string,\n  buttonGroup: buttonGroup,\n  executeAll: (commands: any[], sendResponse?: string) => void \n}\n\nconst CustomButtonSet = ({buttonGroup, executeAll, theme, themeProp}: ButtonSet) => {\n\n  const execute = (commands: any[], sendResponse?: string) => {\n    if(commands || sendResponse){\n      executeAll(commands, sendResponse);\n    } else { \n      console.log(\"No commands or response to execute\");\n    }\n  }\n\n  console.log(\"Button set is rendering!!!!!!!!!!!!!!\");\n  return (\n      <ThemeProvider theme={theme}>\n        {buttonGroup.buttons.map( (button, index) => (\n        <StyledButton \n          primary={button.primary? button.primary : false}\n          key={buttonGroup.name + \"_\" + button.name} \n          className={(button.class? button.class: \"\" ) + (button.alwaysOn? \" always-on\" : \"\") + (button.showWithIcon? \" with-icon\" : \"\")}\n          themeProp={themeProp}\n          style={button.style? button.style : {}} \n          onClick={() => execute(button.commands ?? [], button.response)}>\n            {(button.hasText && button.name)? <StyledSpan >{button.name}</StyledSpan> : ``}\n            {button.feather? creatIcon(button.feather as iconKey || \"Copy\", button.iconSize) : \"\"}\n        </StyledButton>\n      ))}\n    </ThemeProvider>\n  )\n}\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);  \n\n  const aceEditor = createRef<ReactAce>();\n\n  // commands is array of key bindings.\n  const commands = { commands: [{\n    name: 'submit', //name for the key binding.\n    bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"submit keys pressed\")\n\n      // IMPORTANT: The function `setState()` is required to make sure component state is saved before submit.\n      //            Otherwise changes to the editor and its contents will be lost.\n      Streamlit.setComponentValue({ type: \"submit\", code: editor.getValue() });\n    }\n  }, {\n    name: 'save-state',\n    bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"save state keys pressed\")\n      setCode(editor.getValue());\n    }\n  }, {\n    name: 'copyAll',\n    exec: (editor: ace.Ace.Editor) => {\n      unsecureCopyTextToClipboard(editor.getValue());\n    }\n  }, {\n    name: 'reset',\n    exec: () => {\n      resetEditor();\n    }\n  }]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        args.values.array.forEach((element: any) => {\n          containsNumsStr = (typeof element === \"string\" || typeof element === \"number\") ? containsNumsStr : false;\n        });\n        if (args.values.length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[], sendResponse = \"\") => {\n    commands.forEach(command => {\n      if (Array.isArray(command)) {\n        typeof command[0] === \"string\" ? execute(command[0], command[1]) : console.warn(\"improper command format!\");\n      } else if (typeof command === \"string\") {\n        execute(command);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n\n    if (sendResponse) {\n      respond(sendResponse);\n    }\n  }\n\n  const respond = (responseType = \"submit\") => {\n    console.log(\"respond called:\" + responseType);\n    Streamlit.setComponentValue({ type: responseType, code: code });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  }\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    /** body margin is 16 (top + bottom) so using our component to figure out the height the iframe needs to be\n      * will require adding about 16 to get the height of the body which is what the iframe should be sized to.\n      * Alternatively, we could just set the top and bottom margins of the body to 0 via the injected css (bootstrap.css).\n      * */\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height + 2));  // 14 seems to be the right amount\n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const codeEditorProps = args[\"rootProps\"];\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const aceEditorProps = { ...defaultEditorProps, ...args['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...args['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps, ...args['props'] };\n    return (\n        <Editor editorRef={aceEditor} code={code} lang={args['lang']} theme={themeProp} shortcuts={args['shortcuts']} snippets={args['snippets']} commands={commands.commands} props={aceProps} onChange={(value) => setCode(value)} />\n      );\n  }, [args]);\n\n  const buttons = useMemo(() => {\n    console.log(\"BUTTONS RENDERED\");\n    const customButtonTheme = theme ?? {};\n    const customButtons = {buttons: (args['buttons'] ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      <CustomButtonSet buttonGroup={customButtons} theme={customButtonTheme} themeProp={themeProp} executeAll={(commands, response) => executeAll(commands, response)} />\n    );\n  }, [args.buttons, args.theme]);\n\n  console.log(\"PARENT RENDERED\");\n\n  return (\n    <StyledCodeEditor ref={observe} style={{ ...codeEditorProps, width: \"100%\" }} className=\"streamlit_code-editor\">\n      {editor}\n      {buttons}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
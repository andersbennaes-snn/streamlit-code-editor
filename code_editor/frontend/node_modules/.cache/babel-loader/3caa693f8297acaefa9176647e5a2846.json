{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport ace from \"ace-builds\";\nimport { Editor } from \"./editor\";\nimport { Menu as ButtonMenu, Set as ButtonSet, Info as InfoBar } from \"./button-menu\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250\n};\nconst GlobalCSS = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    opacity: ${props => props.isDisabled ? \"0.5\" : \"1\"};\n    pointer-events: ${props => props.isDisabled ? \"none\" : \"auto\"};\n  }\n`;\n_c = GlobalCSS;\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n_c2 = StyledCodeEditor;\nconst CodeEditor = _ref => {\n  _s();\n  let {\n    args,\n    width,\n    disabled,\n    theme\n  } = _ref;\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  const aceEditor = useRef(null);\n  const infoTextRef = useRef(null);\n  const baseSession = useRef(null);\n  var timeoutId;\n  useEffect(() => {\n    console.log(\"CodeEditor Mounted>>>>>>>>>>>>>>>>\");\n    return () => {\n      console.log(\"CodeEditor Unmounted<<<<<<<<<<<<<<<<\");\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n  const onChangeHandler = newCode => {\n    setCode(newCode);\n  };\n\n  // commands is array containing functions that the editor calls when the bind key is pressed.\n  const commands = {\n    commands: [{\n      name: 'submit',\n      //name for the key binding.\n      description: \"Send 'submit' response\",\n      //description of the command\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        console.log(\"submit keys pressed\");\n        Streamlit.setComponentValue({\n          type: \"submit\",\n          code: editor.getValue()\n        });\n      }\n    }, {\n      name: 'save-state',\n      description: \"Save state\",\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        console.log(\"save state keys pressed\");\n        setCode(editor.getValue());\n      }\n    }, {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: editor => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    }, {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    }, {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor, args) => {\n        if (infoTextRef.current) {\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if (args.timeout) {\n            console.log(\"calling set timeout\");\n            timeoutId = setTimeout(() => {\n              var _infoTextRef$current;\n              console.log(\"settimeout called\");\n              (_infoTextRef$current = infoTextRef.current) === null || _infoTextRef$current === void 0 ? void 0 : _infoTextRef$current.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    }, {\n      name: 'response',\n      //name for the key binding.\n      description: \"Send custom response\",\n      //description of the command\n      exec: function (editor) {\n        let responseType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        console.log(\"respond called:\" + responseType);\n        Streamlit.setComponentValue({\n          type: responseType,\n          code: code\n        });\n      }\n    }, {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: {\n        win: 'Ctrl-Alt-M',\n        mac: 'Command-Alt-M'\n      },\n      exec: editor => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        console.log(editor.getSession().getMode());\n        const snippetText = snippetManager.files['ace/mode/' + args['lang']].snippetText;\n        baseSession.current = editor.getSession();\n        const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n        editor.setSession(snippetsSession);\n      }\n    }]\n  };\n  const execute = function (command) {\n    var _aceEditor$current;\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    const editor = (_aceEditor$current = aceEditor.current) === null || _aceEditor$current === void 0 ? void 0 : _aceEditor$current.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command);\n      } else if (typeof args === \"number\" || typeof args === \"string\") {\n        console.log(command);\n        console.log(args);\n        editor.execCommand(command, args);\n      } else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach(key => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\";\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      } else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  };\n  const executeAll = commands => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        console.log(\"here\");\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"improper command format!\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n  };\n  const resetEditor = () => {\n    setCode(args['code']);\n  };\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  };\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const unsecureCopyTextToClipboard = text => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const resizeObserver = new ResizeObserver(entries => {\n    var _entries$0$contentBox;\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme ? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme ? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  };\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n  const argsString = JSON.stringify(args);\n  const themeString = JSON.stringify(theme);\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    if (revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach(button => {\n        commands.commands = [...commands.commands, {\n          name: button.name.trim().replace(/\\s+/g, '_') + '_button',\n          description: \"Execute '\" + button.name + \"' button command(s)\",\n          exec: () => {\n            executeAll(button.commands);\n          }\n        }];\n      });\n    }\n    const aceEditorProps = {\n      ...defaultEditorProps,\n      ...revertedArgs['editorProps']\n    };\n    const aceOptions = {\n      ...defaultOptions,\n      ...revertedArgs['options']\n    };\n    const partProps = {\n      setOptions: aceOptions,\n      editorProps: aceEditorProps\n    };\n    const aceProps = {\n      ...defaultProps,\n      ...partProps,\n      ...revertedArgs['props']\n    };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorRef: aceEditor,\n      code: code,\n      lang: revertedArgs['lang'],\n      theme: themeProp,\n      shortcuts: revertedArgs['shortcuts'],\n      snippets: revertedArgs['snippets'],\n      commands: commands.commands,\n      keybindings: revertedArgs['keybindings'],\n      props: aceProps,\n      onChange: value => onChangeHandler(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this);\n  }, [argsString, themeProp]);\n  const buttons = useMemo(() => {\n    var _revertedArgs$buttons;\n    console.log(\"BUTTONS RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    const customButtons = {\n      buttons: (_revertedArgs$buttons = revertedArgs['buttons']) !== null && _revertedArgs$buttons !== void 0 ? _revertedArgs$buttons : [],\n      name: \"customButtons\"\n    };\n    return /*#__PURE__*/_jsxDEV(ButtonSet, {\n      buttonGroup: customButtons,\n      theme: customButtonTheme,\n      themeProp: themeProp,\n      executeAll: commands => executeAll(commands)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this);\n  }, [argsString, themeString, themeProp]);\n  const menu = useMemo(() => {\n    console.log(\"MENU RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    return /*#__PURE__*/_jsxDEV(ButtonMenu, {\n      menu: revertedArgs['menu'],\n      theme: menuTheme,\n      themeProp: themeProp,\n      executeAll: commands => executeAll(commands)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this);\n  }, [argsString, themeString, themeProp]);\n  const info = useMemo(() => {\n    console.log(\"INFO RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    return /*#__PURE__*/_jsxDEV(InfoBar, {\n      infoRef: infoTextRef,\n      info: revertedArgs['info'],\n      theme: infoTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this);\n  }, [argsString, themeString]);\n  console.log(\"PARENT RENDERED\");\n  return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n    ref: observe,\n    style: componentContainerProps.style,\n    css: componentContainerProps.css,\n    className: \"streamlit_code-editor\",\n    children: [/*#__PURE__*/_jsxDEV(GlobalCSS, {\n      isDisabled: disabled,\n      css: componentContainerProps.globalCSS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), editor, buttons, menu, info]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"wzCx5fgh5C/SXPezIvpp9HNVxRs=\");\n_c3 = CodeEditor;\nexport default _c4 = withStreamlitConnection(CodeEditor);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GlobalCSS\");\n$RefreshReg$(_c2, \"StyledCodeEditor\");\n$RefreshReg$(_c3, \"CodeEditor\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","styled","createGlobalStyle","React","useState","useRef","useEffect","useMemo","ace","Editor","Menu","ButtonMenu","Set","ButtonSet","Info","InfoBar","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","debounceChangePeriod","GlobalCSS","props","isDisabled","StyledCodeEditor","div","CodeEditor","args","disabled","theme","code","setCode","aceEditor","infoTextRef","baseSession","timeoutId","console","log","clearTimeout","onChangeHandler","newCode","commands","name","description","bindKey","win","mac","exec","editor","setComponentValue","type","getValue","unsecureCopyTextToClipboard","resetEditor","current","innerText","text","classList","add","classToggle","timeout","setTimeout","remove","responseType","snippetManager","require","getSession","getMode","snippetText","files","snippetsSession","createEditSession","setSession","execute","command","execCommand","Array","isArray","containsNumsStr","Object","keys","forEach","key","length","warn","executeAll","singleCommand","copyToClipboard","navigator","clipboard","writeText","err","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","resizeObserver","ResizeObserver","entries","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","themeChoice","isDarkTheme","base","themeProp","componentContainerProps","argsString","JSON","stringify","themeString","revertedArgs","parse","button","trim","replace","aceEditorProps","aceOptions","partProps","aceProps","buttons","revertedTheme","customButtonTheme","customButtons","menu","menuTheme","info","infoTheme","css","globalCSS"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled, { createGlobalStyle } from \"styled-components\"\nimport React, { useState, useRef, useReducer, useCallback, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from \"./editor\";\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean}>`\n  body {\n    margin: 0;\n    padding: 0;\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);  \n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n\n  var timeoutId: NodeJS.Timeout;\n\n  useEffect(() => {\n    console.log(\"CodeEditor Mounted>>>>>>>>>>>>>>>>\");\n    return () => {\n      console.log(\"CodeEditor Unmounted<<<<<<<<<<<<<<<<\");\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n  }\n\n  // commands is array containing functions that the editor calls when the bind key is pressed.\n  const commands = { commands: [{\n    name: 'submit', //name for the key binding.\n    description: \"Send 'submit' response\", //description of the command\n    bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"submit keys pressed\")\n      Streamlit.setComponentValue({ type: \"submit\", code: editor.getValue() });\n    }\n  }, {\n    name: 'save-state',\n    description: \"Save state\",\n    bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"save state keys pressed\")\n      setCode(editor.getValue());\n    }\n  }, {\n    name: 'copyAll',\n    description: \"Copy all text to clipboard\",\n    exec: (editor: ace.Ace.Editor) => {\n      unsecureCopyTextToClipboard(editor.getValue());\n    }\n  }, {\n    name: 'reset',\n    exec: () => {\n      resetEditor();\n    }\n  },{\n    name: 'infoMessage',\n    description: \"Display message in info bar\",\n    exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string} ) => {\n      if(infoTextRef.current){\n        infoTextRef.current.innerText = args.text;\n        infoTextRef.current.classList.add(args.classToggle || \"\");\n        if(args.timeout){\n          console.log(\"calling set timeout\")\n          timeoutId = setTimeout(() => {\n            console.log(\"settimeout called\");\n            infoTextRef.current?.classList.remove(args.classToggle || \"\");\n          }, args.timeout);\n        }\n\n      }\n    }\n  },{\n    name: 'response', //name for the key binding.\n    description: \"Send custom response\", //description of the command\n    exec: (editor: ace.Ace.Editor, responseType = \"\") => {\n      console.log(\"respond called:\" + responseType);\n      Streamlit.setComponentValue({ type: responseType, code: code });\n    }\n  },{\n    name: 'editSnippets',\n    description: \"Edit snippets\",\n    bindKey: { win: 'Ctrl-Alt-M', mac: 'Command-Alt-M' },\n    exec: (editor: ace.Ace.Editor) => {\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      console.log(editor.getSession().getMode());\n      const snippetText = snippetManager.files['ace/mode/' + args['lang']].snippetText;\n      baseSession.current = editor.getSession();\n      const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n      editor.setSession(snippetsSession);\n    }\n  }]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        console.log(command);\n        console.log(args);\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\";\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  }\n\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        console.log(\"here\");\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"improper command format!\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  }\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const argsString = JSON.stringify(args);\n  const themeString = JSON.stringify(theme);\n  \n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippets={revertedArgs['snippets']} \n         commands={commands.commands} \n         keybindings={revertedArgs['keybindings']} \n         props={aceProps} \n         onChange={(value) => onChangeHandler(value)} />\n      );\n  }, [argsString, themeProp]);\n\n  const buttons = useMemo(() => {\n    console.log(\"BUTTONS RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedArgs['buttons'] ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [argsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    console.log(\"MENU RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedArgs['menu']} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [argsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    console.log(\"INFO RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedArgs['info']} \n       theme={infoTheme} />\n    );\n  }, [argsString, themeString]);\n\n  console.log(\"PARENT RENDERED\");\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className=\"streamlit_code-editor\" >\n      <GlobalCSS isDisabled={disabled} css={componentContainerProps.globalCSS} />\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/editor.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Editor = _ref => {\n  _s();\n  let {\n    lang,\n    theme,\n    shortcuts,\n    props,\n    snippetString,\n    commands,\n    keybindings,\n    editorRef,\n    code,\n    onChange\n  } = _ref;\n  useEffect(() => {\n    console.log(\"~~~~~ useEffect inside Editor ~~~~~\");\n    //console.log(aceEditor.current?.editor);\n    if (editorRef.current) {\n      var _editorRef$current, _editorRef$current3, _editorRef$current4;\n      console.log(editorRef.current.editor.getSession().$modeId);\n      console.log(keybindings);\n      console.log((_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.editor.commands);\n      if (keybindings.length > 0) {\n        keybindings.forEach(binding => {\n          var _editorRef$current2;\n          (_editorRef$current2 = editorRef.current) === null || _editorRef$current2 === void 0 ? void 0 : _editorRef$current2.editor.commands.bindkey(binding.bindkey, binding.name);\n        });\n      }\n      // (editorRef.current as AceEditor).editor.commands.bindKeys({})\n\n      ace.require(\"ace/ext/keybinding_menu\").init((_editorRef$current3 = editorRef.current) === null || _editorRef$current3 === void 0 ? void 0 : _editorRef$current3.editor);\n      console.log((_editorRef$current4 = editorRef.current) === null || _editorRef$current4 === void 0 ? void 0 : _editorRef$current4.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString);\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)) {\n        console.log(\"new snippets\");\n        console.log(snippetsLang);\n        console.log(snippetsAddRemove);\n        if (snippetsAddRemove[0]) {\n          //// The function getMode() returns an Ace.SyntaxId object that\n          //// has no way to get or access its $id variable. So the following\n          //// doesnt work:\n          //const id = editor.session.getMode().$id;\n\n          //// The current workaround used here is to recognize that when the \n          //// editorRef mode prop is set with a string (ex: mode=\"python\"), it  \n          //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n          //const id = `ace/mode/${this.state.lang}`;\n\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang);\n          console.log(snippetManager);\n        } else {\n          console.log(\"Cannot register snippets: check format of snippets\");\n        }\n        if (snippetsAddRemove[1]) {\n          console.log(\"snippets to remove\");\n          console.log(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang));\n          console.log(snippetManager.parseSnippetFile(snippetManager.files['ace/mode/' + snippetsLang].snippetText, snippetsLang));\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang);\n          console.log(snippetManager);\n        } else {\n          console.log(\"Cannot unregister snippets: check format of snippets\");\n        }\n      }\n    } else {\n      console.log(\"No editor to register/unregister snippets to\");\n    }\n    return () => {\n      console.log(\"Editor unmounted*********\");\n    };\n  }, [snippetString]);\n  return /*#__PURE__*/_jsxDEV(AceEditor, {\n    ref: editorRef,\n    name: \"REACT_ACE_EDITOR\",\n    mode: lang,\n    theme: theme,\n    value: code,\n    keyboardHandler: shortcuts,\n    commands: commands,\n    onChange: onChange,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 13\n  }, this);\n};\n_s(Editor, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["useEffect","AceEditor","ace","Editor","lang","theme","shortcuts","props","snippetString","commands","keybindings","editorRef","code","onChange","console","log","current","editor","getSession","$modeId","length","forEach","binding","bindkey","name","require","init","snippetManager","snippets","JSON","parse","snippetsLang","snippetsAddRemove","Object","entries","register","parseSnippetFile","files","snippetText","unregister"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/editor.tsx"],"sourcesContent":["import { useEffect} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface CommandBinding {\n    bindkey: string,\n    name: string\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    commands: object,\n    keybindings: CommandBinding[],\n    onChange: (value: string, event?: any) => void \n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, keybindings, editorRef, code, onChange }: EditorProps ) => {\n  \n    \n      useEffect(() => {\n        console.log(\"~~~~~ useEffect inside Editor ~~~~~\");\n        //console.log(aceEditor.current?.editor);\n        if(editorRef.current){\n          console.log(editorRef.current.editor.getSession().$modeId);\n          console.log(keybindings);\n          console.log(editorRef.current?.editor.commands);\n          \n          if(keybindings.length > 0){\n              keybindings.forEach((binding) => {\n                  editorRef.current?.editor.commands.bindkey(binding.bindkey, binding.name);      \n              });\n          }\n          // (editorRef.current as AceEditor).editor.commands.bindKeys({})\n\n          ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current?.editor);\n          console.log(editorRef.current?.editor);\n          const snippetManager = ace.require('ace/snippets').snippetManager;\n          const snippets = JSON.parse(snippetString) as object;\n          for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n            console.log(\"new snippets\")\n            console.log(snippetsLang);\n            console.log(snippetsAddRemove);\n            if(snippetsAddRemove[0]){\n              //// The function getMode() returns an Ace.SyntaxId object that\n              //// has no way to get or access its $id variable. So the following\n              //// doesnt work:\n              //const id = editor.session.getMode().$id;\n\n              //// The current workaround used here is to recognize that when the \n              //// editorRef mode prop is set with a string (ex: mode=\"python\"), it  \n              //// constructs the mode id as follows: setMode(`ace/mode/${mode}`)\n              //const id = `ace/mode/${this.state.lang}`;\n\n              snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n              console.log(snippetManager);\n            } else {\n              console.log(\"Cannot register snippets: check format of snippets\");\n            }\n            if(snippetsAddRemove[1]){\n              console.log(\"snippets to remove\")\n              console.log(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang));\n\n              console.log(snippetManager.parseSnippetFile(snippetManager.files['ace/mode/' + snippetsLang].snippetText, snippetsLang));\n              snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n              console.log(snippetManager);\n            } else {\n              console.log(\"Cannot unregister snippets: check format of snippets\");\n            }\n          }\n        } else {\n          console.log(\"No editor to register/unregister snippets to\");\n        }\n        return () => {console.log(\"Editor unmounted*********\")}\n      }, [snippetString]);\n  \n    return (\n            <AceEditor\n            ref={editorRef}\n            name=\"REACT_ACE_EDITOR\"\n            mode={lang}\n            theme={theme}\n            value={code}\n            keyboardHandler={shortcuts}\n            commands={commands}\n            onChange={onChange}\n            {...props} />\n    );\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}
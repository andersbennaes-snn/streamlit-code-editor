{"ast":null,"code":"import _regeneratorRuntime from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _inherits from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\n/** @ignore */\nexport var ITERATOR_DONE = Object.freeze({\n  done: true,\n  value: void 0\n});\n/** @ignore */\nexport var ArrowJSON = /*#__PURE__*/function () {\n  // @ts-ignore\n  function ArrowJSON(_json) {\n    _classCallCheck(this, ArrowJSON);\n    this._json = _json;\n  }\n  _createClass(ArrowJSON, [{\n    key: \"schema\",\n    get: function get() {\n      return this._json['schema'];\n    }\n  }, {\n    key: \"batches\",\n    get: function get() {\n      return this._json['batches'] || [];\n    }\n  }, {\n    key: \"dictionaries\",\n    get: function get() {\n      return this._json['dictionaries'] || [];\n    }\n  }]);\n  return ArrowJSON;\n}();\n/** @ignore */\nexport var ReadableInterop = /*#__PURE__*/function () {\n  function ReadableInterop() {\n    _classCallCheck(this, ReadableInterop);\n  }\n  _createClass(ReadableInterop, [{\n    key: \"tee\",\n    value: function tee() {\n      return this._getDOMStream().tee();\n    }\n  }, {\n    key: \"pipe\",\n    value: function pipe(writable, options) {\n      return this._getNodeStream().pipe(writable, options);\n    }\n  }, {\n    key: \"pipeTo\",\n    value: function pipeTo(writable, options) {\n      return this._getDOMStream().pipeTo(writable, options);\n    }\n  }, {\n    key: \"pipeThrough\",\n    value: function pipeThrough(duplex, options) {\n      return this._getDOMStream().pipeThrough(duplex, options);\n    }\n  }, {\n    key: \"_getDOMStream\",\n    value: function _getDOMStream() {\n      return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n  }, {\n    key: \"_getNodeStream\",\n    value: function _getNodeStream() {\n      return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n  }]);\n  return ReadableInterop;\n}();\n/** @ignore */\nexport var AsyncQueue = /*#__PURE__*/function (_ReadableInterop, _Symbol$asyncIterator) {\n  _inherits(AsyncQueue, _ReadableInterop);\n  var _super = _createSuper(AsyncQueue);\n  function AsyncQueue() {\n    var _this;\n    _classCallCheck(this, AsyncQueue);\n    _this = _super.call(this);\n    _this._values = [];\n    _this.resolvers = [];\n    _this._closedPromise = new Promise(function (r) {\n      return _this._closedPromiseResolve = r;\n    });\n    return _this;\n  }\n  _createClass(AsyncQueue, [{\n    key: \"closed\",\n    get: function get() {\n      return this._closedPromise;\n    }\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(reason) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.return(reason);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function cancel(_x) {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n  }, {\n    key: \"write\",\n    value: function write(value) {\n      if (this._ensureOpen()) {\n        this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({\n          done: false,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(value) {\n      if (this._closedPromiseResolve) {\n        this.resolvers.length <= 0 ? this._error = {\n          error: value\n        } : this.resolvers.shift().reject({\n          done: true,\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._closedPromiseResolve) {\n        var resolvers = this.resolvers;\n        while (resolvers.length > 0) {\n          resolvers.shift().resolve(ITERATOR_DONE);\n        }\n        this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n      }\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream(options) {\n      return streamAdapters.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream(options) {\n      return streamAdapters.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n    }\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.abort(_);\n            case 2:\n              return _context2.abrupt(\"return\", ITERATOR_DONE);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _throw(_x2) {\n        return _throw2.apply(this, arguments);\n      }\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.close();\n            case 2:\n              return _context3.abrupt(\"return\", ITERATOR_DONE);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _return(_x3) {\n        return _return2.apply(this, arguments);\n      }\n      return _return;\n    }()\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(size) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.next(size, 'read');\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent.value);\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function read(_x4) {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }()\n  }, {\n    key: \"peek\",\n    value: function () {\n      var _peek = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(size) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.next(size, 'peek');\n            case 2:\n              return _context5.abrupt(\"return\", _context5.sent.value);\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function peek(_x5) {\n        return _peek.apply(this, arguments);\n      }\n      return peek;\n    }()\n  }, {\n    key: \"next\",\n    value: function next() {\n      var _this2 = this;\n      if (this._values.length > 0) {\n        return Promise.resolve({\n          done: false,\n          value: this._values.shift()\n        });\n      } else if (this._error) {\n        return Promise.reject({\n          done: true,\n          value: this._error.error\n        });\n      } else if (!this._closedPromiseResolve) {\n        return Promise.resolve(ITERATOR_DONE);\n      } else {\n        return new Promise(function (resolve, reject) {\n          _this2.resolvers.push({\n            resolve: resolve,\n            reject: reject\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_ensureOpen\",\n    value: function _ensureOpen() {\n      if (this._closedPromiseResolve) {\n        return true;\n      }\n      throw new Error(\"\".concat(this, \" is closed\"));\n    }\n  }]);\n  return AsyncQueue;\n}(ReadableInterop, Symbol.asyncIterator);","map":{"version":3,"mappings":"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","names":["streamAdapters","ITERATOR_DONE","Object","freeze","done","value","ArrowJSON","_json","ReadableInterop","_getDOMStream","tee","writable","options","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","_closedPromise","Promise","r","_closedPromiseResolve","reason","return","_ensureOpen","resolvers","length","_values","push","shift","resolve","_error","error","reject","undefined","_","abort","close","size","next","Error","Symbol","asyncIterator"],"sources":["io/interfaces.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
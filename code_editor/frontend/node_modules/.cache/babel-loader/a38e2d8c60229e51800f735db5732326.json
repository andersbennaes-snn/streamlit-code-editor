{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/my_component/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-one_dark\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/** Focus handler for our \"Click Me!\" button. */\nfunction onChange(value, event) {\n  console.log(\"change\", value);\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(AceEditor, {\n        mode: \"python\",\n        theme: \"one_dark\",\n        onChange: onChange,\n        name: \"UNIQUE_ID_OF_DIV\",\n        editorProps: {\n          $blockScrolling: true\n        },\n        setOptions: {\n          maxLines: 10,\n          minLines: 10,\n          fontSize: \"1rem\",\n          cursorStyle: \"smooth\",\n          highlightActiveLine: true,\n          showPrintMargin: false,\n          showLineNumbers: false,\n          foldStyle: \"markbegin\",\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\n\n//==========================================================================\n// Extra snippets of code\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// /** Click handler for our \"Click Me!\" button. */\n// private onClicked = (): void => {\n//   // Increment state.numClicks, and pass the new value back to\n//   // Streamlit via `Streamlit.setComponentValue`.\n//   this.setState(\n//     prevState => ({ numClicks: prevState.numClicks + 1 }),\n//     () => Streamlit.setComponentValue(this.state.numClicks)\n//   )\n// }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","AceEditor","onChange","value","event","console","log","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","$blockScrolling","maxLines","minLines","fontSize","cursorStyle","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","enableLiveAutocompletion","enableSnippets"],"sources":["/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-one_dark\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/** Focus handler for our \"Click Me!\" button. */\nfunction onChange(value: string, event?: any){\n  console.log(\"change\", value);\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <AceEditor\n        \n        mode=\"python\"\n        theme=\"one_dark\"\n        onChange={onChange}\n        name=\"UNIQUE_ID_OF_DIV\"\n        editorProps={{ $blockScrolling: true }}\n        setOptions={{\n          maxLines: 10,\n          minLines: 10, \n          fontSize: \"1rem\",\n          cursorStyle: \"smooth\",\n          highlightActiveLine: true,\n          showPrintMargin: false,\n          showLineNumbers: false,\n          foldStyle: \"markbegin\",\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        }}\n      />\n    )\n  }\n}\n\n  //==========================================================================\n  // Extra snippets of code\n  //   /** Blur handler for our \"Click Me!\" button. */\n  //   private _onBlur = (): void => {\n  //     this.setState({ isFocused: false })\n  //   }\n  // }\n  \n    // /** Click handler for our \"Click Me!\" button. */\n    // private onClicked = (): void => {\n    //   // Increment state.numClicks, and pass the new value back to\n    //   // Streamlit via `Streamlit.setComponentValue`.\n    //   this.setState(\n    //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n    //     () => Streamlit.setComponentValue(this.state.numClicks)\n    //   )\n    // }\n  \n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default withStreamlitConnection(MyComponent)"],"mappings":";AAAA,SAEEA,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AACxC,OAAOC,SAAS,MAAM,WAAW;AAEjC,OAAO,uCAAuC;AAC9C,OAAO,0CAA0C;AAAC;AAOlD;AACA,SAASC,QAAQ,CAACC,KAAa,EAAEC,KAAW,EAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,KAAK,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA,MAAMI,WAAW,SAAST,sBAAsB,CAAQ;EAAA;IAAA;IAAA,KAC/CU,KAAK,GAAG;MAAEC,SAAS,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAM,CAAC;IAAA,KAI1CC,MAAM,GAAG,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,MAAM,CAAC;;MAEpC;MACA;MACA;MACA,MAAM;QAAEC;MAAM,CAAC,GAAG,IAAI,CAACF,KAAK;MAC5B,MAAMG,KAA0B,GAAG,CAAC,CAAC;;MAErC;MACA;MACA,IAAID,KAAK,EAAE;QACT;QACA;QACA,MAAME,aAAa,GAAI,aACrB,IAAI,CAACT,KAAK,CAACE,SAAS,GAAGK,KAAK,CAACG,YAAY,GAAG,MAC7C,EAAC;QACFF,KAAK,CAACG,MAAM,GAAGF,aAAa;QAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;MAC/B;;MAEA;MACA;MACA;MACA;MACA,oBACE,QAAC,SAAS;QAER,IAAI,EAAC,QAAQ;QACb,KAAK,EAAC,UAAU;QAChB,QAAQ,EAAEf,QAAS;QACnB,IAAI,EAAC,kBAAkB;QACvB,WAAW,EAAE;UAAEmB,eAAe,EAAE;QAAK,CAAE;QACvC,UAAU,EAAE;UACVC,QAAQ,EAAE,EAAE;UACZC,QAAQ,EAAE,EAAE;UACZC,QAAQ,EAAE,MAAM;UAChBC,WAAW,EAAE,QAAQ;UACrBC,mBAAmB,EAAE,IAAI;UACzBC,eAAe,EAAE,KAAK;UACtBC,eAAe,EAAE,KAAK;UACtBC,SAAS,EAAE,WAAW;UACtBC,wBAAwB,EAAE,IAAI;UAC9BC,cAAc,EAAE;QAClB;MAAE;QAAA;QAAA;QAAA;MAAA,QACF;IAEN,CAAC;EAAA;AACH;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEJ;AACA;AACA;AACA;AACA;;AAEA,oBAAehC,uBAAuB,CAACQ,WAAW,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}
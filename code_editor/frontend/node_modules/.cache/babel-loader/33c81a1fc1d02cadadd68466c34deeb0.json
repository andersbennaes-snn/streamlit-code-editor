{"ast":null,"code":"import _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport { css as _css } from \"styled-components\";\nimport { createGlobalStyle as _createGlobalStyle } from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, Info as InfoBar } from \"./button-menu\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250\n};\nconst GlobalCSS = _createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    opacity: ${props => props.isDisabled ? \"0.5\" : \"1\"};\n    pointer-events: ${props => props.isDisabled ? \"none\" : \"auto\"};\n  }\n`;\n_c = GlobalCSS;\nvar _StyledGlobalCSS = _styled(GlobalCSS).withConfig({\n  displayName: \"CodeEditor___StyledGlobalCSS\",\n  componentId: \"sc-wmif04-0\"\n})([\"\", \"\"], p => p.$_css2);\nconst StyledCodeEditor = _styled.div.withConfig({\n  displayName: \"CodeEditor__StyledCodeEditor\",\n  componentId: \"sc-wmif04-1\"\n})([\"width:100%;border-radius:8px;overflow:hidden;display:flex;flex-direction:column;:hover button{opacity:1;transform:scale(1);}button.always-on{opacity:1;transform:scale(1);transition:none;}:hover button svg{opacity:1;transform:scale(1);}:hover button.with-icon span{opacity:1;transform:scale(1);}button.always-on > span{opacity:1;transform:scale(1);transition:none;}button.always-on > svg{opacity:1;transform:scale(1);transition:none;}\"]);\nvar _StyledStyledCodeEditor = _styled(StyledCodeEditor).withConfig({\n  displayName: \"CodeEditor___StyledStyledCodeEditor\",\n  componentId: \"sc-wmif04-2\"\n})([\".dark{background-color:#eee;}\"]);\nconst CodeEditor = _ref => {\n  _s();\n  var _ref3;\n  let {\n    args,\n    width,\n    disabled,\n    theme\n  } = _ref;\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef(null);\n  const infoTextRef = useRef(null);\n  const baseSession = useRef(null);\n  var timeoutId;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = snippetRaw => {\n    return typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(_ref2 => {\n      let {\n        name,\n        code\n      } = _ref2;\n      return ['snippet ' + name, code.split('\\n').map(c => '\\t' + c).join('\\n')].join('\\n');\n    }).join('\\n');\n  };\n  const [snippetAddRemove, setSnippetAddRemove] = useState({\n    [args['lang']]: [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]\n  });\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n  useEffect(() => {\n    console.log(\"CodeEditor Mounted>>>>>>>>>>>>>>>>\");\n    return () => {\n      console.log(\"CodeEditor Unmounted<<<<<<<<<<<<<<<<\");\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n  const onChangeHandler = newCode => {\n    setCode(newCode);\n  };\n\n  // commands is array containing functions that the editor calls when the bind key is pressed.\n  const commands = {\n    commands: [{\n      name: 'submit',\n      //name for the key binding.\n      description: \"Send 'submit' response\",\n      //description of the command\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        console.log(\"submit keys pressed\");\n        Streamlit.setComponentValue({\n          type: \"submit\",\n          code: editor.getValue()\n        });\n      }\n    }, {\n      name: 'save-state',\n      description: \"Save state\",\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        console.log(\"save state keys pressed\");\n        setCode(editor.getValue());\n      }\n    }, {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: editor => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    }, {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    }, {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor, args) => {\n        if (infoTextRef.current) {\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if (args.timeout) {\n            console.log(\"calling set timeout\");\n            timeoutId = setTimeout(() => {\n              var _infoTextRef$current;\n              console.log(\"settimeout called\");\n              (_infoTextRef$current = infoTextRef.current) === null || _infoTextRef$current === void 0 ? void 0 : _infoTextRef$current.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    }, {\n      name: 'response',\n      //name for the key binding.\n      description: \"Send custom response\",\n      //description of the command\n      exec: function (editor) {\n        let responseType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        console.log(\"respond called:\" + responseType);\n        Streamlit.setComponentValue({\n          type: responseType,\n          code: code\n        });\n      }\n    }, {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: {\n        win: 'Ctrl-Alt-M',\n        mac: 'Command-Alt-M'\n      },\n      exec: editor => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        console.log(snippetManager);\n        if (baseSession.current) {\n          const snippetText = editor.getSession().getValue();\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n          try {\n            console.log(\"parsing snippet file\");\n            const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n            const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n            const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n            const snippetsToRemove = snippetsMinus;\n            const langMode = editor.getSession().$modeId.split(\"/\").pop();\n            setSnippetAddRemove({\n              [langMode]: [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]\n            });\n          } catch (error) {\n            editor.execCommand(\"infoMessage\", {\n              text: \"error parsing file, restoring original file\",\n              timeout: 2000,\n              classToggle: \"show\"\n            });\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop();\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map(snip => ({\n            name: snip.name,\n            code: snip.content\n          }))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {\n            row: lineCount - 15 > 0 ? lineCount - 15 : 0,\n            column: 0\n          };\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    }, {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: {\n        win: 'Ctrl-Alt-B',\n        mac: 'Command-Alt-B'\n      },\n      exec: editor => {\n        const Autocomplete = ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if (baseSession.current) {\n          const keybindingsJSON = editor.getSession().getValue();\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n          try {\n            console.log(\"parsing keybindings file\");\n            console.log(keybindingsJSON);\n            setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n          } catch (error) {\n            editor.execCommand(\"infoMessage\", {\n              text: \"error parsing file, restoring original file\",\n              timeout: 2000,\n              classToggle: \"show\"\n            });\n          }\n        } else {\n          const keybindings = {\n            commands: {},\n            completer: {}\n          };\n          console.log(typeof editor.completer.keyboardHandler.commands);\n          if (editor.completer && editor.completer.keyboardHandler.commands) {\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map(key => {\n              var _editor$completer$key;\n              return {\n                bindkey: (_editor$completer$key = editor.completer.keyboardHandler.commands[key].bindKey) !== null && _editor$completer$key !== void 0 ? _editor$completer$key : \"\",\n                name: editor.completer.keyboardHandler.commands[key].name\n              };\n            });\n          }\n          if (editor.commands.commands) {\n            keybindings.commands = Object.keys(editor.commands.commands).map(key => {\n              var _editor$commands$comm;\n              return {\n                bindkey: (_editor$commands$comm = editor.commands.commands[key].bindKey) !== null && _editor$commands$comm !== void 0 ? _editor$commands$comm : \"\",\n                name: editor.commands.commands[key].name\n              };\n            });\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    }, {\n      name: 'exitSession',\n      //name for the key binding.\n      bindKey: {\n        win: 'Esc',\n        mac: 'Esc'\n      },\n      description: \"Return to main session (keep changes)\",\n      //description of the command\n      exec: editor => {\n        if (baseSession.current) {\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\") {\n            editor.execCommand(\"editSnippets\");\n          } else if (mode === \"json\") {\n            editor.execCommand(\"editKeyBindings\");\n          }\n        }\n      }\n    }, {\n      name: 'abandonSession',\n      //name for the key binding.\n      bindKey: {\n        win: 'Ctrl-Alt-Esc',\n        mac: 'Command-Alt-Esc'\n      },\n      description: \"Return to main session (discard changes)\",\n      //description of the command\n      exec: editor => {\n        if (baseSession.current) {\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    }]\n  };\n  const execute = function (command) {\n    var _aceEditor$current;\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    const editor = (_aceEditor$current = aceEditor.current) === null || _aceEditor$current === void 0 ? void 0 : _aceEditor$current.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command);\n      } else if (typeof args === \"number\" || typeof args === \"string\") {\n        console.log(command);\n        console.log(args);\n        editor.execCommand(command, args);\n      } else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach(key => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\";\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      } else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  };\n  const executeAll = commands => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        console.log(\"here\");\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"improper command format!\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n  };\n  const resetEditor = () => {\n    setCode(args['code']);\n  };\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  };\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const unsecureCopyTextToClipboard = text => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const resizeObserver = new ResizeObserver(entries => {\n    var _entries$0$contentBox;\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme ? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme ? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  };\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n  const argsString = JSON.stringify(args);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(argsString);\n    if (revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach(button => {\n        commands.commands = [...commands.commands, {\n          name: button.name.trim().replace(/\\s+/g, '_') + '_button',\n          description: \"Execute '\" + button.name + \"' button command(s)\",\n          exec: () => {\n            executeAll(button.commands);\n          }\n        }];\n      });\n    }\n    const aceEditorProps = {\n      ...defaultEditorProps,\n      ...revertedArgs['editorProps']\n    };\n    const aceOptions = {\n      ...defaultOptions,\n      ...revertedArgs['options']\n    };\n    const partProps = {\n      setOptions: aceOptions,\n      editorProps: aceEditorProps\n    };\n    const aceProps = {\n      ...defaultProps,\n      ...partProps,\n      ...revertedArgs['props']\n    };\n\n    // if(baseSession.current && aceEditor.current){\n    //   aceEditor.current.editor.setSession(baseSession.current);\n    //   console.log(aceEditor.current.editor.getSession().getValue());\n    // }\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorRef: aceEditor,\n      code: code,\n      lang: revertedArgs['lang'],\n      theme: themeProp,\n      shortcuts: revertedArgs['shortcuts'],\n      snippetString: snippets,\n      commands: commands.commands,\n      keybindingString: keybindings,\n      props: aceProps,\n      onChange: value => onChangeHandler(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }, this);\n  }, [argsString, themeProp, snippets, keybindingAddRemove]);\n  const buttons = useMemo(() => {\n    var _revertedArgs$buttons;\n    console.log(\"BUTTONS RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    const customButtons = {\n      buttons: (_revertedArgs$buttons = revertedArgs['buttons']) !== null && _revertedArgs$buttons !== void 0 ? _revertedArgs$buttons : [],\n      name: \"customButtons\"\n    };\n    return /*#__PURE__*/_jsxDEV(ButtonSet, {\n      buttonGroup: customButtons,\n      theme: customButtonTheme,\n      themeProp: themeProp,\n      executeAll: commands => executeAll(commands)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this);\n  }, [argsString, themeString, themeProp]);\n  const menu = useMemo(() => {\n    console.log(\"MENU RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    return /*#__PURE__*/_jsxDEV(ButtonMenu, {\n      menu: revertedArgs['menu'],\n      theme: menuTheme,\n      themeProp: themeProp,\n      executeAll: commands => executeAll(commands)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this);\n  }, [argsString, themeString, themeProp]);\n  const info = useMemo(() => {\n    console.log(\"INFO RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme !== null && revertedTheme !== void 0 ? revertedTheme : {};\n    return /*#__PURE__*/_jsxDEV(InfoBar, {\n      infoRef: infoTextRef,\n      info: revertedArgs['info'],\n      theme: infoTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this);\n  }, [argsString, themeString]);\n  console.log(\"PARENT RENDERED\");\n  return /*#__PURE__*/_jsxDEV(_StyledStyledCodeEditor, {\n    ref: observe,\n    style: componentContainerProps.style,\n    className: (_ref3 = \"streamlit_code-editor \" + (theme === null || theme === void 0 ? void 0 : theme.base)) !== null && _ref3 !== void 0 ? _ref3 : \"\",\n    children: [/*#__PURE__*/_jsxDEV(_StyledGlobalCSS, {\n      isDisabled: disabled,\n      $_css2: componentContainerProps.globalCSS\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this), editor, buttons, menu, info]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 533,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"+UyNUBCOQqTjJ1/Is1O4YBfWSFE=\");\n_c2 = CodeEditor;\nexport default _c3 = withStreamlitConnection(CodeEditor);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GlobalCSS\");\n$RefreshReg$(_c2, \"CodeEditor\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useState","useRef","useEffect","useMemo","ace","Editor","Menu","ButtonMenu","Set","ButtonSet","Info","InfoBar","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","debounceChangePeriod","GlobalCSS","createGlobalStyle","props","isDisabled","StyledCodeEditor","styled","div","CodeEditor","args","disabled","theme","code","setCode","aceEditor","infoTextRef","baseSession","timeoutId","createSnippets","snippetRaw","Array","isArray","map","name","split","c","join","snippetAddRemove","setSnippetAddRemove","keybindingAddRemove","setKeybindingAddRemove","console","log","clearTimeout","onChangeHandler","newCode","commands","description","bindKey","win","mac","exec","editor","setComponentValue","type","getValue","unsecureCopyTextToClipboard","resetEditor","current","innerText","text","classList","add","classToggle","timeout","setTimeout","remove","responseType","snippetManager","require","snippetText","getSession","setSession","snippetsPlusMinus","snippetsPlus","snippetsMinus","snippetsToAdd","snippetsToRemove","langMode","$modeId","pop","error","execCommand","snippetConcatText","snippetMap","snip","content","replace","lineCount","match","length","snippetsSession","createEditSession","cursorPos","row","column","moveCursorTo","renderer","scrollCursorIntoView","Autocomplete","for","keybindingsJSON","JSON","parse","keybindings","completer","keyboardHandler","Object","keys","key","bindkey","stringify","undefined","keybindingsSession","mode","execute","command","containsNumsStr","forEach","warn","executeAll","singleCommand","copyToClipboard","navigator","clipboard","writeText","err","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","resizeObserver","ResizeObserver","entries","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","themeChoice","isDarkTheme","base","themeProp","componentContainerProps","argsString","themeString","snippets","revertedArgs","button","trim","aceEditorProps","aceOptions","partProps","aceProps","buttons","revertedTheme","customButtonTheme","customButtons","menu","menuTheme","info","infoTheme","globalCSS"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled, { createGlobalStyle, css } from \"styled-components/macro\"\nimport React, { useState, useRef, useReducer, useCallback, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean}>`\n  body {\n    margin: 0;\n    padding: 0;\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);  \n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n  useEffect(() => {\n    console.log(\"CodeEditor Mounted>>>>>>>>>>>>>>>>\");\n    return () => {\n      console.log(\"CodeEditor Unmounted<<<<<<<<<<<<<<<<\");\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n  }\n\n  // commands is array containing functions that the editor calls when the bind key is pressed.\n  const commands = { commands: [{\n    name: 'submit', //name for the key binding.\n    description: \"Send 'submit' response\", //description of the command\n    bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"submit keys pressed\")\n      Streamlit.setComponentValue({ type: \"submit\", code: editor.getValue() });\n    }\n  }, {\n    name: 'save-state',\n    description: \"Save state\",\n    bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"save state keys pressed\")\n      setCode(editor.getValue());\n    }\n  }, {\n    name: 'copyAll',\n    description: \"Copy all text to clipboard\",\n    exec: (editor: ace.Ace.Editor) => {\n      unsecureCopyTextToClipboard(editor.getValue());\n    }\n  }, {\n    name: 'reset',\n    exec: () => {\n      resetEditor();\n    }\n  },{\n    name: 'infoMessage',\n    description: \"Display message in info bar\",\n    exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string} ) => {\n      if(infoTextRef.current){\n        infoTextRef.current.innerText = args.text;\n        infoTextRef.current.classList.add(args.classToggle || \"\");\n        if(args.timeout){\n          console.log(\"calling set timeout\")\n          timeoutId = setTimeout(() => {\n            console.log(\"settimeout called\");\n            infoTextRef.current?.classList.remove(args.classToggle || \"\");\n          }, args.timeout);\n        }\n\n      }\n    }\n  },{\n    name: 'response', //name for the key binding.\n    description: \"Send custom response\", //description of the command\n    exec: (editor: ace.Ace.Editor, responseType = \"\") => {\n      console.log(\"respond called:\" + responseType);\n      Streamlit.setComponentValue({ type: responseType, code: code });\n    }\n  },{\n    name: 'editSnippets',\n    description: \"Edit snippets\",\n    bindKey: { win: 'Ctrl-Alt-M', mac: 'Command-Alt-M' },\n    exec: (editor: any) => {\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      console.log(snippetManager);\n      if(baseSession.current){\n        const snippetText = editor.getSession().getValue();\n        editor.setSession(baseSession.current);\n        baseSession.current = null;\n        setCode(editor.getSession().getValue());\n        try{\n          console.log(\"parsing snippet file\")\n          const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n          const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n          const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n          const snippetsToRemove = snippetsMinus;\n          const langMode = editor.getSession().$modeId.split(\"/\").pop();\n          setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n        } catch (error) {\n          editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n        }\n      } else {\n        const langMode = editor.getSession().$modeId.split(\"/\").pop()\n        const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n        const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n        // snippetManager.files[editor.getSession().$modeId].snippetText\n        const lineCount = (snippetText.match(/\\n/g) || []).length;\n        baseSession.current = editor.getSession();\n        const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n        editor.setSession(snippetsSession);\n        const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n        editor.moveCursorTo(cursorPos.row, cursorPos.column);\n        editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n      }\n    }\n  },{\n    name: 'editKeyBindings',\n    description: \"Edit keybindings\",\n    bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n    exec: (editor: any) => {\n      const Autocomplete = ace.require('ace/autocomplete').Autocomplete.for(editor);\n      if(baseSession.current){\n        const keybindingsJSON = editor.getSession().getValue();\n        editor.setSession(baseSession.current);\n        baseSession.current = null;\n        setCode(editor.getSession().getValue());\n        try{\n          console.log(\"parsing keybindings file\");\n          console.log(keybindingsJSON);\n          setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n        } catch (error) {\n          editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n        }\n      } else {\n        const keybindings = {commands: {}, completer: {}};\n        console.log(typeof editor.completer.keyboardHandler.commands);\n        if(editor.completer && editor.completer.keyboardHandler.commands){\n          keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n        }\n        if(editor.commands.commands){\n          keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n        }\n        const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n        baseSession.current = editor.getSession();\n        const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n        editor.setSession(keybindingsSession);\n      }\n    }\n  },{\n    name: 'exitSession', //name for the key binding.\n    bindKey: { win: 'Esc', mac: 'Esc' },\n    description: \"Return to main session (keep changes)\", //description of the command\n    exec: (editor: any) => {\n      if(baseSession.current){\n        const mode = editor.getSession().$modeId.split(\"/\").pop();\n        if (mode === \"snippets\"){\n          editor.execCommand(\"editSnippets\");\n        }\n        else if (mode === \"json\"){\n          editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    }\n  },{\n    name: 'abandonSession', //name for the key binding.\n    bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n    description: \"Return to main session (discard changes)\", //description of the command\n    exec: (editor: any) => {\n      if(baseSession.current){\n        editor.setSession(baseSession.current);\n        baseSession.current = null;\n        setCode(editor.getSession().getValue());\n      }\n    }\n  }]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        console.log(command);\n        console.log(args);\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\";\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        console.log(\"here\");\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"improper command format!\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  }\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const argsString = JSON.stringify(args);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(argsString);\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps, ...revertedArgs['props'] };\n\n    // if(baseSession.current && aceEditor.current){\n    //   aceEditor.current.editor.setSession(baseSession.current);\n    //   console.log(aceEditor.current.editor.getSession().getValue());\n    // }\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         commands={commands.commands} \n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={(value) => onChangeHandler(value)} />\n      );\n  }, [argsString, themeProp, snippets, keybindingAddRemove]);\n\n  const buttons = useMemo(() => {\n    console.log(\"BUTTONS RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedArgs['buttons'] ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [argsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    console.log(\"MENU RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedArgs['menu']} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [argsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    console.log(\"INFO RENDERED\");\n    const revertedArgs = JSON.parse(argsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedArgs['info']} \n       theme={infoTheme} />\n    );\n  }, [argsString, themeString]);\n\n  console.log(\"PARENT RENDERED\");\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css=\".dark {\\n   background-color: #eee;\\n}\" className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      <GlobalCSS isDisabled={disabled} css={componentContainerProps.globalCSS} />\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
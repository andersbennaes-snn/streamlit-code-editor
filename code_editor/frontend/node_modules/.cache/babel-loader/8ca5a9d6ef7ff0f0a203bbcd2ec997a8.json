{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport styled from \"styled-components\";\nimport React from \"react\";\nimport { Play as PlayIcon, Copy as CopyIcon } from \"react-feather\";\nimport AceEditor from \"react-ace\";\nimport { UndoManager } from \"ace-builds\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-streamlit_dark\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n//import \"ace-builds/src-noconflict/ext-keybinding_menu\";\n//import \"ace-builds/src-noconflict/keybinding-vscode\";\n//import { relative } from \"path\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 12,\n  minLines: 12,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\"\n};\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    this.defaultUndoManager = new UndoManager();\n    this.state = {\n      code: \"\",\n      lang: \"python\",\n      isFocused: false,\n      cursorPosition: {\n        row: 0,\n        column: 1\n      },\n      undoManager: this.defaultUndoManager\n    };\n    this.respond = function () {\n      let responseType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"submit\";\n      _this.setState(_this.state);\n      Streamlit.setComponentValue({\n        type: responseType,\n        code: _this.state.code\n      });\n    };\n    this.copyToClipboard = async () => {\n      try {\n        await navigator.clipboard.writeText(this.state.code);\n        console.log(this.state.code);\n      } catch (err) {\n        console.warn('Failed to copy securely -> reverting to unsecure copy');\n        this.unsecureCopyToClipboard();\n      }\n    };\n    this.unsecureCopyToClipboard = () => {\n      const textField = document.createElement('textarea');\n      textField.value = this.state.code;\n      document.body.appendChild(textField);\n      textField.select();\n      document.execCommand('copy');\n      textField.remove();\n    };\n    this.render = () => {\n      // // Arguments that are passed to the plugin in Python are accessible\n      // // via `this.props.args`. Here, we access the \"name\" arg.\n      // const code = this.props.args[\"code\"]\n\n      const aceEditorProps = {\n        ...defaultEditorProps,\n        ...this.props.args['editorProps']\n      };\n      const aceOptions = {\n        ...defaultOptions,\n        ...this.props.args['options']\n      };\n      const partProps = {\n        setOptions: aceOptions,\n        editorProps: aceEditorProps\n      };\n      const aceProps = {\n        ...defaultProps,\n        ...partProps,\n        ...this.props.args['props']\n      };\n      console.log(\"Render----------------\");\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      console.log(theme === null || theme === void 0 ? void 0 : theme.base);\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      // if (theme) {\n      //   // Use the theme object to style our button border. Alternatively, the\n      //   // theme style is defined in CSS vars.\n      //   style.stroke = theme.primaryColor\n      // }\n      style.border = \"none\";\n      style.outline = \"none\";\n      style.top = \"none\";\n      style.bottom = \"none\";\n      style.left = \"none\";\n      style.right = \"none\";\n      style.stroke = theme ? theme.primaryColor : \"rgba(250,250,250,1)\";\n      const StyledCodeEditor = styled.div(() => ({\n        height: \"5rem\",\n        borderRadius: \"4px\",\n        overflow: \"visible\",\n        \":hover\": {\n          button: {\n            opacity: 1,\n            transform: \"scale(1)\",\n            transition: \"none\"\n          }\n        }\n      }));\n\n      // const StyledIconContainer = styled.div(({theme}) => ({\n      //   position: \"relative\",\n      //   left: \"calc(-2.5rem - 0.5rem)\",\n      //   width: \"calc(100% + 2.5rem + 0.5rem)\",\n      //   display: \"flex\",\n      //   alignItems: \"center\",\n      //   overflow: \"visible\",\n      //   \":hover\": {\n      //     a: {\n      //       opacity: 1,\n      //       transform: \"scale(1)\",\n      //       transition: \"none\",\n      //     },\n      //   },\n      // }))\n\n      const StyledButton = styled.button(_ref => {\n        let {\n          theme\n        } = _ref;\n        return {\n          // center icon\n          lineHeight: 0,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          // copied from full screen button\n          transform: \"scale(0)\",\n          transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n          opacity: 0,\n          position: \"absolute\",\n          top: theme.top,\n          left: theme.left,\n          right: theme.right,\n          bottom: theme.bottom,\n          //color: \"rgba(250,250,250,0.6)\",\n          height: \"2.5rem\",\n          width: \"2.5rem\",\n          zIndex: 101,\n          border: \"none\",\n          borderRadius: \"50%\",\n          background: \"none\",\n          \":focus \": {\n            outline: \"none\"\n          },\n          svg: {\n            stroke: \"rgba(250,250,250,0.6)\"\n          },\n          \":hover svg\": {\n            stroke: \"rgba(250,250,250,1)\"\n          }\n        };\n      });\n      const StyledPlayButton = styled(StyledButton)({\n        \":hover svg\": {\n          stroke: style.stroke\n        }\n      });\n      return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n        children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n          theme: {\n            top: \"8px\",\n            right: \"0.3rem\",\n            left: style.left,\n            bottom: style.bottom\n          },\n          onClick: this.copyToClipboard,\n          children: /*#__PURE__*/_jsxDEV(CopyIcon, {\n            size: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(AceEditor, {\n          name: \"UNIQUE_ID_OF_DIV\",\n          mode: this.state.lang,\n          theme: \"streamlit_dark\",\n          keyboardHandler: this.props.args[\"shortcuts\"],\n          value: this.state.code,\n          onBeforeLoad: ace => {\n            console.log(\"~before load~\");\n            //console.log(ace);\n          },\n\n          onLoad: editor => {\n            console.log(\"~on load~\");\n            // console.log(editor);\n            // console.log(typeof(editor));\n\n            editor.getSession().setUndoManager(this.state.undoManager);\n            const cursorPos = this.state.cursorPosition;\n            console.log(cursorPos);\n            editor.moveCursorTo(cursorPos.row, cursorPos.column);\n            editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n            //editor.renderer.setScrollMargin(15,15,0,0);\n            //editor.resize();\n          },\n\n          commands: [{\n            // commands is array of key bindings.\n            name: 'submit',\n            //name for the key binding.\n            bindKey: {\n              win: 'Ctrl-Enter',\n              mac: 'Command-Enter'\n            },\n            //key combination used for the command.\n            exec: editor => {\n              console.log(\"submit keys pressed\");\n\n              // IMPORTANT: The function `setSate()` is required to make sure component state is saved before submit.\n              //            Otherwise changes to the editor and its contents will be lost.\n              this.setState({\n                code: editor.getValue(),\n                cursorPosition: editor.getCursorPosition(),\n                undoManager: editor.getSession().getUndoManager()\n              });\n              console.log(\"state is set, now submitting...\");\n              this.respond(\"submit\"); //function to execute when keys are pressed.\n            }\n          }, {\n            name: 'save-state',\n            bindKey: {\n              win: 'Ctrl-Alt-S',\n              mac: 'Command-Alt-S'\n            },\n            exec: editor => {\n              console.log(\"save state keys pressed\");\n              //console.log(typeof(editor));\n              this.state = {\n                code: editor.getValue(),\n                cursorPosition: editor.getCursorPosition(),\n                undoManager: editor.getSession().getUndoManager(),\n                lang: this.state.lang,\n                isFocused: this.state.isFocused\n              };\n            }\n          }\n          // {\n          //   name: \"showKeyboardShortcuts\",\n          //   bindKey: {win: \"Ctrl-Alt-h\", mac: \"Command-Alt-h\"},\n          //   exec: function(editor) {\n          //         ShortcutMenu.init(editor);\n          //         editor.showKeyboardShortcuts()\n          //       }\n          // }\n          ],\n\n          onBlur: (e, editor) => {\n            console.log(\"Lost focus\");\n            console.log(editor ? \"autosave session success\" : \"autosave session failed\");\n            this.state = {\n              code: (editor === null || editor === void 0 ? void 0 : editor.getValue()) || this.state.code,\n              cursorPosition: (editor === null || editor === void 0 ? void 0 : editor.getCursorPosition()) || this.state.cursorPosition,\n              undoManager: (editor === null || editor === void 0 ? void 0 : editor.getSession().getUndoManager()) || this.state.undoManager,\n              lang: this.state.lang,\n              isFocused: this.state.isFocused\n            };\n          },\n          ...aceProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(StyledPlayButton, {\n          theme: {\n            bottom: \"6px\",\n            right: \"0.3rem\",\n            left: style.left,\n            top: style.top\n          },\n          onClick: () => this.respond(\"submit\"),\n          children: /*#__PURE__*/_jsxDEV(PlayIcon, {\n            size: \"16\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    console.log(\"Mounted--------------\");\n    //The following sets the editor up after this custom component mounts\n    this.setState({\n      code: this.props.args[\"code\"],\n      lang: this.props.args[\"lang\"]\n    });\n    super.componentDidMount();\n  }\n  componentDidUpdate() {\n    console.log(\"Updated--------------\");\n    super.componentDidUpdate();\n  }\n}\n\n//==========================================================================\n// Extra snippets of code\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// /** Click handler for our \"Click Me!\" button. */\n// private onClicked = (): void => {\n//   // Increment state.numClicks, and pass the new value back to\n//   // Streamlit via `Streamlit.setComponentValue`.\n//   this.setState(\n//     prevState => ({ numClicks: prevState.numClicks + 1 }),\n//     () => Streamlit.setComponentValue(this.state.numClicks)\n//   )\n// }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","styled","React","Play","PlayIcon","Copy","CopyIcon","AceEditor","UndoManager","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","MyComponent","defaultUndoManager","state","code","lang","isFocused","cursorPosition","row","column","undoManager","respond","responseType","setState","setComponentValue","type","copyToClipboard","navigator","clipboard","writeText","console","log","err","warn","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","execCommand","remove","render","aceEditorProps","props","args","aceOptions","partProps","aceProps","theme","base","border","outline","top","bottom","left","right","stroke","primaryColor","StyledCodeEditor","div","height","borderRadius","overflow","button","opacity","transform","transition","StyledButton","lineHeight","display","alignItems","justifyContent","position","zIndex","background","svg","StyledPlayButton","ace","editor","getSession","setUndoManager","cursorPos","moveCursorTo","renderer","scrollCursorIntoView","name","bindKey","win","mac","exec","getValue","getCursorPosition","getUndoManager","e","componentDidMount","componentDidUpdate"],"sources":["/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport styled from \"styled-components\"\nimport React, { ReactNode } from \"react\"\nimport { Play as PlayIcon, Copy as CopyIcon } from \"react-feather\"\nimport AceEditor from \"react-ace\";\nimport { UndoManager } from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-streamlit_dark\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\n//import \"ace-builds/src-noconflict/ext-keybinding_menu\";\n//import \"ace-builds/src-noconflict/keybinding-vscode\";\n//import { relative } from \"path\";\n\ninterface State {\n  code: string\n  lang: string\n  isFocused: boolean\n  undoManager: object\n  cursorPosition: object\n}\n\nconst defaultOptions = {\n  maxLines: 12,\n  minLines: 12,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15,15,0,0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width:\"auto\",\n}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  private defaultUndoManager = new UndoManager();\n  public state = {code: \"\", lang: \"python\", isFocused: false, cursorPosition: {row: 0, column: 1}, undoManager: this.defaultUndoManager}\n\n  public respond = (responseType = \"submit\") => {\n    this.setState(this.state);\n    Streamlit.setComponentValue({ type: responseType, code: this.state.code});\n  }\n\n  public copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(this.state.code);\n      console.log(this.state.code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      this.unsecureCopyToClipboard();\n    }\n  }\n\n  private unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = this.state.code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n  \n  public render = (): ReactNode => {\n    // // Arguments that are passed to the plugin in Python are accessible\n    // // via `this.props.args`. Here, we access the \"name\" arg.\n    // const code = this.props.args[\"code\"]\n    \n    const aceEditorProps = {...defaultEditorProps, ...this.props.args['editorProps']};\n    const aceOptions = {...defaultOptions, ...this.props.args['options']}\n    const partProps = {setOptions: aceOptions, editorProps: aceEditorProps}\n    const aceProps = {...defaultProps, ...partProps, ...this.props.args['props']}\n\n\n    console.log(\"Render----------------\");\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    console.log(theme?.base)\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    // if (theme) {\n    //   // Use the theme object to style our button border. Alternatively, the\n    //   // theme style is defined in CSS vars.\n    //   style.stroke = theme.primaryColor\n    // }\n    style.border = \"none\"\n    style.outline = \"none\"\n    style.top = \"none\"\n    style.bottom = \"none\"\n    style.left = \"none\"\n    style.right = \"none\"\n    style.stroke = theme? theme.primaryColor : \"rgba(250,250,250,1)\"\n\n    const StyledCodeEditor = styled.div(() => ({\n      height: \"5rem\",\n      borderRadius: \"4px\",\n      overflow: \"visible\",\n      \":hover\": {\n        button: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transition: \"none\",\n        },\n      },\n    }))\n\n    // const StyledIconContainer = styled.div(({theme}) => ({\n    //   position: \"relative\",\n    //   left: \"calc(-2.5rem - 0.5rem)\",\n    //   width: \"calc(100% + 2.5rem + 0.5rem)\",\n    //   display: \"flex\",\n    //   alignItems: \"center\",\n    //   overflow: \"visible\",\n    //   \":hover\": {\n    //     a: {\n    //       opacity: 1,\n    //       transform: \"scale(1)\",\n    //       transition: \"none\",\n    //     },\n    //   },\n    // }))\n    \n    const StyledButton = styled.button(({theme}) => ({\n      // center icon\n      lineHeight: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      // copied from full screen button\n      transform: \"scale(0)\",\n      transition: \"opacity 300ms 150ms, transform 300ms 150ms\",\n      opacity: 0,\n      position: \"absolute\",\n      top: theme.top,\n      left: theme.left,\n      right: theme.right,\n      bottom: theme.bottom,\n      //color: \"rgba(250,250,250,0.6)\",\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      zIndex: 101,\n      border: \"none\",\n      borderRadius: \"50%\",\n      background: \"none\",\n      \":focus \": {\n        outline: \"none\",\n      },\n      svg: {\n        stroke: \"rgba(250,250,250,0.6)\",\n      }, \n      \":hover svg\": {\n        stroke: \"rgba(250,250,250,1)\",\n      },\n    }));\n\n    const StyledPlayButton = styled(StyledButton)({\n      \":hover svg\": {\n        stroke: style.stroke,\n      },\n    });\n\n    return (\n      <StyledCodeEditor>\n        <StyledButton theme={{top: \"8px\", right: \"0.3rem\", left: style.left, bottom: style.bottom}} onClick={this.copyToClipboard}>\n          <CopyIcon size=\"16\" />\n        </StyledButton>\n        <AceEditor\n          name=\"UNIQUE_ID_OF_DIV\"\n          mode={this.state.lang}\n          theme=\"streamlit_dark\"\n          keyboardHandler={this.props.args[\"shortcuts\"]}\n          value={this.state.code}\n          onBeforeLoad={(ace) => {\n            console.log(\"~before load~\");\n            //console.log(ace);\n          }}\n          onLoad={(editor) => {\n            console.log(\"~on load~\");\n            // console.log(editor);\n            // console.log(typeof(editor));\n\n            editor.getSession().setUndoManager(this.state.undoManager);\n\n            const cursorPos = this.state.cursorPosition;\n            console.log(cursorPos);\n            editor.moveCursorTo(cursorPos.row, cursorPos.column);\n            editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n            //editor.renderer.setScrollMargin(15,15,0,0);\n            //editor.resize();\n          }}\n          commands={[{   // commands is array of key bindings.\n            name: 'submit', //name for the key binding.\n            bindKey: {win: 'Ctrl-Enter', mac: 'Command-Enter'}, //key combination used for the command.\n            exec: (editor) => {\n               console.log(\"submit keys pressed\")\n\n               // IMPORTANT: The function `setSate()` is required to make sure component state is saved before submit.\n               //            Otherwise changes to the editor and its contents will be lost.\n               this.setState({code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager()});\n               console.log(\"state is set, now submitting...\")\n               this.respond(\"submit\"); //function to execute when keys are pressed.\n            }}, {\n            name: 'save-state',\n            bindKey: {win: 'Ctrl-Alt-S', mac: 'Command-Alt-S'},\n            exec: (editor) => {\n               console.log(\"save state keys pressed\")\n               //console.log(typeof(editor));\n               this.state = {code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager(), lang: this.state.lang, isFocused: this.state.isFocused};\n            }}, \n          // {\n          //   name: \"showKeyboardShortcuts\",\n          //   bindKey: {win: \"Ctrl-Alt-h\", mac: \"Command-Alt-h\"},\n          //   exec: function(editor) {\n          //         ShortcutMenu.init(editor);\n          //         editor.showKeyboardShortcuts()\n          //       }\n          // }\n          ]}\n          onBlur={(e, editor) => {\n            console.log(\"Lost focus\")           \n            console.log(editor? \"autosave session success\" : \"autosave session failed\");\n\n            this.state = {code: editor?.getValue() || this.state.code, cursorPosition: editor?.getCursorPosition() || this.state.cursorPosition, undoManager: editor?.getSession().getUndoManager() || this.state.undoManager, lang: this.state.lang, isFocused: this.state.isFocused};\n          }}\n          {...aceProps}\n        />\n        <StyledPlayButton theme={{bottom: \"6px\", right: \"0.3rem\", left: style.left, top: style.top}} onClick={() => this.respond(\"submit\")}>\n          <PlayIcon size=\"16\" />\n        </StyledPlayButton>\n      </StyledCodeEditor>\n    )\n  }\n\n  public componentDidMount(): void {\n    console.log(\"Mounted--------------\");\n    //The following sets the editor up after this custom component mounts\n    this.setState({code: this.props.args[\"code\"], lang: this.props.args[\"lang\"]});\n    super.componentDidMount();\n  }\n  \n  public componentDidUpdate(): void {\n    console.log(\"Updated--------------\");\n    super.componentDidUpdate();\n  }\n}\n\n  //==========================================================================\n  // Extra snippets of code\n  //   /** Blur handler for our \"Click Me!\" button. */\n  //   private _onBlur = (): void => {\n  //     this.setState({ isFocused: false })\n  //   }\n  // }\n  \n    // /** Click handler for our \"Click Me!\" button. */\n    // private onClicked = (): void => {\n    //   // Increment state.numClicks, and pass the new value back to\n    //   // Streamlit via `Streamlit.setComponentValue`.\n    //   this.setState(\n    //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n    //     () => Streamlit.setComponentValue(this.state.numClicks)\n    //   )\n    // }\n  \n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default withStreamlitConnection(MyComponent)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
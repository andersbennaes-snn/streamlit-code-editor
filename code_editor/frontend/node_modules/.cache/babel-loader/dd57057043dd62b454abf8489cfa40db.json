{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AceEditor from \"react-ace\";\nimport { UndoManager } from \"ace-builds\";\n//import UndoManager from \"react-ace\"\n\nimport styled from \"styled-components\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-one_dark\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/keybinding-vscode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// /** Focus handler for our \"Click Me!\" button. */\n// function onChange(value: string, event?: any){\n//   console.log(\"change\", value);\n// }\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.defaultUndoManager = new UndoManager();\n    this.state = {\n      code: \"\",\n      lang: \"python\",\n      isFocused: false,\n      cursorPosition: {\n        row: 0,\n        column: 1\n      },\n      undoManager: this.defaultUndoManager\n    };\n    this.render = () => {\n      // // Arguments that are passed to the plugin in Python are accessible\n      // // via `this.props.args`. Here, we access the \"name\" arg.\n      // const code = this.props.args[\"code\"]\n\n      // // Streamlit sends us a theme object via props that we can use to ensure\n      // // that our component has visuals that match the active theme in a\n      // // streamlit app.\n      // const { theme } = this.props\n      // const style: React.CSSProperties = {}\n      //\n      // // Maintain compatibility with older versions of Streamlit that don't send\n      // // a theme object.\n      // if (theme) {\n      //   // Use the theme object to style our button border. Alternatively, the\n      //   // theme style is defined in CSS vars.\n      //   const borderStyling = `1px solid ${\n      //     this.state.isFocused ? theme.primaryColor : \"gray\"\n      //   }`\n      //   style.border = borderStyling\n      //   style.outline = borderStyling\n      // }\n\n      console.log(\"render\");\n      const StyledCodeEditor = styled.div(_ref => {\n        let {\n          theme\n        } = _ref;\n        return {\n          height: \"5rem\",\n          borderRadius: \"4px\"\n        };\n      });\n      return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n        children: /*#__PURE__*/_jsxDEV(AceEditor, {\n          mode: \"python\",\n          theme: \"one_dark\",\n          keyboardHandler: \"vscode\",\n          value: this.state.code,\n          cursorStart: 1,\n          fontSize: 14,\n          width: \"auto\",\n          onBeforeLoad: editor => {\n            console.log(\"Before load:\");\n            console.log(editor);\n            console.log(typeof editor);\n          },\n          onLoad: editor => {\n            console.log(\"On load:\");\n            console.log(editor);\n            console.log(typeof editor);\n            editor.getSession().setUndoManager(this.state.undoManager);\n            const cursorPos = this.state.cursorPosition;\n            console.log(cursorPos);\n            editor.moveCursorTo(cursorPos.row, cursorPos.column);\n            editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n          },\n          name: \"UNIQUE_ID_OF_DIV\",\n          scrollMargin: [10, 10, 0, 0],\n          editorProps: {\n            $blockScrolling: true\n          },\n          setOptions: {\n            maxLines: 10,\n            minLines: 10,\n            fontFamily: '\"Source Code Pro\", monospace',\n            cursorStyle: \"smooth\",\n            displayIndentGuides: false,\n            wrap: true,\n            highlightActiveLine: true,\n            showPrintMargin: false,\n            showLineNumbers: false,\n            foldStyle: \"markbegin\",\n            enableLiveAutocompletion: true\n          },\n          commands: [{\n            // commands is array of key bindings.\n            name: 'submit',\n            //name for the key binding.\n            bindKey: {\n              win: 'Ctrl-Enter',\n              mac: 'Command-Enter'\n            },\n            //key combination used for the command.\n            exec: editor => {\n              console.log(\"submit keys pressed\");\n              this.setState({\n                code: editor.getValue(),\n                cursorPosition: editor.getCursorPosition(),\n                undoManager: editor.getSession().getUndoManager()\n              });\n              Streamlit.setComponentValue({\n                type: \"submit\",\n                code: this.state.code\n              });\n            } //function to execute when keys are pressed.\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    console.log(\"mounted\");\n    this.setState({\n      code: this.props.args[\"code\"]\n    });\n    super.componentDidMount();\n  }\n  componentDidUpdate() {\n    console.log(\"updated\");\n    super.componentDidUpdate();\n  }\n}\n\n//==========================================================================\n// Extra snippets of code\n//   /** Blur handler for our \"Click Me!\" button. */\n//   private _onBlur = (): void => {\n//     this.setState({ isFocused: false })\n//   }\n// }\n\n// /** Click handler for our \"Click Me!\" button. */\n// private onClicked = (): void => {\n//   // Increment state.numClicks, and pass the new value back to\n//   // Streamlit via `Streamlit.setComponentValue`.\n//   this.setState(\n//     prevState => ({ numClicks: prevState.numClicks + 1 }),\n//     () => Streamlit.setComponentValue(this.state.numClicks)\n//   )\n// }\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AceEditor","UndoManager","styled","MyComponent","defaultUndoManager","state","code","lang","isFocused","cursorPosition","row","column","undoManager","render","console","log","StyledCodeEditor","div","theme","height","borderRadius","editor","getSession","setUndoManager","cursorPos","moveCursorTo","renderer","scrollCursorIntoView","$blockScrolling","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","enableLiveAutocompletion","name","bindKey","win","mac","exec","setState","getValue","getCursorPosition","getUndoManager","setComponentValue","type","componentDidMount","props","args","componentDidUpdate"],"sources":["/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode , createRef} from \"react\"\nimport AceEditor from \"react-ace\";\nimport { UndoManager } from \"ace-builds\";\n//import UndoManager from \"react-ace\"\n\nimport styled from \"styled-components\"\n\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/theme-one_dark\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/keybinding-vscode\";\n\ninterface State {\n  code: string\n  lang: string\n  isFocused: boolean\n  undoManager: object\n  cursorPosition: object\n}\n\n// /** Focus handler for our \"Click Me!\" button. */\n// function onChange(value: string, event?: any){\n//   console.log(\"change\", value);\n// }\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  private defaultUndoManager = new UndoManager();\n  public state = {code: \"\", lang: \"python\", isFocused: false, cursorPosition: {row: 0, column: 1}, undoManager: this.defaultUndoManager}\n\n  //reactAceComponent = this.refs.reactAceComponent;\n\n\n  public render = (): ReactNode => {\n    // // Arguments that are passed to the plugin in Python are accessible\n    // // via `this.props.args`. Here, we access the \"name\" arg.\n    // const code = this.props.args[\"code\"]\n\n    // // Streamlit sends us a theme object via props that we can use to ensure\n    // // that our component has visuals that match the active theme in a\n    // // streamlit app.\n    // const { theme } = this.props\n    // const style: React.CSSProperties = {}\n    //\n    // // Maintain compatibility with older versions of Streamlit that don't send\n    // // a theme object.\n    // if (theme) {\n    //   // Use the theme object to style our button border. Alternatively, the\n    //   // theme style is defined in CSS vars.\n    //   const borderStyling = `1px solid ${\n    //     this.state.isFocused ? theme.primaryColor : \"gray\"\n    //   }`\n    //   style.border = borderStyling\n    //   style.outline = borderStyling\n    // }\n\n    console.log(\"render\");\n    const StyledCodeEditor = styled.div(({ theme }) => ({\n      height: \"5rem\",\n      borderRadius: \"4px\"\n    }))\n\n    return (\n      <StyledCodeEditor>\n        <AceEditor\n          mode=\"python\"\n          theme=\"one_dark\"\n          keyboardHandler=\"vscode\"\n          value={this.state.code}\n          cursorStart={1}\n          fontSize={14} \n          width=\"auto\"\n          onBeforeLoad={(editor: object) => {\n            console.log(\"Before load:\");\n            console.log(editor);\n            console.log(typeof(editor));\n          }}\n          onLoad={(editor: any) => {\n            console.log(\"On load:\");\n            console.log(editor);\n            console.log(typeof(editor));\n\n            editor.getSession().setUndoManager(this.state.undoManager);\n\n            const cursorPos = this.state.cursorPosition;\n            console.log(cursorPos);\n            editor.moveCursorTo(cursorPos.row, cursorPos.column);\n            editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n          }}\n          name=\"UNIQUE_ID_OF_DIV\"\n          scrollMargin={[10,10,0,0]}\n          editorProps={{ \n            $blockScrolling: true\n          }}\n          setOptions={{\n            maxLines: 10,\n            minLines: 10,\n            fontFamily: '\"Source Code Pro\", monospace',\n            cursorStyle: \"smooth\",\n            displayIndentGuides: false,\n            wrap: true,\n            highlightActiveLine: true,\n            showPrintMargin: false,\n            showLineNumbers: false,\n            foldStyle: \"markbegin\",\n            enableLiveAutocompletion: true\n          }}\n          commands={[{   // commands is array of key bindings.\n            name: 'submit', //name for the key binding.\n            bindKey: {win: 'Ctrl-Enter', mac: 'Command-Enter'}, //key combination used for the command.\n            exec: (editor) => {\n               console.log(\"submit keys pressed\")\n               this.setState({code: editor.getValue(), cursorPosition: editor.getCursorPosition(), undoManager: editor.getSession().getUndoManager()});\n               Streamlit.setComponentValue({ type: \"submit\", code: this.state.code})}  //function to execute when keys are pressed.\n          }]}\n        />\n      </StyledCodeEditor>\n    )\n  }\n\n  public componentDidMount(): void {\n    console.log(\"mounted\");\n    this.setState({code: this.props.args[\"code\"]});\n    super.componentDidMount();\n  }\n  \n  public componentDidUpdate(): void {\n    console.log(\"updated\");\n    super.componentDidUpdate();\n  }\n}\n\n  //==========================================================================\n  // Extra snippets of code\n  //   /** Blur handler for our \"Click Me!\" button. */\n  //   private _onBlur = (): void => {\n  //     this.setState({ isFocused: false })\n  //   }\n  // }\n  \n    // /** Click handler for our \"Click Me!\" button. */\n    // private onClicked = (): void => {\n    //   // Increment state.numClicks, and pass the new value back to\n    //   // Streamlit via `Streamlit.setComponentValue`.\n    //   this.setState(\n    //     prevState => ({ numClicks: prevState.numClicks + 1 }),\n    //     () => Streamlit.setComponentValue(this.state.numClicks)\n    //   )\n    // }\n  \n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\nexport default withStreamlitConnection(MyComponent)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
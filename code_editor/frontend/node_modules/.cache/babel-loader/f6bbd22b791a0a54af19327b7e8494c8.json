{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport styled from \"styled-components\";\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport { Editor } from \"./editor\";\nimport { Menu as ButtonMenu, Set as ButtonSet } from \"./button-menu\";\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true\n};\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n};\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\"\n};\nconst StyledCodeEditor = styled.div`\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n_c = StyledCodeEditor;\nconst CodeEditor = _ref => {\n  _s();\n  let {\n    args,\n    width,\n    disabled,\n    theme\n  } = _ref;\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  const aceEditor = useRef(null);\n  useEffect(() => {\n    console.log(\"CodeEditor Mounted>>>>>>>>>>>>>>>>\");\n    return () => {\n      console.log(\"CodeEditor Unmounted<<<<<<<<<<<<<<<<\");\n    };\n  }, []);\n  const onChangeHandler = newCode => {\n    setCode(newCode);\n  };\n\n  // commands is array containing functions that the editor calls when the bind key is pressed.\n  const commands = {\n    commands: [{\n      name: 'submit',\n      //name for the key binding.\n      bindKey: {\n        win: 'Ctrl-Enter',\n        mac: 'Command-Enter'\n      },\n      //key combination used for the command.\n      exec: editor => {\n        console.log(\"submit keys pressed\");\n        Streamlit.setComponentValue({\n          type: \"submit\",\n          code: editor.getValue()\n        });\n      }\n    }, {\n      name: 'save-state',\n      bindKey: {\n        win: 'Ctrl-Alt-S',\n        mac: 'Command-Alt-S'\n      },\n      exec: editor => {\n        console.log(\"save state keys pressed\");\n        setCode(editor.getValue());\n      }\n    }, {\n      name: 'copyAll',\n      exec: editor => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    }, {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    }]\n  };\n  const execute = function (command) {\n    var _aceEditor$current;\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    const editor = (_aceEditor$current = aceEditor.current) === null || _aceEditor$current === void 0 ? void 0 : _aceEditor$current.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command);\n      } else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      } else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        args.values.array.forEach(element => {\n          containsNumsStr = typeof element === \"string\" || typeof element === \"number\" ? containsNumsStr : false;\n        });\n        if (args.values.length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      } else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  };\n  const executeAll = function (commands) {\n    let sendResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    commands.forEach(command => {\n      if (Array.isArray(command)) {\n        typeof command[0] === \"string\" ? execute(command[0], command[1]) : console.warn(\"improper command format!\");\n      } else if (typeof command === \"string\") {\n        execute(command);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n    if (sendResponse) {\n      respond(sendResponse);\n    }\n  };\n  const respond = function () {\n    let responseType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"submit\";\n    console.log(\"respond called:\" + responseType);\n    Streamlit.setComponentValue({\n      type: responseType,\n      code: code\n    });\n  };\n  const resetEditor = () => {\n    setCode(args['code']);\n  };\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  };\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const unsecureCopyTextToClipboard = text => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  };\n  const resizeObserver = new ResizeObserver(entries => {\n    var _entries$0$contentBox;\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme ? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme ? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme ? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  };\n  const themeProp = themeChoice();\n  const codeEditorProps = args[\"rootProps\"];\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const aceEditorProps = {\n      ...defaultEditorProps,\n      ...args['editorProps']\n    };\n    const aceOptions = {\n      ...defaultOptions,\n      ...args['options']\n    };\n    const partProps = {\n      setOptions: aceOptions,\n      editorProps: aceEditorProps\n    };\n    const aceProps = {\n      ...defaultProps,\n      ...partProps,\n      ...args['props']\n    };\n    return /*#__PURE__*/_jsxDEV(Editor, {\n      editorRef: aceEditor,\n      code: code,\n      lang: args['lang'],\n      theme: themeProp,\n      shortcuts: args['shortcuts'],\n      snippets: args['snippets'],\n      commands: commands.commands,\n      keybindings: args['keybindings'],\n      props: aceProps,\n      onChange: value => onChangeHandler(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this);\n  }, [args.lang, args.shortcuts, args.snippets, args.props, args.editorProps, args.options, themeProp]);\n  const buttons = useMemo(() => {\n    var _args$buttons;\n    console.log(\"BUTTONS RENDERED\");\n    const customButtonTheme = theme !== null && theme !== void 0 ? theme : {};\n    const customButtons = {\n      buttons: (_args$buttons = args['buttons']) !== null && _args$buttons !== void 0 ? _args$buttons : [],\n      name: \"customButtons\"\n    };\n    return /*#__PURE__*/_jsxDEV(ButtonSet, {\n      buttonGroup: customButtons,\n      theme: customButtonTheme,\n      themeProp: themeProp,\n      executeAll: (commands, response) => executeAll(commands, response)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this);\n  }, [args.buttons, theme, themeProp]);\n  const menu = useMemo(() => {\n    console.log(\"MENU RENDERED\");\n    const menuTheme = theme !== null && theme !== void 0 ? theme : {};\n    return /*#__PURE__*/_jsxDEV(ButtonMenu, {\n      menu: args['menu'],\n      theme: menuTheme,\n      themeProp: themeProp,\n      executeAll: (commands, response) => executeAll(commands, response)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this);\n  }, [args.menu, theme, themeProp]);\n  console.log(\"PARENT RENDERED\");\n  return /*#__PURE__*/_jsxDEV(StyledCodeEditor, {\n    ref: observe,\n    style: {\n      ...codeEditorProps,\n      width: \"100%\"\n    },\n    className: \"streamlit_code-editor\",\n    children: [editor, buttons, menu]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"f9DOplHLLHVOfedKGlkNQvdQ5rE=\");\n_c2 = CodeEditor;\nexport default _c3 = withStreamlitConnection(CodeEditor);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledCodeEditor\");\n$RefreshReg$(_c2, \"CodeEditor\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","styled","React","useState","useRef","useEffect","useMemo","Editor","Menu","ButtonMenu","Set","ButtonSet","defaultOptions","maxLines","minLines","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","style","tabSize","width","StyledCodeEditor","div","CodeEditor","args","disabled","theme","code","setCode","aceEditor","console","log","onChangeHandler","newCode","commands","name","bindKey","win","mac","exec","editor","setComponentValue","type","getValue","unsecureCopyTextToClipboard","resetEditor","execute","command","current","execCommand","Array","isArray","containsNumsStr","values","array","forEach","element","length","warn","executeAll","sendResponse","respond","responseType","copyToClipboard","navigator","clipboard","writeText","err","unsecureCopyToClipboard","textField","document","createElement","value","body","appendChild","select","remove","text","resizeObserver","ResizeObserver","entries","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","themeChoice","isDarkTheme","base","themeProp","codeEditorProps","aceEditorProps","aceOptions","partProps","aceProps","lang","shortcuts","snippets","props","options","buttons","customButtonTheme","customButtons","response","menu","menuTheme"],"sources":["/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx"],"sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled from \"styled-components\"\nimport React, { useState, useRef, useReducer, useCallback, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from \"./editor\";\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup } from \"./button-menu\"\nimport debounce from \"./debouncer\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  maxLines: 20,\n  minLines: 20,\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: true,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  editorProps: defaultEditorProps,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n}\n\nconst StyledCodeEditor = styled.div`\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);  \n\n  const aceEditor = useRef<AceEditor>(null);\n\n  useEffect(() => {\n    console.log(\"CodeEditor Mounted>>>>>>>>>>>>>>>>\");\n    return () => {\n      console.log(\"CodeEditor Unmounted<<<<<<<<<<<<<<<<\");\n    }\n  }, []);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n  }\n\n  // commands is array containing functions that the editor calls when the bind key is pressed.\n  const commands = { commands: [{\n    name: 'submit', //name for the key binding.\n    bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"submit keys pressed\")\n      Streamlit.setComponentValue({ type: \"submit\", code: editor.getValue() });\n    }\n  }, {\n    name: 'save-state',\n    bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n    exec: (editor: ace.Ace.Editor) => {\n      console.log(\"save state keys pressed\")\n      setCode(editor.getValue());\n    }\n  }, {\n    name: 'copyAll',\n    exec: (editor: ace.Ace.Editor) => {\n      unsecureCopyTextToClipboard(editor.getValue());\n    }\n  }, {\n    name: 'reset',\n    exec: () => {\n      resetEditor();\n    }\n  }]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        args.values.array.forEach((element: any) => {\n          containsNumsStr = (typeof element === \"string\" || typeof element === \"number\") ? containsNumsStr : false;\n        });\n        if (args.values.length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`failed to execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[], sendResponse = \"\") => {\n    commands.forEach(command => {\n      if (Array.isArray(command)) {\n        typeof command[0] === \"string\" ? execute(command[0], command[1]) : console.warn(\"improper command format!\");\n      } else if (typeof command === \"string\") {\n        execute(command);\n      } else {\n        console.warn(\"failed to execute command!\");\n      }\n    });\n\n    if (sendResponse) {\n      respond(sendResponse);\n    }\n  }\n\n  const respond = (responseType = \"submit\") => {\n    console.log(\"respond called:\" + responseType);\n    Streamlit.setComponentValue({ type: responseType, code: code });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  /**\n  * This method for copying to clipboard uses the \n  * {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API}\n  * which makes use of the asynchronous clipboard read and write methods \n  * and requires that the user grant the web site or app permission to\n  * access the clipboard. The latter can be an issue for streamlit because\n  * it uses http instead of https. \n  * */\n  const copyToClipboard = async (): Promise<void> => {\n    try {\n      await navigator.clipboard.writeText(code);\n      console.log(code);\n    } catch (err) {\n      console.warn('Failed to copy securely -> reverting to unsecure copy');\n      unsecureCopyToClipboard();\n    }\n  }\n\n  /**\n  * This method for copying to clipboard uses .execCommand method\n  * which is depreciated but still supported by most browsers. This\n  * is the same approach for copying that Streamlit's built in CodeBlock\n  * component uses.\n  **/\n  const unsecureCopyToClipboard = () => {\n    const textField = document.createElement('textarea');\n    textField.value = aceEditor.current ? aceEditor.current.editor.getValue() : code;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   * @returns {string} themeProp\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const codeEditorProps = args[\"rootProps\"];\n\n  /**\n   * This is the editor component that is rendered. It is memoized so that it is only re-rendered when\n   * the args change. This is important because we should account for the possibility that the editor \n   * is being changed at any given moment. Forced re-renders due to the parent component re-rendering\n   * can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    console.log(\"EDITOR RENDERED\");\n    const aceEditorProps = { ...defaultEditorProps, ...args['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...args['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps, ...args['props'] };\n    return (\n        <Editor editorRef={aceEditor} code={code} lang={args['lang']} theme={themeProp} shortcuts={args['shortcuts']} snippets={args['snippets']} commands={commands.commands} keybindings={args['keybindings']} props={aceProps} onChange={(value) => onChangeHandler(value)} />\n      );\n  }, [args.lang, args.shortcuts, args.snippets, args.props, args.editorProps, args.options, themeProp]);\n\n  const buttons = useMemo(() => {\n    console.log(\"BUTTONS RENDERED\");\n    const customButtonTheme = theme ?? {};\n    const customButtons = {buttons: (args['buttons'] ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet buttonGroup={customButtons} theme={customButtonTheme} themeProp={themeProp} executeAll={(commands, response) => executeAll(commands, response)} />\n    );\n  }, [args.buttons, theme, themeProp]);\n\n  const menu = useMemo(() => {\n    console.log(\"MENU RENDERED\");\n    const menuTheme = theme ?? {};\n    return (\n      <ButtonMenu menu={args['menu']} theme={menuTheme} themeProp={themeProp} executeAll={(commands, response) => executeAll(commands, response)} />\n    );\n  }, [args.menu, theme, themeProp]);\n\n  console.log(\"PARENT RENDERED\");\n\n  return (\n    <StyledCodeEditor ref={observe} style={{ ...codeEditorProps, width: \"100%\" }} className=\"streamlit_code-editor\">\n      {editor}\n      {buttons}\n      {menu}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)"],"mappings":"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"},"metadata":{},"sourceType":"module"}
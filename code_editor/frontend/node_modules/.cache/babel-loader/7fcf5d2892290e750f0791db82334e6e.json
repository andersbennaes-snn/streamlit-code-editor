{"ast":null,"code":"import _objectSpread from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteStream } from '../../io/stream';\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n  var writer = new this(writableStrategy);\n  var reader = new AsyncByteStream(writer);\n  var readable = new ReadableStream({\n    type: 'bytes',\n    cancel: function cancel() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return reader.cancel();\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    pull: function pull(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return next(controller);\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    start: function start(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return next(controller);\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    }\n  }, _objectSpread({\n    'highWaterMark': Math.pow(2, 14)\n  }, readableStrategy));\n  return {\n    writable: new WritableStream(writer, writableStrategy),\n    readable: readable\n  };\n  function next(_x) {\n    return _next.apply(this, arguments);\n  }\n  function _next() {\n    _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(controller) {\n      var buf, size;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            buf = null;\n            size = controller.desiredSize;\n          case 2:\n            _context4.next = 4;\n            return reader.read(size || null);\n          case 4:\n            if (!(buf = _context4.sent)) {\n              _context4.next = 10;\n              break;\n            }\n            controller.enqueue(buf);\n            if (!(size != null && (size -= buf.byteLength) <= 0)) {\n              _context4.next = 8;\n              break;\n            }\n            return _context4.abrupt(\"return\");\n          case 8:\n            _context4.next = 2;\n            break;\n          case 10:\n            controller.close();\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _next.apply(this, arguments);\n  }\n}","map":{"version":3,"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAASA,eAAe,QAAQ,iBAAiB;AAGjD;AACA,OAAM,SAAUC,iCAAiC,CAE7CC,gBAA6E,EAC7EC,gBAAyD;EAGzD,IAAMC,MAAM,GAAG,IAAI,IAAI,CAAIF,gBAAgB,CAAC;EAC5C,IAAMG,MAAM,GAAG,IAAIL,eAAe,CAACI,MAAM,CAAC;EAC1C,IAAME,QAAQ,GAAG,IAAIC,cAAc,CAAC;IAChCC,IAAI,EAAE,OAAO;IACPC,MAAM;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAAWJ,MAAM,CAACI,MAAM,EAAE;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAE,CAAC;IACnCC,IAAI,gBAACC,UAAU;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAAUC,IAAI,CAACD,UAAU,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAE,CAAC;IAC5CE,KAAK,iBAACF,UAAU;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OAAUC,IAAI,CAACD,UAAU,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAE;GACrD;IAAI,eAAe,WAAE,CAAC,EAAI,EAAE;EAAA,GAAKR,gBAAgB,EAAG;EAErD,OAAO;IAAEW,QAAQ,EAAE,IAAIC,cAAc,CAACX,MAAM,EAAEF,gBAAgB,CAAC;IAAEI,QAAQ,EAARA;EAAQ,CAAE;EAAC,SAE7DM,IAAI;IAAA;EAAA;EAAA;IAAA,mEAAnB,kBAAoBD,UAAuD;MAAA;MAAA;QAAA;UAAA;YACnEK,GAAG,GAAsB,IAAI;YAC7BC,IAAI,GAAGN,UAAU,CAACO,WAAW;UAAA;YAAA;YAAA,OACdb,MAAM,CAACc,IAAI,CAACF,IAAI,IAAI,IAAI,CAAC;UAAA;YAAA,MAArCD,GAAG;cAAA;cAAA;YAAA;YACNL,UAAU,CAACS,OAAO,CAACJ,GAAG,CAAC;YAAC,MACpBC,IAAI,IAAI,IAAI,IAAI,CAACA,IAAI,IAAID,GAAG,CAACK,UAAU,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAErDV,UAAU,CAACW,KAAK,EAAE;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACtB;IAAA;EAAA;AACL","names":["AsyncByteStream","recordBatchWriterThroughDOMStream","writableStrategy","readableStrategy","writer","reader","readable","ReadableStream","type","cancel","pull","controller","next","start","writable","WritableStream","buf","size","desiredSize","read","enqueue","byteLength","close"],"sources":["io/whatwg/writer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
[{"/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/code_editor/frontend/src/index.tsx":"1","/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx":"2","/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/index.tsx":"3","/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx":"4","/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/editor.tsx":"5","/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/button-menu.tsx":"6","/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/index.tsx":"7","/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/CodeEditor.tsx":"8","/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/editor.tsx":"9","/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/button-menu.tsx":"10","/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/index.tsx":"11","/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/CodeEditor.tsx":"12","/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/editor.tsx":"13","/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/button-menu.tsx":"14"},{"size":214,"mtime":1676344069569,"results":"15","hashOfConfig":"16"},{"size":12525,"mtime":1676353501448,"results":"17","hashOfConfig":"16"},{"size":267,"mtime":1677776228527,"results":"18","hashOfConfig":"19"},{"size":24159,"mtime":1678121233930,"results":"20","hashOfConfig":"19"},{"size":3844,"mtime":1678119451800,"results":"21","hashOfConfig":"19"},{"size":7021,"mtime":1678119432350,"results":"22","hashOfConfig":"19"},{"size":267,"mtime":1678136851000,"results":"23","hashOfConfig":"24"},{"size":24638,"mtime":1678307974362,"results":"25","hashOfConfig":"24"},{"size":3844,"mtime":1678136853000,"results":"26","hashOfConfig":"24"},{"size":7018,"mtime":1678253098082,"results":"27","hashOfConfig":"24"},{"size":267,"mtime":1685168758334,"results":"28","hashOfConfig":"29"},{"size":25250,"mtime":1685179257104,"results":"30","hashOfConfig":"29"},{"size":3844,"mtime":1685175359064,"results":"31","hashOfConfig":"29"},{"size":7007,"mtime":1685175159824,"results":"32","hashOfConfig":"29"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16yivem",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1b0swck",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vuiuy2",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1f5p2vn",{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/code_editor/frontend/src/index.tsx",[],"/mnt/c/Users/anasb/Google Drive/Colab Notebooks/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx",[],"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/index.tsx",[],["69","70"],"/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/CodeEditor.tsx",["71","72","73","74","75","76"],"import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled, { createGlobalStyle } from \"styled-components/macro\"\nimport React, { useState, useRef, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 16,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean, inject: string}>`\n  html {\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    cursor: ${props => props.isDisabled? \"not-allowed\": \"auto\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n  body {\n    margin: 0;\n    padding: 0;\n  }\n  ${props => props.inject}\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n  const keepFocus = useRef<boolean>(false);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if(aceEditor.current && keepFocus.current){\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if(aceEditor.current && args['focus']){\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n  }\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = { commands: [\n    {\n      name: 'submit', //name for the key binding.\n      description: \"Send 'submit' response\", //description of the command\n      bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({text: editor.getValue(), type: \"submit\", lang: outgoingMode });\n      }\n    },\n    {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n      exec: (editor: ace.Ace.Editor) => {\n        setCode(editor.getValue());\n      }\n    },\n    {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: (editor: ace.Ace.Editor) => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    },\n    {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    },\n    {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    },\n    {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor: ace.Ace.Editor, lang: string) => {\n          if(lang && typeof lang === \"string\")\n            editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    },\n    {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor: any, shortcuts?: string) => {\n        if(shortcuts && typeof shortcuts === \"string\")\n          editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);\n        else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    },\n    {\n      name: 'toggleKeyboardShortcuts',\n      exec: (editor: ace.Ace.Editor) => {\n        if(!document.getElementById('kbshortcutmenu'))\n          editor.execCommand('showKeyboardShortcuts');\n        else \n          editor.execCommand('simulateKeyPress', {type:\"keydown\", keyCode: 27});\n      }\n    },\n    {\n      name: 'simulateKeyPress',\n      exec: (editor: ace.Ace.Editor, args: {type: string, key?: string, keyCode?: number}) => {\n        if(args.key)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'key': args.key})); \n        else if(args.keyCode)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'keyCode': args.keyCode})); \n      }\n    },\n    {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string} ) => {\n        if(infoTextRef.current){\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if(args.timeout){\n            timeoutId = setTimeout(() => {\n              infoTextRef.current?.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    },\n    {\n      name: 'response', //name for the key binding.\n      description: \"Send custom response\", //description of the command\n      exec: (editor: any, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({ text: code, type: responseType, lang: outgoingMode });\n      }\n    },\n    {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: { win: 'Ctrl-Alt-M', mac: 'Command-Alt-M' },\n      exec: (editor: any) => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"snippets\"){\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if(outgoingMode === \"snippets\"){}\n            try{\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop()\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    },\n    {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n      exec: (editor: any) => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"json\"){\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try{\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const keybindings = {commands: {}, completer: {}};\n          if(editor.completer && editor.completer.keyboardHandler.commands){\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n          }\n          if(editor.commands.commands){\n            keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    },\n    {\n      name: 'exitSession', //name for the key binding.\n      bindKey: { win: 'Esc', mac: 'Esc' },\n      description: \"Return to main session (keep changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\")\n            editor.execCommand(\"editSnippets\");\n          else if (mode === \"json\")\n            editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    },\n    {\n      name: 'abandonSession', //name for the key binding.\n      bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n      description: \"Return to main session (discard changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    },\n    {\n      name: 'classART', //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, type: string, class: string}) => {\n        if(args.targetQueryString && args.type && args.class){\n          switch(args.type){\n            case \"add\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    {\n      name: 'conditionalExecute', //name for the key binding.\n      description: \"Execute command if element exists\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, command: any[], condition?: boolean}) => {\n        if(args.targetQueryString && args.command && Array.isArray(args.command)){\n          if(!(args.condition ?? true) === !document.querySelector(args.targetQueryString)){\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    }\n  ]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const {info: infoArg, menu: menuArg, focus: focusArg, ...rest} = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n\n    let heightProps = {};\n    if(typeof revertedArgs['height'] === \"number\") \n      heightProps = {minLines: 1, maxLines: revertedArgs['height']};\n    else if(typeof revertedArgs['height'] === \"string\") \n      heightProps = {height: revertedArgs['height']};\n    else if(Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) \n      heightProps = {minLines: revertedArgs['height'][0], maxLines: revertedArgs['height'][1]};\n\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps,...heightProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         commands={commands.commands} \n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={(value) => onChangeHandler(value)} />\n      );\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove]);\n\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedButtons ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [buttonArgsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedMenu} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [menuArgsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedInfo} \n       theme={infoTheme} />\n    );\n  }, [infoArgsString, themeString]);\n\n  const globalCSS = useMemo(() => {\n    return (\n      <GlobalCSS isDisabled={disabled} inject={componentContainerProps.globalCSS} />\n    );\n  }, [componentContainerProps.globalCSS, disabled]);\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      {globalCSS}\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)","/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/editor.tsx",["77"],"import { useEffect} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface KeyBinding {\n    bindkey: string | object,\n    name: string\n}\n\nexport interface EditorKeyBindings {\n  commands?: KeyBinding[],\n  completer?: KeyBinding[]\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    commands: object[],\n    keybindingString: string,\n    onChange: (value: string, event?: any) => void \n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, keybindingString, editorRef, code, onChange }: EditorProps ) => {\n    \n  useEffect(() => {\n    if(editorRef.current){\n\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString) as EditorKeyBindings;\n      if(keybindings.commands && keybindings.commands.length > 0){\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.commands.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.commands.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.commands.addCommand(newCommand);\n                commands= [...commands, newCommand];\n              }\n            }\n   \n        });\n      }\n      if(keybindings.completer && keybindings.completer.length > 0){\n        // const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n              }\n            }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString) as object;\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n        if(snippetsAddRemove[0])\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n        \n        if(snippetsAddRemove[1])\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n      }\n    }\n  }, [snippetString, keybindingString]);\n\n  return (\n          <AceEditor\n           ref={editorRef}\n           name=\"REACT_ACE_EDITOR\"\n           mode={lang}\n           theme={theme}\n           value={code}\n           keyboardHandler={shortcuts}\n           commands={commands}\n           onChange={onChange}\n           {...props}/>\n  );\n};","/home/anasbouzid/code-projects/streamlit/custom-components/CodeEditor/code_editor/frontend/src/button-menu.tsx",["78"],"// import styled, { ThemeProvider, css } from \"styled-components\"\nimport { useRef, useState, useEffect } from \"react\"\nimport styled, { ThemeProvider } from 'styled-components/macro'\nimport * as Icons from \"react-feather\"\n\n\nexport interface customInfoText {\n  name: string,\n  class?: string,\n  style?: object,\n  theme?: object\n}\n\nexport interface infoBar {\n  name?: string,\n  css?: string,\n  style?: object,\n  info?: customInfoText[]\n}\n\nexport interface customButton {\n  name: string,\n  feather?: string,\n  iconSize?: number,\n  primary?: boolean,\n  hasText?: boolean,\n  showWithIcon?: boolean,\n  alwaysOn?: boolean,\n  commands?: any[],\n  toggledCommands?: any[],\n  class?: string,\n  style?: object,\n  theme?: object, \n  classToggle?: string,\n}\n\nexport interface buttonGroup {\n  name: string,\n  buttons: customButton[],\n  style?: object,\n  toggleOnlyOne?: boolean,\n}\n\nexport interface menu {\n  style?: object,\n  css?: string,\n  groups?: buttonGroup[]\n}\n\nexport const StyledDiv = styled.div``;\nexport const StyledRegSpan = styled.span``;\n\nexport const StyledSpan = styled.span`\n  height: 2.5rem;\n  line-height: 2.5rem;\n  margin: 0px 0.4rem 0.15rem 0.4rem;\n  opacity: 0;\n  transform: scale(0);\n  transition: opacity 300ms 150ms, transform 300ms 150ms;\n`;\n\nexport const StyledButton = styled.button<{primary?: boolean, themeProp: string, theme: object}>`\n  border: none;\n  border-radius: 5px;\n  background: none;\n  height: 2.5rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  transform: scale(0);\n  transition: opacity 20ms 300ms, transform 20ms 300ms;\n  z-index: 9994;\n  :focus {\n    outline: none;\n  }\n  span{\n    color: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transform-origin: right;\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover span {\n    color: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n    opacity: 1;\n    transform: scale(1);\n  }\n  svg {\n    stroke: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover svg {\n    stroke: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n  }\n`;\n\nexport type iconKey = keyof typeof Icons;\n\nexport const creatIcon = (name: iconKey, size = 16) => {\n  const CustomIcon = Icons[name];\n  return <CustomIcon size={`${size}`} />;\n}\n\nexport type CustomInfoBar = {\n  theme: object,\n  info: infoBar,\n  infoRef: any,\n}\n\nexport const Info = ({info, theme, infoRef}: CustomInfoBar) => {\n\n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(info).length === 0) ? `` : <StyledDiv key=\"info_bar\" className={\"custom_info_bar \" + (info.name? info.name : \"\")} css={info.css} style={info.style}>\n        {<StyledRegSpan ref={infoRef} key=\"code_editor_info_message\" className=\"code_editor-info message\">\n          </StyledRegSpan>}\n        {(info.info || []).map((info: customInfoText)=>(\n          <StyledRegSpan key={\"info_\" + info.name} className={info.class} style={info.style}>\n            {info.name}\n          </StyledRegSpan>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>);\n}\n  \nexport type CustomButtonType = {\n  button: customButton, \n  theme: object, \n  themeProp: string, \n  executeAll: (ref: React.RefObject<HTMLButtonElement>, commands: any[]) => void\n}\nexport const Button = ({button, theme, themeProp, executeAll}: CustomButtonType) => {\n  const [toggle, setToggle] = useState(false);     //this toggle is currently not being used\n  const ref = useRef<HTMLButtonElement>(null);\n\n  const execute = (commands: any[], toggledCommands?: any[]) => {\n    if(button.classToggle){\n      setToggle(!toggle);\n      if (ref.current){\n        ref.current.classList.toggle(button.classToggle);\n        if(ref.current.classList.contains(button.classToggle))\n          executeAll(ref, commands);\n        else\n          executeAll(ref, toggledCommands ?? commands);\n      }\n      else \n        executeAll(ref, toggle? toggledCommands?? commands : commands);\n    } \n    else \n      executeAll(ref, commands);\n  }\n\n  return (\n    <StyledButton \n      ref={ref}\n      primary={button.primary? button.primary : false} \n      className={(button.class? button.class: \"\" ) + (button.alwaysOn? \" always-on\" : \"\") + (button.showWithIcon? \" with-icon\" : \"\") }\n      themeProp={themeProp}\n      style={button.style} \n      theme={theme}\n      onClick={() => execute(button.commands ?? [], button.toggledCommands)}>\n        {(button.hasText && button.name)? <StyledSpan >{button.name}</StyledSpan> : ``}\n        {button.feather? creatIcon(button.feather as iconKey || \"Copy\", button.iconSize) : \"\"}\n    </StyledButton>\n  )\n}\n\nexport type CustomButtonSet = \n{\n  theme: object,\n  themeProp: string,\n  buttonGroup: buttonGroup,\n  executeAll: (commands: any[]) => void \n}\n  \nexport const Set = ({buttonGroup, executeAll, theme, themeProp}: CustomButtonSet) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n\n  return (\n      <ThemeProvider theme={theme}>\n        {buttonGroup.buttons.map( (button) => (\n        <Button \n          key={buttonGroup.name + \"_\" + button.name}\n          button={button}\n          themeProp={themeProp}\n          theme={theme}\n          executeAll={(ref, commands) => execute(ref, commands)}/>\n      ))}\n    </ThemeProvider>\n  )\n}\n  \nexport type CustomMenu = \n{\n  menu : menu,\n  theme: object,\n  themeProp: string,\n  executeAll: (commands: any[]) => void\n}\n  \nexport const Menu = ({menu, executeAll, theme, themeProp}: CustomMenu) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(menu).length === 0 )? \"\" : <StyledDiv key=\"menu_bar\" className=\"custom_menu\" style={menu.style} css={menu.css}>\n        {!menu.groups? `` : menu.groups.map((group: buttonGroup, index) => (\n          <StyledDiv key={\"group_\" + group.name + index} className={\"menu_group \" + group.name} style={group.style} data-one-toggle-only={group.toggleOnlyOne} >\n              {group.buttons.map((button: customButton,)=>(\n                <Button \n                  key={group.name + \"_\" + button.name}\n                  button={button}\n                  themeProp={themeProp}\n                  theme={theme}\n                  executeAll={(ref, commands) => execute(ref, commands)}/>\n              ))}\n          </StyledDiv>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>\n  )\n}","/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/index.tsx",[],"/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/CodeEditor.tsx",["79","80","81","82","83","84"],"import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled, { createGlobalStyle } from \"styled-components/macro\"\nimport { useState, useRef, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: true,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean, inject: string}>`\n  html {\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    cursor: ${props => props.isDisabled? \"not-allowed\": \"auto\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n  body {\n    margin: 0;\n    padding: 0;\n  }\n  ${props => props.inject}\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n  const keepFocus = useRef<boolean>(false);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if(aceEditor.current && keepFocus.current){\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if(aceEditor.current && args['focus']){\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n  }\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = { commands: [\n    {\n      name: 'submit', //name for the key binding.\n      description: \"Send 'submit' response\", //description of the command\n      bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({text: editor.getValue(), type: \"submit\", lang: outgoingMode });\n      }\n    },\n    {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n      exec: (editor: ace.Ace.Editor) => {\n        setCode(editor.getValue());\n      }\n    },\n    {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: (editor: ace.Ace.Editor) => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    },\n    {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    },\n    {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    },\n    {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor: ace.Ace.Editor, lang: string) => {\n          if(lang && typeof lang === \"string\")\n            editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    },\n    {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor: any, shortcuts?: string) => {\n        if(shortcuts && typeof shortcuts === \"string\")\n          editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);\n        else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    },\n    {\n      name: 'toggleKeyboardShortcuts',\n      exec: (editor: ace.Ace.Editor) => {\n        if(!document.getElementById('kbshortcutmenu'))\n          editor.execCommand('showKeyboardShortcuts');\n        else \n          editor.execCommand('simulateKeyPress', {type:\"keydown\", keyCode: 27});\n      }\n    },\n    {\n      name: 'simulateKeyPress',\n      exec: (editor: ace.Ace.Editor, args: {type: string, key?: string, keyCode?: number}) => {\n        if(args.key)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'key': args.key})); \n        else if(args.keyCode)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'keyCode': args.keyCode})); \n      }\n    },\n    {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string, targetQueryString?: string} ) => {\n        if(args.targetQueryString){\n          const target = document.querySelector(args.targetQueryString) as HTMLElement;\n          if(target){\n            target.innerText = args.text;\n            target.classList.add(args.classToggle || \"\")\n            if(args.timeout){\n              timeoutId = setTimeout(() => {\n                target.classList.remove(args.classToggle || \"\");\n              }, args.timeout);\n            }\n          }\n        }\n        else if(infoTextRef.current){\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if(args.timeout){\n            timeoutId = setTimeout(() => {\n              infoTextRef.current?.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    },\n    {\n      name: 'response', //name for the key binding.\n      description: \"Send custom response\", //description of the command\n      exec: (editor: any, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({ text: code, type: responseType, lang: outgoingMode });\n      }\n    },\n    {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: { win: 'Ctrl-Alt-M', mac: 'Command-Alt-M' },\n      exec: (editor: any) => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"snippets\"){\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if(outgoingMode === \"snippets\"){}\n            try{\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop()\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    },\n    {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n      exec: (editor: any) => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"json\"){\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try{\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const keybindings = {commands: {}, completer: {}};\n          if(editor.completer && editor.completer.keyboardHandler.commands){\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n          }\n          if(editor.commands.commands){\n            keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    },\n    {\n      name: 'exitSession', //name for the key binding.\n      bindKey: { win: 'Esc', mac: 'Esc' },\n      description: \"Return to main session (keep changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\")\n            editor.execCommand(\"editSnippets\");\n          else if (mode === \"json\")\n            editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    },\n    {\n      name: 'abandonSession', //name for the key binding.\n      bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n      description: \"Return to main session (discard changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    },\n    {\n      name: 'classART', //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, type: string, class: string}) => {\n        if(args.targetQueryString && args.type && args.class){\n          switch(args.type){\n            case \"add\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    {\n      name: 'conditionalExecute', //name for the key binding.\n      description: \"Execute command if element exists\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, command: any[], condition?: boolean}) => {\n        if(args.targetQueryString && args.command && Array.isArray(args.command)){\n          if(!(args.condition ?? true) === !document.querySelector(args.targetQueryString)){\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    }\n  ]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const {info: infoArg, menu: menuArg, focus: focusArg, ...rest} = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n\n    let heightProps = {};\n    if(typeof revertedArgs['height'] === \"number\") \n      heightProps = {minLines: 1, maxLines: revertedArgs['height']};\n    else if(typeof revertedArgs['height'] === \"string\") \n      heightProps = {height: revertedArgs['height']};\n    else if(Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) \n      heightProps = {minLines: revertedArgs['height'][0], maxLines: revertedArgs['height'][1]};\n\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps,...heightProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         commands={commands.commands} \n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={(value) => onChangeHandler(value)} />\n      );\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove]);\n\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedButtons ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [buttonArgsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedMenu} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [menuArgsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedInfo} \n       theme={infoTheme} />\n    );\n  }, [infoArgsString, themeString]);\n\n  const globalCSS = useMemo(() => {\n    return (\n      <GlobalCSS isDisabled={disabled} inject={componentContainerProps.globalCSS} />\n    );\n  }, [componentContainerProps.globalCSS, disabled]);\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      {globalCSS}\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)","/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/editor.tsx",["85"],"/home/anasbouzid/streamlit/streamlit.io/streamlit-code-editor/code_editor/frontend/src/button-menu.tsx",["86"],"// import styled, { ThemeProvider, css } from \"styled-components\"\nimport { useRef, useState, useEffect } from \"react\"\nimport styled, { ThemeProvider } from 'styled-components/macro'\nimport * as Icons from \"react-feather\"\n\n\nexport interface customInfoText {\n  name: string,\n  class?: string,\n  style?: object,\n  theme?: object\n}\n\nexport interface infoBar {\n  name?: string,\n  css?: string,\n  style?: object,\n  info?: customInfoText[]\n}\n\nexport interface customButton {\n  name: string,\n  feather?: string,\n  iconSize?: number,\n  primary?: boolean,\n  hasText?: boolean,\n  showWithIcon?: boolean,\n  alwaysOn?: boolean,\n  commands?: any[],\n  toggledCommands?: any[],\n  class?: string,\n  style?: object,\n  theme?: object, \n  classToggle?: string,\n}\n\nexport interface buttonGroup {\n  name: string,\n  buttons: customButton[],\n  style?: object,\n  toggleOnlyOne?: boolean,\n}\n\nexport interface menu {\n  style?: object,\n  css?: string,\n  groups?: buttonGroup[]\n}\n\nexport const StyledDiv = styled.div``;\nexport const StyledRegSpan = styled.span``;\n\nexport const StyledSpan = styled.span`\n  height: 2.5rem;\n  line-height: 2.5rem;\n  margin: 0px 0.4rem 0.15rem 0.4rem;\n  opacity: 0;\n  transform: scale(0);\n  transition: opacity 300ms 150ms, transform 300ms 150ms;\n`;\n\nexport const StyledButton = styled.button<{primary?: boolean, themeProp: string, theme: object}>`\n  border: none;\n  border-radius: 5px;\n  background: none;\n  height: 2.5rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  transform: scale(0);\n  transition: opacity 20ms 300ms, transform 20ms 300ms;\n  z-index: 9994;\n  :focus {\n    outline: none;\n  }\n  span{\n    color: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transform-origin: right;\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover span {\n    color: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n    opacity: 1;\n    transform: scale(1);\n  }\n  svg {\n    stroke: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover svg {\n    stroke: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n  }\n`;\n\nexport type iconKey = keyof typeof Icons;\n\nexport const creatIcon = (name: iconKey, size = 16) => {\n  const CustomIcon = Icons[name];\n  return <CustomIcon size={`${size}`} />;\n}\n\nexport type CustomInfoBar = {\n  theme: object,\n  info: infoBar,\n  infoRef: any,\n}\n\nexport const Info = ({info, theme, infoRef}: CustomInfoBar) => {\n\n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(info).length === 0) ? `` : <StyledDiv key=\"info_bar\" className={\"custom_info_bar \" + (info.name? info.name : \"\")} css={info.css} style={info.style}>\n        {<StyledRegSpan ref={infoRef} key=\"code_editor_info_message\" className=\"code_editor-info message\">\n          </StyledRegSpan>}\n        {(info.info || []).map((info: customInfoText)=>(\n          <StyledRegSpan key={\"info_\" + info.name} className={info.class} style={info.style}>\n            {info.name}\n          </StyledRegSpan>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>);\n}\n  \nexport type CustomButtonType = {\n  button: customButton, \n  theme: object, \n  themeProp: string, \n  executeAll: (ref: React.RefObject<HTMLButtonElement>, commands: any[]) => void\n}\nexport const Button = ({button, theme, themeProp, executeAll}: CustomButtonType) => {\n  const [toggle, setToggle] = useState(false);     //this toggle is currently not being used\n  const ref = useRef<HTMLButtonElement>(null);\n\n  const execute = (commands: any[], toggledCommands?: any[]) => {\n    if(button.classToggle){\n      setToggle(!toggle);\n      if (ref.current){\n        ref.current.classList.toggle(button.classToggle);\n        if(ref.current.classList.contains(button.classToggle))\n          executeAll(ref, commands);\n        else\n          executeAll(ref, toggledCommands ?? commands);\n      }\n      else \n        executeAll(ref, toggle? toggledCommands?? commands : commands);\n    } \n    else \n      executeAll(ref, commands);\n  }\n\n  return (\n    <StyledButton \n      ref={ref}\n      primary={button.primary? button.primary : false} \n      className={(button.class? button.class: \"\" ) + (button.alwaysOn? \" always-on\" : \"\") + (button.showWithIcon? \" with-icon\" : \"\") }\n      themeProp={themeProp}\n      style={button.style} \n      theme={theme}\n      onClick={() => execute(button.commands ?? [], button.toggledCommands)}>\n        {(button.hasText && button.name)? <StyledSpan >{button.name}</StyledSpan> : ``}\n        {button.feather? creatIcon(button.feather as iconKey || \"X\", button.iconSize) : \"\"}\n    </StyledButton>\n  )\n}\n\nexport type CustomButtonSet = \n{\n  theme: object,\n  themeProp: string,\n  buttonGroup: buttonGroup,\n  executeAll: (commands: any[]) => void \n}\n  \nexport const Set = ({buttonGroup, executeAll, theme, themeProp}: CustomButtonSet) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n\n  return (\n      <ThemeProvider theme={theme}>\n        {buttonGroup.buttons.map( (button) => (\n        <Button \n          key={buttonGroup.name + \"_\" + button.name}\n          button={button}\n          themeProp={themeProp}\n          theme={theme}\n          executeAll={(ref, commands) => execute(ref, commands)}/>\n      ))}\n    </ThemeProvider>\n  )\n}\n  \nexport type CustomMenu = \n{\n  menu : menu,\n  theme: object,\n  themeProp: string,\n  executeAll: (commands: any[]) => void\n}\n  \nexport const Menu = ({menu, executeAll, theme, themeProp}: CustomMenu) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(menu).length === 0 )? \"\" : <StyledDiv key=\"menu_bar\" className=\"custom_menu\" style={menu.style} css={menu.css}>\n        {!menu.groups? `` : menu.groups.map((group: buttonGroup, index) => (\n          <StyledDiv key={\"group_\" + group.name + index} className={\"menu_group \" + group.name} style={group.style} data-one-toggle-only={group.toggleOnlyOne} >\n              {group.buttons.map((button: customButton,)=>(\n                <Button \n                  key={group.name + \"_\" + button.name}\n                  button={button}\n                  themeProp={themeProp}\n                  theme={theme}\n                  executeAll={(ref, commands) => execute(ref, commands)}/>\n              ))}\n          </StyledDiv>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>\n  )\n}","/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/index.tsx",[],["87","88"],"/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/CodeEditor.tsx",["89","90","91","92","93","94","95"],"import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport styled, { createGlobalStyle } from \"styled-components/macro\"\nimport { useState, useRef, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: false,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean, inject: string}>`\n  html {\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    cursor: ${props => props.isDisabled? \"not-allowed\": \"auto\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n  body {\n    margin: 0;\n    padding: 0;\n  }\n  ${props => props.inject}\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n  const keepFocus = useRef<boolean>(false);\n  const reset = useRef<boolean>(false);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if(aceEditor.current && keepFocus.current){\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if(aceEditor.current && args.focus){\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n  }\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = { commands: [\n    {\n      name: 'submit', //name for the key binding.\n      description: \"Send 'submit' response\", //description of the command\n      bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({text: editor.getValue(), type: \"submit\", lang: outgoingMode });\n      }\n    },\n    {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n      exec: (editor: ace.Ace.Editor) => {\n        setCode(editor.getValue());\n      }\n    },\n    {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: (editor: ace.Ace.Editor) => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    },\n    {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    },\n    {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    },\n    {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor: ace.Ace.Editor, lang: string) => {\n          if(lang && typeof lang === \"string\")\n            editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    },\n    {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor: any, shortcuts?: string) => {\n        if(shortcuts && typeof shortcuts === \"string\")\n          editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);\n        else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    },\n    {\n      name: 'toggleKeyboardShortcuts',\n      exec: (editor: ace.Ace.Editor) => {\n        if(!document.getElementById('kbshortcutmenu'))\n          editor.execCommand('showKeyboardShortcuts');\n        else \n          editor.execCommand('simulateKeyPress', {type:\"keydown\", keyCode: 27});\n      }\n    },\n    {\n      name: 'simulateKeyPress',\n      exec: (editor: ace.Ace.Editor, args: {type: string, key?: string, keyCode?: number}) => {\n        if(args.key)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'key': args.key})); \n        else if(args.keyCode)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'keyCode': args.keyCode})); \n      }\n    },\n    {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string, targetQueryString?: string} ) => {\n        if(args.targetQueryString){\n          const target = document.querySelector(args.targetQueryString) as HTMLElement;\n          if(target){\n            target.innerText = args.text;\n            target.classList.add(args.classToggle || \"\")\n            if(args.timeout){\n              timeoutId = setTimeout(() => {\n                target.classList.remove(args.classToggle || \"\");\n              }, args.timeout);\n            }\n          }\n        }\n        else if(infoTextRef.current){\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if(args.timeout){\n            timeoutId = setTimeout(() => {\n              infoTextRef.current?.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    },\n    {\n      name: 'response', //name for the key binding.\n      description: \"Send custom response\", //description of the command\n      exec: (editor: any, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({ text: code, type: responseType, lang: outgoingMode });\n      }\n    },\n    {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: { win: 'Ctrl-Alt-M', mac: 'Command-Alt-M' },\n      exec: (editor: any) => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"snippets\"){\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if(outgoingMode === \"snippets\"){}\n            try{\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop()\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    },\n    {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n      exec: (editor: any) => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"json\"){\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try{\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const keybindings = {commands: {}, completer: {}};\n          if(editor.completer && editor.completer.keyboardHandler.commands){\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n          }\n          if(editor.commands.commands){\n            keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    },\n    {\n      name: 'exitSession', //name for the key binding.\n      bindKey: { win: 'Esc', mac: 'Esc' },\n      description: \"Return to main session (keep changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\")\n            editor.execCommand(\"editSnippets\");\n          else if (mode === \"json\")\n            editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    },\n    {\n      name: 'abandonSession', //name for the key binding.\n      bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n      description: \"Return to main session (discard changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    },\n    {\n      name: 'classART', //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, type: string, class: string}) => {\n        if(args.targetQueryString && args.type && args.class){\n          switch(args.type){\n            case \"add\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    {\n      name: 'conditionalExecute', //name for the key binding.\n      description: \"Execute command if element exists\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, command: any[], condition?: boolean}) => {\n        if(args.targetQueryString && args.command && Array.isArray(args.command)){\n          if(!(args.condition ?? true) === !document.querySelector(args.targetQueryString)){\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    }\n  ]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  // This useEffect is used to reset the editor when the code argument changes and\n  // the allow_reset argument is true. The allow_reset argument only impacts the\n  // behavior of the component when the component has a fixed key argument because\n  // changing the key argument results in the creation of a new component instance.\n  // Everything would be reset anyways.\n  useEffect(() => {\n    if (args['allow_reset'] === true && args['code'] !== code) {\n      reset.current = !reset.current;\n      resetEditor();\n    }\n  }, [args['code']]);\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const {info: infoArg, menu: menuArg, focus: focusArg, code: codeArg, ...rest} = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n\n    let heightProps = {};\n    if(typeof revertedArgs['height'] === \"number\") \n      heightProps = {minLines: 1, maxLines: revertedArgs['height']};\n    else if(typeof revertedArgs['height'] === \"string\") \n      heightProps = {height: revertedArgs['height']};\n    else if(Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) \n      heightProps = {minLines: revertedArgs['height'][0], maxLines: revertedArgs['height'][1]};\n\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps,...heightProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         commands={commands.commands} \n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={(value) => onChangeHandler(value)} />\n      );\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove, reset.current]);\n\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedButtons ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [buttonArgsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedMenu} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [menuArgsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedInfo} \n       theme={infoTheme} />\n    );\n  }, [infoArgsString, themeString]);\n\n  const globalCSS = useMemo(() => {\n    return (\n      <GlobalCSS isDisabled={disabled} inject={componentContainerProps.globalCSS} />\n    );\n  }, [componentContainerProps.globalCSS, disabled]);\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      {globalCSS}\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)","/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/editor.tsx",["96"],"/home/anasbouzid/streamlit-code-editor/code_editor/frontend/src/button-menu.tsx",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":160,"column":6,"nodeType":"103","endLine":160,"endColumn":8,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":167,"column":6,"nodeType":"103","endLine":167,"endColumn":25,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":177,"column":6,"nodeType":"103","endLine":177,"endColumn":18,"suggestions":"108"},{"ruleId":"101","severity":1,"message":"109","line":575,"column":6,"nodeType":"103","endLine":575,"endColumn":66,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"111","line":589,"column":6,"nodeType":"103","endLine":589,"endColumn":48,"suggestions":"112"},{"ruleId":"101","severity":1,"message":"111","line":602,"column":6,"nodeType":"103","endLine":602,"endColumn":46,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"114","line":53,"column":27,"nodeType":"103","endLine":53,"endColumn":52},{"ruleId":"115","severity":1,"message":"116","line":2,"column":28,"nodeType":"117","messageId":"118","endLine":2,"endColumn":37},{"ruleId":"101","severity":1,"message":"102","line":160,"column":6,"nodeType":"103","endLine":160,"endColumn":8,"suggestions":"119"},{"ruleId":"101","severity":1,"message":"105","line":167,"column":6,"nodeType":"103","endLine":167,"endColumn":25,"suggestions":"120"},{"ruleId":"101","severity":1,"message":"107","line":177,"column":6,"nodeType":"103","endLine":177,"endColumn":18,"suggestions":"121"},{"ruleId":"101","severity":1,"message":"109","line":587,"column":6,"nodeType":"103","endLine":587,"endColumn":66,"suggestions":"122"},{"ruleId":"101","severity":1,"message":"111","line":601,"column":6,"nodeType":"103","endLine":601,"endColumn":48,"suggestions":"123"},{"ruleId":"101","severity":1,"message":"111","line":614,"column":6,"nodeType":"103","endLine":614,"endColumn":46,"suggestions":"124"},{"ruleId":"101","severity":1,"message":"114","line":53,"column":27,"nodeType":"103","endLine":53,"endColumn":52},{"ruleId":"115","severity":1,"message":"116","line":2,"column":28,"nodeType":"117","messageId":"118","endLine":2,"endColumn":37},{"ruleId":"97","replacedBy":"125"},{"ruleId":"99","replacedBy":"126"},{"ruleId":"101","severity":1,"message":"102","line":161,"column":6,"nodeType":"103","endLine":161,"endColumn":8,"suggestions":"127"},{"ruleId":"101","severity":1,"message":"105","line":168,"column":6,"nodeType":"103","endLine":168,"endColumn":25,"suggestions":"128"},{"ruleId":"101","severity":1,"message":"129","line":513,"column":6,"nodeType":"103","endLine":513,"endColumn":20,"suggestions":"130"},{"ruleId":"101","severity":1,"message":"131","line":513,"column":7,"nodeType":"132","endLine":513,"endColumn":19},{"ruleId":"101","severity":1,"message":"133","line":600,"column":6,"nodeType":"103","endLine":600,"endColumn":81,"suggestions":"134"},{"ruleId":"101","severity":1,"message":"111","line":614,"column":6,"nodeType":"103","endLine":614,"endColumn":48,"suggestions":"135"},{"ruleId":"101","severity":1,"message":"111","line":627,"column":6,"nodeType":"103","endLine":627,"endColumn":46,"suggestions":"136"},{"ruleId":"101","severity":1,"message":"114","line":53,"column":27,"nodeType":"103","endLine":53,"endColumn":52},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'timeoutId'. Either include it or remove the dependency array.","ArrayExpression",["139"],"React Hook useEffect has an unnecessary dependency: 'keepFocus.current'. Either exclude it or remove the dependency array. Mutable values like 'keepFocus.current' aren't valid dependencies because mutating them doesn't re-render the component.",["140"],"React Hook useEffect has a missing dependency: 'args'. Either include it or remove the dependency array.",["141"],"React Hook useMemo has missing dependencies: 'code', 'commands', and 'executeAll'. Either include them or remove the dependency array.",["142"],"React Hook useMemo has a missing dependency: 'executeAll'. Either include it or remove the dependency array.",["143"],["144"],"Assignments to the 'commands' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["145"],["146"],["147"],["148"],["149"],["150"],["137"],["138"],["151"],["152"],"React Hook useEffect has missing dependencies: 'args', 'code', and 'resetEditor'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useMemo has missing dependencies: 'code', 'commands', and 'executeAll'. Either include them or remove the dependency array. Mutable values like 'reset.current' aren't valid dependencies because mutating them doesn't re-render the component.",["154"],["155"],["156"],"no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"157","fix":"169"},{"desc":"159","fix":"170"},{"desc":"161","fix":"171"},{"desc":"163","fix":"172"},{"desc":"165","fix":"173"},{"desc":"167","fix":"174"},{"desc":"157","fix":"175"},{"desc":"159","fix":"176"},{"desc":"177","fix":"178"},{"desc":"163","fix":"179"},{"desc":"165","fix":"180"},{"desc":"167","fix":"181"},"Update the dependencies array to be: [timeoutId]",{"range":"182","text":"183"},"Update the dependencies array to be: []",{"range":"184","text":"185"},"Update the dependencies array to be: [args, args.focus]",{"range":"186","text":"187"},"Update the dependencies array to be: [keybindingAddRemove, editorArgsString, code, themeProp, snippets, commands, executeAll]",{"range":"188","text":"189"},"Update the dependencies array to be: [buttonArgsString, themeString, themeProp, executeAll]",{"range":"190","text":"191"},"Update the dependencies array to be: [menuArgsString, themeString, themeProp, executeAll]",{"range":"192","text":"193"},{"range":"194","text":"183"},{"range":"195","text":"185"},{"range":"196","text":"187"},{"range":"197","text":"189"},{"range":"198","text":"191"},{"range":"199","text":"193"},{"range":"200","text":"183"},{"range":"201","text":"185"},"Update the dependencies array to be: [args, code, resetEditor]",{"range":"202","text":"203"},{"range":"204","text":"189"},{"range":"205","text":"191"},{"range":"206","text":"193"},[4609,4611],"[timeoutId]",[4767,4786],"[]",[5163,5175],"[args, args.focus]",[22262,22322],"[keybindingAddRemove, editorArgsString, code, themeProp, snippets, commands, executeAll]",[22839,22881],"[buttonArgsString, themeString, themeProp, executeAll]",[23248,23288],"[menuArgsString, themeString, themeProp, executeAll]",[4602,4604],[4760,4779],[5156,5168],[22741,22801],[23318,23360],[23727,23767],[4643,4645],[4801,4820],[19555,19569],"[args, code, resetEditor]",[23338,23413],[23930,23972],[24339,24379]]
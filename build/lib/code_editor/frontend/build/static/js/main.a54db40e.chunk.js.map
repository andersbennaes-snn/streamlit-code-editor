{"version":3,"sources":["editor.tsx","button-menu.tsx","CodeEditor.tsx","index.tsx"],"names":["Editor","lang","theme","shortcuts","props","snippetString","commands","keybindingString","editorRef","code","onChange","onSelectionChange","onBlur","commandsList","useRef","useEffect","current","ace","require","Autocomplete","for","editor","keybindings","JSON","parse","length","forEach","binding","name","stringify","bindKey","bindkey","newCommand","addCommand","completer","keyboardHandler","init","snippetManager","snippets","Object","entries","snippetsLang","snippetsAddRemove","register","parseSnippetFile","unregister","ref","mode","value","StyledDiv","styled","div","StyledRegSpan","span","StyledSpan","StyledButton","button","themeProp","primary","primaryColor","creatIcon","size","CustomIcon","Icons","Info","info","infoRef","keys","className","style","css","map","class","Button","executeAll","useState","toggle","setToggle","alwaysOn","showWithIcon","onClick","toggledCommands","classToggle","classList","contains","hasText","feather","iconSize","Set","buttonGroup","execute","buttonRef","buttons","Menu","menu","groups","group","index","toggleOnlyOne","defaultOptions","fontFamily","cursorStyle","displayIndentGuides","wrap","highlightActiveLine","showPrintMargin","showLineNumbers","foldStyle","autoScrollEditorIntoView","animatedScroll","fadeFoldWidgets","defaultEditorProps","editorProps","$blockScrolling","defaultProps","cursorStart","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","focus","fontSize","navigateToFileEnd","placeholder","readOnly","scrollMargin","setOptions","showGutter","tabSize","width","debounceChangePeriod","GlobalCSS","createGlobalStyle","isDisabled","inject","StyledCodeEditor","withStreamlitConnection","timeoutId","args","disabled","setCode","aceEditor","infoTextRef","baseSession","keepFocus","reset","createSnippets","snippetRaw","Array","isArray","split","c","join","snippetAddRemove","setSnippetAddRemove","keybindingAddRemove","setKeybindingAddRemove","clearTimeout","onChangeHandler","newCode","includes","outgoingMode","getSession","$modeId","pop","Streamlit","setComponentValue","id","v1","slice","type","text","selected","getSelectedText","cursor","getCursorPosition","onSelectionChangeHandler","selectedText","onEditorBlur","event","getValue","description","win","mac","exec","unsecureCopyTextToClipboard","resetEditor","setMode","setKeyboardHandler","handlers","currentHandler","indexOf","$keybindingId","document","getElementById","execCommand","keyCode","key","dispatchEvent","KeyboardEvent","targetQueryString","target","querySelector","innerText","add","timeout","setTimeout","remove","responseType","snippetText","setSession","snippetsPlus","snippetsMinus","snippetsToAdd","snippetsToRemove","langMode","error","snippetConcatText","snippetMap","snip","content","replace","lineCount","match","snippetsSession","createEditSession","cursorPos","row","column","moveCursorTo","renderer","scrollCursorIntoView","keybindingsJSON","undefined","keybindingsSession","querySelectorAll","el","command","condition","console","warn","containsNumsStr","singleCommand","textField","createElement","body","appendChild","select","resizeObserver","ResizeObserver","setFrameHeight","contentBoxSize","blockSize","contentRect","height","isDarkTheme","base","themeChoice","componentContainerProps","infoArg","menuArg","rest","editorArgsString","menuArgsString","infoArgsString","buttonArgsString","themeString","useMemo","revertedArgs","trim","heightProps","minLines","maxLines","aceEditorProps","partProps","aceProps","revertedButtons","revertedTheme","customButtonTheme","customButtons","revertedMenu","menuTheme","revertedInfo","infoTheme","globalCSS","divElem","observe","disconnect","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a54db40e.chunk.js","sourcesContent":["import { useEffect, useRef} from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\nimport \"ace-builds/src-noconflict/ext-keybinding_menu\";\n\nexport interface KeyBinding {\n    bindkey: string | object,\n    name: string\n}\n\nexport interface EditorKeyBindings {\n  commands?: KeyBinding[],\n  completer?: KeyBinding[]\n}\n\nexport type EditorProps = {\n    code: string,\n    lang: string,\n    theme: string,\n    shortcuts: string,\n    props: any,\n    editorRef: any,\n    snippetString: string,\n    commands: object[],\n    keybindingString: string,\n    onChange: (value: string, event?: any) => void,\n    onSelectionChange: (value: any, event?: any) => void,\n    onBlur: (event: any, editor?: any) => void\n  }\n  \nexport const Editor = ({ lang, theme, shortcuts, props, snippetString, commands, keybindingString, editorRef, code, onChange, onSelectionChange, onBlur }: EditorProps ) => {\n    \n  let commandsList = useRef<object[]>(commands);\n  useEffect(() => {\n    if(editorRef.current){\n\n      // Add/remove keybindings\n      ace.require('ace/autocomplete').Autocomplete.for(editorRef.current.editor);\n      const keybindings = JSON.parse(keybindingString) as EditorKeyBindings;\n      if(keybindings.commands && keybindings.commands.length > 0){\n        // const bindkeySelector = editorRef.current.editor.commands.platform as string;\n        keybindings.commands.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.commands.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.commands.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.commands.addCommand(newCommand);\n                commandsList.current= [...commandsList.current, newCommand];\n              }\n            }\n   \n        });\n      }\n      if(keybindings.completer && keybindings.completer.length > 0){\n        // const bindkeySelector = editorRef.current.editor.completer.keyboardHandler.platform as string;\n        keybindings.completer.forEach((binding) => {\n            if(binding.name && typeof binding.name === \"string\"){\n              if (JSON.stringify(editorRef.current.editor.completer.keyboardHandler.commands[binding.name].bindKey ?? \"\") !== JSON.stringify(binding.bindkey)) {\n                const newCommand = {...editorRef.current.editor.completer.keyboardHandler.commands[binding.name]};\n                newCommand.bindKey = binding.bindkey;\n                editorRef.current.editor.completer.keyboardHandler.addCommand(newCommand);\n              }\n            }\n        });\n      }\n\n      // Add/remove snippets\n      ace.require(\"ace/ext/keybinding_menu\").init(editorRef.current.editor);\n      const snippetManager = ace.require('ace/snippets').snippetManager;\n      const snippets = JSON.parse(snippetString) as object;\n      for (const [snippetsLang, snippetsAddRemove] of Object.entries(snippets)){\n        if(snippetsAddRemove[0])\n          snippetManager.register(snippetManager.parseSnippetFile(snippetsAddRemove[0], snippetsLang), snippetsLang)\n        \n        if(snippetsAddRemove[1])\n          snippetManager.unregister(snippetManager.parseSnippetFile(snippetsAddRemove[1], snippetsLang), snippetsLang)\n      }\n    }\n  }, [snippetString, keybindingString]);\n\n  return (\n          <AceEditor\n           ref={editorRef}\n           name=\"REACT_ACE_EDITOR\"\n           mode={lang}\n           theme={theme}\n           value={code}\n           keyboardHandler={shortcuts}\n           commands={commandsList.current}\n           onChange={onChange}\n           onSelectionChange={onSelectionChange}\n           onBlur={onBlur}\n           {...props}/>\n  );\n};","// import styled, { ThemeProvider, css } from \"styled-components\"\nimport { useRef, useState } from \"react\"\nimport styled, { ThemeProvider } from 'styled-components/macro'\nimport * as Icons from \"react-feather\"\n\n\nexport interface customInfoText {\n  name: string,\n  class?: string,\n  style?: object,\n  theme?: object\n}\n\nexport interface infoBar {\n  name?: string,\n  css?: string,\n  style?: object,\n  info?: customInfoText[]\n}\n\nexport interface customButton {\n  name: string,\n  feather?: string,\n  iconSize?: number,\n  primary?: boolean,\n  hasText?: boolean,\n  showWithIcon?: boolean,\n  alwaysOn?: boolean,\n  commands?: any[],\n  toggledCommands?: any[],\n  bindKey?: string | object,\n  class?: string,\n  style?: object,\n  theme?: object, \n  classToggle?: string,\n}\n\nexport interface buttonGroup {\n  name: string,\n  buttons: customButton[],\n  style?: object,\n  toggleOnlyOne?: boolean,\n}\n\nexport interface menu {\n  style?: object,\n  css?: string,\n  groups?: buttonGroup[]\n}\n\nexport const StyledDiv = styled.div``;\nexport const StyledRegSpan = styled.span``;\n\nexport const StyledSpan = styled.span`\n  height: 2.5rem;\n  line-height: 2.5rem;\n  margin: 0px 0.4rem 0.15rem 0.4rem;\n  opacity: 0;\n  transform: scale(0);\n  transition: opacity 300ms 150ms, transform 300ms 150ms;\n`;\n\nexport const StyledButton = styled.button<{primary?: boolean, themeProp: string, theme: object}>`\n  border: none;\n  border-radius: 5px;\n  background: none;\n  height: 2.5rem;\n  line-height: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  position: absolute;\n  transform: scale(0);\n  transition: opacity 20ms 300ms, transform 20ms 300ms;\n  z-index: 9994;\n  :focus {\n    outline: none;\n  }\n  span{\n    color: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transform-origin: right;\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover span {\n    color: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n    opacity: 1;\n    transform: scale(1);\n  }\n  svg {\n    stroke: ${props => props.themeProp === \"streamlit_dark\"? \"rgba(250,250,250,0.6)\": \"rgba(0,0,0,0.5)\"};\n    transform: scale(0);\n    transition: opacity 300ms 150ms, transform 300ms 150ms;\n  }\n  :hover svg {\n    stroke: ${props => props.primary? props.theme.primaryColor : props.themeProp === \"streamlit_dark\"? \"rgb(250,250,250)\" : \"rgb(49, 51, 63)\"};\n  }\n`;\n\nexport type iconKey = keyof typeof Icons;\n\nexport const creatIcon = (name: iconKey, size = 16) => {\n  const CustomIcon = Icons[name];\n  return <CustomIcon size={`${size}`} />;\n}\n\nexport type CustomInfoBar = {\n  theme: object,\n  info: infoBar,\n  infoRef: any,\n}\n\nexport const Info = ({info, theme, infoRef}: CustomInfoBar) => {\n\n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(info).length === 0) ? `` : <StyledDiv key=\"info_bar\" className={\"custom_info_bar \" + (info.name? info.name : \"\")} css={info.css} style={info.style}>\n        {<StyledRegSpan ref={infoRef} key=\"code_editor_info_message\" className=\"code_editor-info message\">\n          </StyledRegSpan>}\n        {(info.info || []).map((info: customInfoText)=>(\n          <StyledRegSpan key={\"info_\" + info.name} className={info.class} style={info.style}>\n            {info.name}\n          </StyledRegSpan>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>);\n}\n  \nexport type CustomButtonType = {\n  button: customButton, \n  theme: object, \n  themeProp: string, \n  executeAll: (ref: React.RefObject<HTMLButtonElement>, commands: any[]) => void\n}\nexport const Button = ({button, theme, themeProp, executeAll}: CustomButtonType) => {\n  const [toggle, setToggle] = useState(false);     //this toggle is currently not being used\n  const ref = useRef<HTMLButtonElement>(null);\n\n  const execute = (commands: any[], toggledCommands?: any[]) => {\n    if(button.classToggle){\n      setToggle(!toggle);\n      if (ref.current){\n        ref.current.classList.toggle(button.classToggle);\n        if(ref.current.classList.contains(button.classToggle))\n          executeAll(ref, commands);\n        else\n          executeAll(ref, toggledCommands ?? commands);\n      }\n      else \n        executeAll(ref, toggle? toggledCommands?? commands : commands);\n    } \n    else \n      executeAll(ref, commands);\n  }\n\n  return (\n    <StyledButton \n      ref={ref}\n      primary={button.primary? button.primary : false} \n      className={(button.class? button.class: \"\" ) + (button.alwaysOn? \" always-on\" : \"\") + (button.showWithIcon? \" with-icon\" : \"\") }\n      themeProp={themeProp}\n      style={button.style} \n      theme={theme}\n      onClick={() => execute(button.commands ?? [], button.toggledCommands)}>\n        {(button.hasText && button.name)? <StyledSpan >{button.name}</StyledSpan> : ``}\n        {button.feather? creatIcon(button.feather as iconKey || \"X\", button.iconSize) : \"\"}\n    </StyledButton>\n  )\n}\n\nexport type CustomButtonSet = \n{\n  theme: object,\n  themeProp: string,\n  buttonGroup: buttonGroup,\n  executeAll: (commands: any[]) => void \n}\n  \nexport const Set = ({buttonGroup, executeAll, theme, themeProp}: CustomButtonSet) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n\n  return (\n      <ThemeProvider theme={theme}>\n        {buttonGroup.buttons.map( (button) => (\n        <Button \n          key={buttonGroup.name + \"_\" + button.name}\n          button={button}\n          themeProp={themeProp}\n          theme={theme}\n          executeAll={(ref, commands) => execute(ref, commands)}/>\n      ))}\n    </ThemeProvider>\n  )\n}\n  \nexport type CustomMenu = \n{\n  menu : menu,\n  theme: object,\n  themeProp: string,\n  executeAll: (commands: any[]) => void\n}\n  \nexport const Menu = ({menu, executeAll, theme, themeProp}: CustomMenu) => {\n\n  const execute = (buttonRef: React.RefObject<HTMLButtonElement>, commands: any[]) => {\n    // Do things here that depend on which button is clicked using buttonRef.current\n    if(commands)\n      executeAll(commands);\n  }\n  \n  return (\n    <ThemeProvider theme={theme}>\n      {(Object.keys(menu).length === 0 )? \"\" : <StyledDiv key=\"menu_bar\" className=\"custom_menu\" style={menu.style} css={menu.css}>\n        {!menu.groups? `` : menu.groups.map((group: buttonGroup, index) => (\n          <StyledDiv key={\"group_\" + group.name + index} className={\"menu_group \" + group.name} style={group.style} data-one-toggle-only={group.toggleOnlyOne} >\n              {group.buttons.map((button: customButton,)=>(\n                <Button \n                  key={group.name + \"_\" + button.name}\n                  button={button}\n                  themeProp={themeProp}\n                  theme={theme}\n                  executeAll={(ref, commands) => execute(ref, commands)}/>\n              ))}\n          </StyledDiv>\n        ))}\n      </StyledDiv>}\n    </ThemeProvider>\n  )\n}","import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n  Theme,\n} from \"streamlit-component-lib\"\nimport {v1} from 'uuid';\nimport styled, { createGlobalStyle } from \"styled-components/macro\"\nimport { useState, useRef, useEffect, useMemo } from \"react\"\nimport AceEditor from \"react-ace\";\nimport ace from \"ace-builds\";\nimport { Editor } from './editor';\nimport { Menu as ButtonMenu, Set as ButtonSet, customButton, buttonGroup, Info as InfoBar } from \"./button-menu\"\n\nimport \"ace-builds/webpack-resolver\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/ext-searchbox\";\nimport \"ace-builds/src-noconflict/ext-prompt\";\nimport \"ace-builds/src-noconflict/ext-modelist\";\n\ninterface CodeEditorProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst defaultOptions = {\n  fontFamily: '\"Source Code Pro\", monospace',\n  cursorStyle: \"smooth\",\n  displayIndentGuides: false,\n  wrap: false,\n  highlightActiveLine: true,\n  showPrintMargin: false,\n  showLineNumbers: false,\n  foldStyle: \"markbegin\",\n  autoScrollEditorIntoView: false,\n  animatedScroll: true,\n  fadeFoldWidgets: true,\n}\n\nconst defaultEditorProps = {\n  editorProps: {\n    $blockScrolling: true\n  }\n}\n\nconst defaultProps = {\n  cursorStart: 1,\n  enableBasicAutocompletion: false,\n  enableLiveAutocompletion: true,\n  enableSnippets: true,\n  focus: false,\n  fontSize: 14,\n  highlightActiveLine: true,\n  navigateToFileEnd: true,\n  placeholder: null,\n  readOnly: false,\n  scrollMargin: [15, 15, 0, 0],\n  setOptions: defaultOptions,\n  showGutter: true,\n  showPrintMargin: false,\n  style: {},\n  tabSize: 4,\n  width: \"auto\",\n  debounceChangePeriod: 250,\n}\n\nconst GlobalCSS = createGlobalStyle<{isDisabled?: boolean, inject: string}>`\n  html {\n    opacity: ${props => props.isDisabled? \"0.5\": \"1\"};\n    cursor: ${props => props.isDisabled? \"not-allowed\": \"auto\"};\n    pointer-events: ${props => props.isDisabled? \"none\": \"auto\"};\n  }\n  ${props => props.inject}\n`\nconst StyledCodeEditor = styled.div`\n  width: 100%;\n  border-radius: 8px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  :hover button svg {\n        opacity: 1;\n        transform: scale(1);\n  }\n  :hover button.with-icon span {\n    opacity: 1;\n    transform: scale(1);\n  }\n  button.always-on > span {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  button.always-on > svg {\n    opacity: 1;\n    transform: scale(1);\n    transition: none;\n  }\n  `;\n\nconst CodeEditor = ({ args, width, disabled, theme }: CodeEditorProps) => {\n\n  //sets code to the initial value every time the component is rendered\n  //to set the initial value once, use a function instead of a value.\n  const [code, setCode] = useState(args['code']);\n  // const [keybindingAddRemove, setKeybindingAddRemove] = useState([\"\",\"\"]);\n\n  const aceEditor = useRef<AceEditor>(null);\n  const infoTextRef = useRef<HTMLSpanElement>(null);\n  const baseSession = useRef<ace.Ace.EditSession | null>(null);\n  const keepFocus = useRef<boolean>(false);\n  const reset = useRef<boolean>(false);\n\n  var timeoutId: NodeJS.Timeout;\n\n  /**\n    * This function takes as input either a snippetText string that is expected\n    * to be already formatted like the text in a SnippetFile or a dictionary or \n    * and array of dictionaries. For the first case, it just returns the input.\n    * For the second and third case, a (SnippetFile format) string is constructed\n    * from the dict(s) and returned. Learn more about snippets {@link  here}\n    * @param snippetRaw snippets to be converted to a single snippetText string\n    * @returns {string} snippetText\n    */\n  const createSnippets = (snippetRaw: string | object | [object]): string => {\n    return (typeof snippetRaw === \"string\" ? snippetRaw : (Array.isArray(snippetRaw) ? snippetRaw : [snippetRaw]).map(({ name, code }) =>\n    ([\n      'snippet ' + name,\n      code.split('\\n')\n        .map((c: string) => '\\t' + c)\n        .join('\\n'),\n    ].join('\\n'))\n    ).join('\\n'))\n  }\n  const [snippetAddRemove, setSnippetAddRemove] = useState({[args['lang']] : [createSnippets(args[\"snippets\"][0]), createSnippets(args[\"snippets\"][1])]});\n  const [keybindingAddRemove, setKeybindingAddRemove] = useState(args['keybindings']);\n\n\n  useEffect(() => {\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if(aceEditor.current && keepFocus.current){\n      aceEditor.current.editor.focus();\n      keepFocus.current = false;\n    }\n  }, [keepFocus.current]);\n\n  // To reasons for the useEffect here: \n  //   1. to set the focus on the editor only when the focus argument has changed to true.\n  //   2. to set the focus on the editor after rendering the component at which point, the \n  //      editor should be ready.\n  useEffect(() => {\n    if(aceEditor.current && args.focus){\n      aceEditor.current.editor.focus();\n    }\n  }, [args.focus]);\n\n  const onChangeHandler = (newCode: string) => {\n    setCode(newCode);\n\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"debounce\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor as any;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"change\", lang: outgoingMode, text: newCode, selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n  \n  const onSelectionChangeHandler = (selectedText: any) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"select\") && aceEditor.current && aceEditor.current.editor) {\n      const editor = aceEditor.current.editor as any;\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"selection\", lang: outgoingMode, text: code, selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n\n  const onEditorBlur = (event: any, editor: any) => {\n    const responseMode = typeof args[\"response_mode\"] === \"string\" ? [args[\"response_mode\"]] : args[\"response_mode\"];\n    if (responseMode.includes(\"blur\") && editor) {\n      const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n      setCode(editor.getValue());\n      Streamlit.setComponentValue({id: v1().slice(0,8), type: \"blur\", lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    }\n  }\n\n  // commands is an array of objects containing functions\n  // that the editor can be triggered to call.\n  const commands = { commands: [\n    {\n      name: 'submit', //name for the key binding.\n      description: \"Send 'submit' response\", //description of the command\n      bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' }, //key combination used for the command.\n      exec: (editor: any) => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: \"submit\", lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    {\n      name: 'saveState',\n      description: \"Save state\",\n      bindKey: { win: 'Ctrl-Alt-S', mac: 'Command-Alt-S' },\n      exec: (editor: ace.Ace.Editor) => {\n        setCode(editor.getValue());\n      }\n    },\n    {\n      name: 'copyAll',\n      description: \"Copy all text to clipboard\",\n      exec: (editor: ace.Ace.Editor) => {\n        unsecureCopyTextToClipboard(editor.getValue());\n      }\n    },\n    {\n      name: 'reset',\n      exec: () => {\n        resetEditor();\n      }\n    },\n    {\n      name: 'keepFocus',\n      description: \"Return cursor to editor\",\n      exec: () => {\n        keepFocus.current = true;\n      }\n    },\n    {\n      name: \"setMode\",\n      description: \"Set language mode\",\n      exec: (editor: ace.Ace.Editor, lang: string) => {\n          if(lang && typeof lang === \"string\")\n            editor.getSession().setMode(\"ace/mode/\" + lang);\n      },\n      readOnly: true\n    },\n    {\n      name: \"changeShortcuts\",\n      description: \"Switch shortcuts\",\n      exec: (editor: any, shortcuts?: string) => {\n        if(shortcuts && typeof shortcuts === \"string\")\n          editor.setKeyboardHandler(\"ace/keyboard/\" + shortcuts);\n        else {\n          //rotate through the available keyboard handlers\n          const handlers = [\"ace/keyboard/vim\", \"ace/keyboard/emacs\", \"ace/keyboard/sublime\", \"ace/keyboard/vscode\"];\n          const currentHandler = handlers[(handlers.indexOf(editor.$keybindingId) + 1) % 4];\n          editor.setKeyboardHandler(currentHandler);\n        }\n      },\n      readOnly: true\n    },\n    {\n      name: 'toggleKeyboardShortcuts',\n      exec: (editor: ace.Ace.Editor) => {\n        if(!document.getElementById('kbshortcutmenu'))\n          editor.execCommand('showKeyboardShortcuts');\n        else \n          editor.execCommand('simulateKeyPress', {type:\"keydown\", keyCode: 27});\n      }\n    },\n    {\n      name: 'simulateKeyPress',\n      exec: (editor: ace.Ace.Editor, args: {type: string, key?: string, keyCode?: number}) => {\n        if(args.key)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'key': args.key})); \n        else if(args.keyCode)\n          document.dispatchEvent(new KeyboardEvent(args.type,{'keyCode': args.keyCode})); \n      }\n    },\n    {\n      name: 'infoMessage',\n      description: \"Display message in info bar\",\n      exec: (editor: ace.Ace.Editor, args: {text: string, timeout?: number, classToggle?: string, targetQueryString?: string} ) => {\n        if(args.targetQueryString){\n          const target = document.querySelector(args.targetQueryString) as HTMLElement;\n          if(target){\n            target.innerText = args.text;\n            target.classList.add(args.classToggle || \"\")\n            if(args.timeout){\n              timeoutId = setTimeout(() => {\n                target.classList.remove(args.classToggle || \"\");\n              }, args.timeout);\n            }\n          }\n        }\n        else if(infoTextRef.current){\n          infoTextRef.current.innerText = args.text;\n          infoTextRef.current.classList.add(args.classToggle || \"\");\n          if(args.timeout){\n            timeoutId = setTimeout(() => {\n              infoTextRef.current?.classList.remove(args.classToggle || \"\");\n            }, args.timeout);\n          }\n        }\n      }\n    },\n    {\n      name: 'response', //name for the key binding.\n      description: \"Send custom response\", //description of the command\n      exec: (editor: any, responseType = \"\") => {\n        const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n        Streamlit.setComponentValue({id: v1().slice(0,8), type: responseType, lang: outgoingMode, text: editor.getValue(), selected: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n      }\n    },\n    // {\n    //   name: 'returnSelection', //name for the key binding.\n    //   description: \"Send selected text to Streamlit\", //description of the command\n    //   exec: (editor: any) => {\n    //     const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n    //     Streamlit.setComponentValue({id: v1().slice(0,8), type: \"selection\", lang: outgoingMode, text: editor.getSelectedText(), cursor: editor.getCursorPosition()});\n    //   }\n    // },\n    {\n      name: 'editSnippets',\n      description: \"Edit snippets\",\n      bindKey: { win: 'Ctrl-Alt-M', mac: 'Command-Alt-M' },\n      exec: (editor: any) => {\n        const snippetManager = ace.require('ace/snippets').snippetManager;\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"snippets\"){\n            const snippetText = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            if(outgoingMode === \"snippets\"){}\n            try{\n              const snippetsPlusMinus = snippetText.split(\"###~~~\")[1];\n              const [snippetsPlus, snippetsMinus] = snippetsPlusMinus.split(\"###---\");\n              const snippetsToAdd = snippetsPlus.split(\"###+++\")[1];\n              const snippetsToRemove = snippetsMinus;\n              const langMode = editor.getSession().$modeId.split(\"/\").pop();\n              setSnippetAddRemove({[langMode] : [snippetAddRemove[langMode][0] + snippetsToAdd, snippetAddRemove[langMode][1] + snippetsToRemove]});\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const langMode = editor.getSession().$modeId.split(\"/\").pop()\n          const snippetConcatText = `\\n###~~~#(DO NOT EDIT THIS LINE)\n# Commented out above are all the snippets that are currently\n# registered for ${args['lang']} mode.\n\\n\\n###+++#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to add below this line.\\n\\n\\n\\n\n\\n\\n\\n###---#(DO NOT EDIT THIS LINE) \\n# Put the snippets you want to remove below this line.\\n\\n\\n\\n\\n\\n\\n`;\n          const snippetText = \"#\" + createSnippets(snippetManager.snippetMap[langMode].map((snip: any) => ({name: snip.name, code: snip.content}))).replace(/\\n/g, \"\\n#\") + snippetConcatText;\n          // snippetManager.files[editor.getSession().$modeId].snippetText\n          const lineCount = (snippetText.match(/\\n/g) || []).length;\n          baseSession.current = editor.getSession();\n          const snippetsSession = ace.createEditSession(snippetText, \"ace/mode/snippets\");\n          editor.setSession(snippetsSession);\n          const cursorPos = {row: (lineCount - 15)>0? lineCount - 15 : 0, column: 0};\n          editor.moveCursorTo(cursorPos.row, cursorPos.column);\n          editor.renderer.scrollCursorIntoView(cursorPos, 0.5);\n        }\n      }\n    },\n    {\n      name: 'editKeyBindings',\n      description: \"Edit keybindings\",\n      bindKey: { win: 'Ctrl-Alt-B', mac: 'Command-Alt-B' },\n      exec: (editor: any) => {\n        ace.require('ace/autocomplete').Autocomplete.for(editor);\n        if(baseSession.current){\n          const outgoingMode = editor.getSession().$modeId.split(\"/\").pop();\n          if(outgoingMode === \"json\"){\n            const keybindingsJSON = editor.getSession().getValue();\n            editor.setSession(baseSession.current);\n            baseSession.current = null;\n            setCode(editor.getSession().getValue());\n            try{\n              setKeybindingAddRemove(JSON.parse(keybindingsJSON));\n            } catch (error) {\n              editor.execCommand(\"infoMessage\",{text: \"error parsing file, restoring original file\", timeout: 2000, classToggle: \"show\"});\n            }\n          }\n        } else {\n          const keybindings = {commands: {}, completer: {}};\n          if(editor.completer && editor.completer.keyboardHandler.commands){\n            keybindings.completer = Object.keys(editor.completer.keyboardHandler.commands).map((key: any) => ({bindkey: editor.completer.keyboardHandler.commands[key].bindKey ?? \"\", name: editor.completer.keyboardHandler.commands[key].name}));\n          }\n          if(editor.commands.commands){\n            keybindings.commands = Object.keys(editor.commands.commands).map((key: any) => ({bindkey: editor.commands.commands[key].bindKey ?? \"\", name: editor.commands.commands[key].name}));\n          }\n          const keybindingsJSON = JSON.stringify(keybindings, undefined, 2);\n          baseSession.current = editor.getSession();\n          const keybindingsSession = ace.createEditSession(keybindingsJSON, \"ace/mode/json\");\n          editor.setSession(keybindingsSession);\n        }\n      }\n    },\n    {\n      name: 'exitSession', //name for the key binding.\n      bindKey: { win: 'Esc', mac: 'Esc' },\n      description: \"Return to main session (keep changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          const mode = editor.getSession().$modeId.split(\"/\").pop();\n          if (mode === \"snippets\")\n            editor.execCommand(\"editSnippets\");\n          else if (mode === \"json\")\n            editor.execCommand(\"editKeyBindings\");\n        }\n      }\n    },\n    {\n      name: 'abandonSession', //name for the key binding.\n      bindKey: { win: 'Ctrl-Alt-Esc', mac: 'Command-Alt-Esc' },\n      description: \"Return to main session (discard changes)\", //description of the command\n      exec: (editor: any) => {\n        if(baseSession.current){\n          editor.setSession(baseSession.current);\n          baseSession.current = null;\n          setCode(editor.getSession().getValue());\n        }\n      }\n    },\n    {\n      name: 'classART', //name for the key binding.\n      description: \"Add/Remove/Toggle class for element\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, type: string, class: string}) => {\n        if(args.targetQueryString && args.type && args.class){\n          switch(args.type){\n            case \"add\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.add(args.class));\n              break;\n            case \"remove\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.remove(args.class));\n              break;\n            case \"toggle\":\n              document.querySelectorAll(args.targetQueryString)?.forEach((el: any) => el.classList.toggle(args.class));\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    },\n    {\n      name: 'conditionalExecute', //name for the key binding.\n      description: \"Execute command if element exists\", //description of the command\n      exec: (editor: any, args: {targetQueryString: string, command: any[], condition?: boolean}) => {\n        if(args.targetQueryString && args.command && Array.isArray(args.command)){\n          if(!(args.condition ?? true) === !document.querySelector(args.targetQueryString)){\n            typeof args.command[0] === \"string\" ? execute(args.command[0], args.command[1]) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n        }\n      }\n    },\n    {\n      name: 'delayedExecute', //name for the key binding.\n      description: \"Execute command after a period of time\", //description of the command\n      exec: (editor: any, args: { command: string | any[], timeout?: number}) => {\n        if(args.command){\n          if(Array.isArray(args.command) && args.command.length === 2){\n            typeof args.command[0] === \"string\" ? setTimeout(() => {execute(args.command[0], args.command[1])}, args.timeout ?? defaultProps.debounceChangePeriod) : console.warn(\"Editor command - conditionalExecute: improper command format! Command array must contain name of command as first element and arguments as second element.\");\n          }\n          else if(typeof args.command === \"string\"){\n            setTimeout(() => {\n              execute(args.command as string);\n            }, args.timeout ?? defaultProps.debounceChangePeriod);\n          }\n        }\n      }\n    }\n  ]};\n\n  const execute = (command: string, args: any = \"\") => {\n    const editor = aceEditor.current?.editor;\n    if (editor) {\n      if (!args) {\n        editor.execCommand(command)\n      }\n      else if (typeof args === \"number\" || typeof args === \"string\") {\n        editor.execCommand(command, args);\n      }\n      else if (typeof args === \"object\" && !Array.isArray(args)) {\n        var containsNumsStr = true;\n        Object.keys(args).forEach((key: any) => {\n          containsNumsStr = typeof args[key] === \"string\" || typeof args[key] === \"number\" || Array.isArray(args[key]);\n        });\n        if (Object.keys(args).length < 4 && containsNumsStr) {\n          editor.execCommand(command, args);\n        }\n      }\n      else {\n        console.warn(`Function - execute: failed to parse/execute \"${command}\" command!`);\n      }\n    }\n  }\n\n  const executeAll = (commands: any[]) => {\n    commands.forEach(singleCommand => {\n      if (Array.isArray(singleCommand)) {\n        typeof singleCommand[0] === \"string\" ? execute(singleCommand[0], singleCommand[1]) : console.warn(\"Function - executeAll: improper command format! Singular commands must contain name of command as first element and arguments as second element.\");\n      } else if (typeof singleCommand === \"string\") {\n        execute(singleCommand);\n      } else {\n        console.warn(\"Function - executeAll: failed to parse/execute command(s)!\");\n      }\n    });\n  }\n\n  const resetEditor = () => {\n    setCode(args['code']);\n  }\n\n  const unsecureCopyTextToClipboard = (text: string) => {\n    const textField = document.createElement('textarea');\n    textField.value = text;\n    document.body.appendChild(textField);\n    textField.select();\n    document.execCommand('copy');\n    textField.remove();\n  }\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  // This useEffect is used to reset the editor when the code argument changes and\n  // the allow_reset argument is true. The allow_reset argument only impacts the\n  // behavior of the component when the component has a fixed key argument because\n  // changing the key argument results in the creation of a new component instance.\n  // Everything would be reset anyways.\n  useEffect(() => {\n    if (args['allow_reset'] === true && args['code'] !== code) {\n      reset.current = !reset.current;\n      resetEditor();\n    }\n  }, [args['code']]);\n\n  /**\n   * This could also be memoized but I don't think it would be necessary because its not expensive.\n   */\n  const themeChoice = () => {\n    const isDarkTheme = theme? theme.base === \"dark\" : true;\n    switch (args['theme']) {\n      case \"contrast\":\n        return isDarkTheme? \"streamlit_light\" : \"streamlit_dark\";\n      case \"light\":\n        return \"streamlit_light\";\n      case \"dark\":\n        return \"streamlit_dark\";\n      case \"default\":\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n      default:\n        return isDarkTheme? \"streamlit_dark\" : \"streamlit_light\";\n    }\n  }\n\n  const themeProp = themeChoice();\n  const componentContainerProps = args[\"component_props\"];\n\n  const {info: infoArg, menu: menuArg, focus: focusArg, code: codeArg, ...rest} = args;\n  const editorArgsString = JSON.stringify(rest);\n  const menuArgsString = JSON.stringify(menuArg);\n  const infoArgsString = JSON.stringify(infoArg);\n  const buttonArgsString = JSON.stringify(args['buttons']);\n  const themeString = JSON.stringify(theme);\n  const snippets = JSON.stringify(snippetAddRemove);\n\n  /**\n   * This section contains the main sub-components (child components). These components are wrapped in useMemos\n   * in order to prevent unnecessary re-rendering of the components. This is listed as one of its use cases in the\n   * React docs ({@link https://beta.reactjs.org/reference/react/useMemo#skipping-re-rendering-of-components Skipping re-rendering of components})\n   *\n   * This component is the editor component that is rendered. It is only re-rendered when\n   * certain properties change. This is important because we should account for the possibility that the editor \n   * is being used at any given moment. Unnecessary and frequent re-rendering of the editor (for outside reasons\n   * especially) can impact user experience and responsiveness.\n   */\n  const editor = useMemo(() => {\n    const keybindings = JSON.stringify(keybindingAddRemove);\n    const revertedArgs = JSON.parse(editorArgsString);\n\n    // Create commands for each button\n    if(revertedArgs['buttons'].length > 0) {\n      revertedArgs['buttons'].forEach((button: any) => {\n          commands.commands = [...commands.commands, {\n            name: (button.name as string).trim().replace(/\\s+/g, '_') + '_button',\n            bindKey: button.bindKey,\n            description: \"Execute '\" + button.name + \"' button command(s)\",\n            exec: () => {\n            executeAll(button.commands);\n          }}];\n      });\n    }\n\n    let heightProps = {};\n    if(typeof revertedArgs['height'] === \"number\") \n      heightProps = {minLines: 1, maxLines: revertedArgs['height']};\n    else if(typeof revertedArgs['height'] === \"string\") \n      heightProps = {height: revertedArgs['height']};\n    else if(Array.isArray(revertedArgs['height']) && revertedArgs['height'].length === 2) \n      heightProps = {minLines: revertedArgs['height'][0], maxLines: revertedArgs['height'][1]};\n\n    const aceEditorProps = { ...defaultEditorProps, ...revertedArgs['editorProps'] };\n    const aceOptions = { ...defaultOptions, ...revertedArgs['options'] };\n    const partProps = { setOptions: aceOptions, editorProps: aceEditorProps };\n    const aceProps = { ...defaultProps, ...partProps,...heightProps, ...revertedArgs['props'] };\n\n    /**\n     * TODO: Remove props from aceProps that we don't want to allow user access to.\n     */\n    return (\n        <Editor\n         editorRef={aceEditor}\n         code={code} \n         lang={revertedArgs['lang']} \n         theme={themeProp} \n         shortcuts={revertedArgs['shortcuts']} \n         snippetString={snippets} \n         commands={commands.commands} \n         keybindingString={keybindings} \n         props={aceProps} \n         onChange={onChangeHandler}\n         onSelectionChange={onSelectionChangeHandler}\n         onBlur={onEditorBlur}  \n        />\n      );\n  }, [editorArgsString, themeProp, snippets, keybindingAddRemove, reset.current]);\n\n  const buttons = useMemo(() => {\n    const revertedButtons = JSON.parse(buttonArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const customButtonTheme = revertedTheme ?? {};\n    const customButtons = {buttons: (revertedButtons ?? []) as customButton[], name: \"customButtons\"} as buttonGroup;\n    return (\n      < ButtonSet\n       buttonGroup={customButtons} \n       theme={customButtonTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [buttonArgsString, themeString, themeProp]);\n\n  const menu = useMemo(() => {\n    const revertedMenu = JSON.parse(menuArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const menuTheme = revertedTheme ?? {};\n    return (\n      <ButtonMenu\n       menu={revertedMenu} \n       theme={menuTheme} \n       themeProp={themeProp} \n       executeAll={(commands) => executeAll(commands)} />\n    );\n  }, [menuArgsString, themeString, themeProp]);\n\n  const info = useMemo(() => {\n    const revertedInfo = JSON.parse(infoArgsString);\n    const revertedTheme = JSON.parse(themeString);\n    const infoTheme = revertedTheme ?? {};\n    return (\n      <InfoBar\n       infoRef={infoTextRef} \n       info={revertedInfo} \n       theme={infoTheme} />\n    );\n  }, [infoArgsString, themeString]);\n\n  const globalCSS = useMemo(() => {\n    return (\n      <GlobalCSS isDisabled={disabled} inject={componentContainerProps.globalCSS} />\n    );\n  }, [componentContainerProps.globalCSS, disabled]);\n\n  return (\n    <StyledCodeEditor ref={observe} style={componentContainerProps.style} css={componentContainerProps.css} className={\"streamlit_code-editor \" + theme?.base ?? \"\" } >\n      {globalCSS}\n      {editor}\n      {buttons}\n      {menu}\n      {info}\n    </StyledCodeEditor>\n  )\n}\n\nexport default withStreamlitConnection(CodeEditor)\n","// / <reference types=\"styled-components/cssprop\" />\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CodeEditor from \"./CodeEditor\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CodeEditor />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}